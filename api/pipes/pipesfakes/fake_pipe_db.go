// This file was generated by counterfeiter
package pipesfakes

import (
	"sync"

	"github.com/concourse/atc/api/pipes"
	"github.com/concourse/atc/db"
)

type FakePipeDB struct {
	CreatePipeStub        func(pipeGUID string, url string, teamName string) error
	createPipeMutex       sync.RWMutex
	createPipeArgsForCall []struct {
		pipeGUID string
		url      string
		teamName string
	}
	createPipeReturns struct {
		result1 error
	}
	createPipeReturnsOnCall map[int]struct {
		result1 error
	}
	GetPipeStub        func(pipeGUID string) (db.Pipe, error)
	getPipeMutex       sync.RWMutex
	getPipeArgsForCall []struct {
		pipeGUID string
	}
	getPipeReturns struct {
		result1 db.Pipe
		result2 error
	}
	getPipeReturnsOnCall map[int]struct {
		result1 db.Pipe
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePipeDB) CreatePipe(pipeGUID string, url string, teamName string) error {
	fake.createPipeMutex.Lock()
	ret, specificReturn := fake.createPipeReturnsOnCall[len(fake.createPipeArgsForCall)]
	fake.createPipeArgsForCall = append(fake.createPipeArgsForCall, struct {
		pipeGUID string
		url      string
		teamName string
	}{pipeGUID, url, teamName})
	fake.recordInvocation("CreatePipe", []interface{}{pipeGUID, url, teamName})
	fake.createPipeMutex.Unlock()
	if fake.CreatePipeStub != nil {
		return fake.CreatePipeStub(pipeGUID, url, teamName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createPipeReturns.result1
}

func (fake *FakePipeDB) CreatePipeCallCount() int {
	fake.createPipeMutex.RLock()
	defer fake.createPipeMutex.RUnlock()
	return len(fake.createPipeArgsForCall)
}

func (fake *FakePipeDB) CreatePipeArgsForCall(i int) (string, string, string) {
	fake.createPipeMutex.RLock()
	defer fake.createPipeMutex.RUnlock()
	return fake.createPipeArgsForCall[i].pipeGUID, fake.createPipeArgsForCall[i].url, fake.createPipeArgsForCall[i].teamName
}

func (fake *FakePipeDB) CreatePipeReturns(result1 error) {
	fake.CreatePipeStub = nil
	fake.createPipeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePipeDB) CreatePipeReturnsOnCall(i int, result1 error) {
	fake.CreatePipeStub = nil
	if fake.createPipeReturnsOnCall == nil {
		fake.createPipeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createPipeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePipeDB) GetPipe(pipeGUID string) (db.Pipe, error) {
	fake.getPipeMutex.Lock()
	ret, specificReturn := fake.getPipeReturnsOnCall[len(fake.getPipeArgsForCall)]
	fake.getPipeArgsForCall = append(fake.getPipeArgsForCall, struct {
		pipeGUID string
	}{pipeGUID})
	fake.recordInvocation("GetPipe", []interface{}{pipeGUID})
	fake.getPipeMutex.Unlock()
	if fake.GetPipeStub != nil {
		return fake.GetPipeStub(pipeGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getPipeReturns.result1, fake.getPipeReturns.result2
}

func (fake *FakePipeDB) GetPipeCallCount() int {
	fake.getPipeMutex.RLock()
	defer fake.getPipeMutex.RUnlock()
	return len(fake.getPipeArgsForCall)
}

func (fake *FakePipeDB) GetPipeArgsForCall(i int) string {
	fake.getPipeMutex.RLock()
	defer fake.getPipeMutex.RUnlock()
	return fake.getPipeArgsForCall[i].pipeGUID
}

func (fake *FakePipeDB) GetPipeReturns(result1 db.Pipe, result2 error) {
	fake.GetPipeStub = nil
	fake.getPipeReturns = struct {
		result1 db.Pipe
		result2 error
	}{result1, result2}
}

func (fake *FakePipeDB) GetPipeReturnsOnCall(i int, result1 db.Pipe, result2 error) {
	fake.GetPipeStub = nil
	if fake.getPipeReturnsOnCall == nil {
		fake.getPipeReturnsOnCall = make(map[int]struct {
			result1 db.Pipe
			result2 error
		})
	}
	fake.getPipeReturnsOnCall[i] = struct {
		result1 db.Pipe
		result2 error
	}{result1, result2}
}

func (fake *FakePipeDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createPipeMutex.RLock()
	defer fake.createPipeMutex.RUnlock()
	fake.getPipeMutex.RLock()
	defer fake.getPipeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakePipeDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pipes.PipeDB = new(FakePipeDB)
