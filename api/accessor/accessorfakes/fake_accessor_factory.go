// Code generated by counterfeiter. DO NOT EDIT.
package accessorfakes

import (
	"context"
	"sync"

	"github.com/concourse/atc/api/accessor"
)

type FakeAccessorFactory struct {
	CreateAccessorStub        func(context.Context) (accessor.Accessor, error)
	createAccessorMutex       sync.RWMutex
	createAccessorArgsForCall []struct {
		arg1 context.Context
	}
	createAccessorReturns struct {
		result1 accessor.Accessor
		result2 error
	}
	createAccessorReturnsOnCall map[int]struct {
		result1 accessor.Accessor
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAccessorFactory) CreateAccessor(arg1 context.Context) (accessor.Accessor, error) {
	fake.createAccessorMutex.Lock()
	ret, specificReturn := fake.createAccessorReturnsOnCall[len(fake.createAccessorArgsForCall)]
	fake.createAccessorArgsForCall = append(fake.createAccessorArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("CreateAccessor", []interface{}{arg1})
	fake.createAccessorMutex.Unlock()
	if fake.CreateAccessorStub != nil {
		return fake.CreateAccessorStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createAccessorReturns.result1, fake.createAccessorReturns.result2
}

func (fake *FakeAccessorFactory) CreateAccessorCallCount() int {
	fake.createAccessorMutex.RLock()
	defer fake.createAccessorMutex.RUnlock()
	return len(fake.createAccessorArgsForCall)
}

func (fake *FakeAccessorFactory) CreateAccessorArgsForCall(i int) context.Context {
	fake.createAccessorMutex.RLock()
	defer fake.createAccessorMutex.RUnlock()
	return fake.createAccessorArgsForCall[i].arg1
}

func (fake *FakeAccessorFactory) CreateAccessorReturns(result1 accessor.Accessor, result2 error) {
	fake.CreateAccessorStub = nil
	fake.createAccessorReturns = struct {
		result1 accessor.Accessor
		result2 error
	}{result1, result2}
}

func (fake *FakeAccessorFactory) CreateAccessorReturnsOnCall(i int, result1 accessor.Accessor, result2 error) {
	fake.CreateAccessorStub = nil
	if fake.createAccessorReturnsOnCall == nil {
		fake.createAccessorReturnsOnCall = make(map[int]struct {
			result1 accessor.Accessor
			result2 error
		})
	}
	fake.createAccessorReturnsOnCall[i] = struct {
		result1 accessor.Accessor
		result2 error
	}{result1, result2}
}

func (fake *FakeAccessorFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createAccessorMutex.RLock()
	defer fake.createAccessorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAccessorFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ accessor.AccessorFactory = new(FakeAccessorFactory)
