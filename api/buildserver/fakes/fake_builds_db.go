// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc"
	"github.com/concourse/atc/api/buildserver"
	"github.com/concourse/atc/db"
)

type FakeBuildsDB struct {
	GetConfigByBuildIDStub        func(buildID int) (atc.Config, db.ConfigVersion, error)
	getConfigByBuildIDMutex       sync.RWMutex
	getConfigByBuildIDArgsForCall []struct {
		buildID int
	}
	getConfigByBuildIDReturns struct {
		result1 atc.Config
		result2 db.ConfigVersion
		result3 error
	}
}

func (fake *FakeBuildsDB) GetConfigByBuildID(buildID int) (atc.Config, db.ConfigVersion, error) {
	fake.getConfigByBuildIDMutex.Lock()
	fake.getConfigByBuildIDArgsForCall = append(fake.getConfigByBuildIDArgsForCall, struct {
		buildID int
	}{buildID})
	fake.getConfigByBuildIDMutex.Unlock()
	if fake.GetConfigByBuildIDStub != nil {
		return fake.GetConfigByBuildIDStub(buildID)
	} else {
		return fake.getConfigByBuildIDReturns.result1, fake.getConfigByBuildIDReturns.result2, fake.getConfigByBuildIDReturns.result3
	}
}

func (fake *FakeBuildsDB) GetConfigByBuildIDCallCount() int {
	fake.getConfigByBuildIDMutex.RLock()
	defer fake.getConfigByBuildIDMutex.RUnlock()
	return len(fake.getConfigByBuildIDArgsForCall)
}

func (fake *FakeBuildsDB) GetConfigByBuildIDArgsForCall(i int) int {
	fake.getConfigByBuildIDMutex.RLock()
	defer fake.getConfigByBuildIDMutex.RUnlock()
	return fake.getConfigByBuildIDArgsForCall[i].buildID
}

func (fake *FakeBuildsDB) GetConfigByBuildIDReturns(result1 atc.Config, result2 db.ConfigVersion, result3 error) {
	fake.GetConfigByBuildIDStub = nil
	fake.getConfigByBuildIDReturns = struct {
		result1 atc.Config
		result2 db.ConfigVersion
		result3 error
	}{result1, result2, result3}
}

var _ buildserver.BuildsDB = new(FakeBuildsDB)
