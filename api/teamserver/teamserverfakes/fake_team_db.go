// This file was generated by counterfeiter
package teamserverfakes

import (
	"sync"
	"time"

	"github.com/concourse/atc/api/teamserver"
	"github.com/concourse/atc/db"
)

type FakeTeamDB struct {
	CreateTeamStub        func(data db.Team) (db.SavedTeam, error)
	createTeamMutex       sync.RWMutex
	createTeamArgsForCall []struct {
		data db.Team
	}
	createTeamReturns struct {
		result1 db.SavedTeam
		result2 error
	}
	SaveWorkerStub        func(info db.WorkerInfo, ttl time.Duration) (db.SavedWorker, error)
	saveWorkerMutex       sync.RWMutex
	saveWorkerArgsForCall []struct {
		info db.WorkerInfo
		ttl  time.Duration
	}
	saveWorkerReturns struct {
		result1 db.SavedWorker
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTeamDB) CreateTeam(data db.Team) (db.SavedTeam, error) {
	fake.createTeamMutex.Lock()
	fake.createTeamArgsForCall = append(fake.createTeamArgsForCall, struct {
		data db.Team
	}{data})
	fake.recordInvocation("CreateTeam", []interface{}{data})
	fake.createTeamMutex.Unlock()
	if fake.CreateTeamStub != nil {
		return fake.CreateTeamStub(data)
	} else {
		return fake.createTeamReturns.result1, fake.createTeamReturns.result2
	}
}

func (fake *FakeTeamDB) CreateTeamCallCount() int {
	fake.createTeamMutex.RLock()
	defer fake.createTeamMutex.RUnlock()
	return len(fake.createTeamArgsForCall)
}

func (fake *FakeTeamDB) CreateTeamArgsForCall(i int) db.Team {
	fake.createTeamMutex.RLock()
	defer fake.createTeamMutex.RUnlock()
	return fake.createTeamArgsForCall[i].data
}

func (fake *FakeTeamDB) CreateTeamReturns(result1 db.SavedTeam, result2 error) {
	fake.CreateTeamStub = nil
	fake.createTeamReturns = struct {
		result1 db.SavedTeam
		result2 error
	}{result1, result2}
}

func (fake *FakeTeamDB) SaveWorker(info db.WorkerInfo, ttl time.Duration) (db.SavedWorker, error) {
	fake.saveWorkerMutex.Lock()
	fake.saveWorkerArgsForCall = append(fake.saveWorkerArgsForCall, struct {
		info db.WorkerInfo
		ttl  time.Duration
	}{info, ttl})
	fake.recordInvocation("SaveWorker", []interface{}{info, ttl})
	fake.saveWorkerMutex.Unlock()
	if fake.SaveWorkerStub != nil {
		return fake.SaveWorkerStub(info, ttl)
	} else {
		return fake.saveWorkerReturns.result1, fake.saveWorkerReturns.result2
	}
}

func (fake *FakeTeamDB) SaveWorkerCallCount() int {
	fake.saveWorkerMutex.RLock()
	defer fake.saveWorkerMutex.RUnlock()
	return len(fake.saveWorkerArgsForCall)
}

func (fake *FakeTeamDB) SaveWorkerArgsForCall(i int) (db.WorkerInfo, time.Duration) {
	fake.saveWorkerMutex.RLock()
	defer fake.saveWorkerMutex.RUnlock()
	return fake.saveWorkerArgsForCall[i].info, fake.saveWorkerArgsForCall[i].ttl
}

func (fake *FakeTeamDB) SaveWorkerReturns(result1 db.SavedWorker, result2 error) {
	fake.SaveWorkerStub = nil
	fake.saveWorkerReturns = struct {
		result1 db.SavedWorker
		result2 error
	}{result1, result2}
}

func (fake *FakeTeamDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createTeamMutex.RLock()
	defer fake.createTeamMutex.RUnlock()
	fake.saveWorkerMutex.RLock()
	defer fake.saveWorkerMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeTeamDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ teamserver.TeamDB = new(FakeTeamDB)
