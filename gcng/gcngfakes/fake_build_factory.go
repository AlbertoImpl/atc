// This file was generated by counterfeiter
package gcngfakes

import (
	"sync"
)

type FakeBuildFactory struct {
	MarkNonInterceptibleBuildsStub        func() error
	markNonInterceptibleBuildsMutex       sync.RWMutex
	markNonInterceptibleBuildsArgsForCall []struct{}
	markNonInterceptibleBuildsReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBuildFactory) MarkNonInterceptibleBuilds() error {
	fake.markNonInterceptibleBuildsMutex.Lock()
	fake.markNonInterceptibleBuildsArgsForCall = append(fake.markNonInterceptibleBuildsArgsForCall, struct{}{})
	fake.recordInvocation("MarkNonInterceptibleBuilds", []interface{}{})
	fake.markNonInterceptibleBuildsMutex.Unlock()
	if fake.MarkNonInterceptibleBuildsStub != nil {
		return fake.MarkNonInterceptibleBuildsStub()
	}
	return fake.markNonInterceptibleBuildsReturns.result1
}

func (fake *FakeBuildFactory) MarkNonInterceptibleBuildsCallCount() int {
	fake.markNonInterceptibleBuildsMutex.RLock()
	defer fake.markNonInterceptibleBuildsMutex.RUnlock()
	return len(fake.markNonInterceptibleBuildsArgsForCall)
}

func (fake *FakeBuildFactory) MarkNonInterceptibleBuildsReturns(result1 error) {
	fake.MarkNonInterceptibleBuildsStub = nil
	fake.markNonInterceptibleBuildsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.markNonInterceptibleBuildsMutex.RLock()
	defer fake.markNonInterceptibleBuildsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeBuildFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
