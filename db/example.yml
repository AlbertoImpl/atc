---
resource_types:
- name: pr
  type: docker-image
  source: {repository: jtarchie/foo}

resources:
- name: atomy-prs
  type: pr
  source: {repo: vito/atomy}

jobs:
- name: foo
  plan:
  - get: atomy-prs
  - task: run-pr
    config:
      inputs:
      - name: atomy-prs

# run foo:
#     - run get:
#         - select worker
#         - compute cache id
#             - find volume for custom resource type
#                 - compute cache id
#                     - find volume for worker resource type
#                         - if not found, create volume
#                               - import worker resource type
#                               - initialize
#                         - acquire volume for build (join table)
#                 - look for cache volume
#                     - if not found, create container, initialize resource type
#                     - acquire volume for build (join table)
#         - look for cache volume
#             - if not found, create container, initialize cache
#             - acquire for build
#     - run task:
#         - select worker
#         - compute cache id
#           - this is same as before except it should be able to find everything
#             and never have to fetch
#
# * need join table for find-and-acquire?

`get`
===============

run foo:
    builds:
    | id |
    | 42 |

    - get:
        - select worker
          workers:
          | some-worker |
        - compute cache ID (build up ResourceCache in-memory based on pipeline config and worker resource type)
          cache ID:
          {
            created_by_resource_cache: {
              created_by_base_resource_type: {
                name: docker-image
              },
              source: {repository: jtarchie/foo},
              params: {},
              version: {digest: sha256:...}
            }
            source: {repo: vito/atomy},
            params: {},
            version: {ref: abcdef}
          }

          populates resource caches and base resource types, and marks it in use by the build
          base_resource_types:
          | id | name         |
          | 1  | docker-image |

          worker_base_resource_types:
          | id | worker_name | base_resource_type_id | image         | version          |
          | 1  | some-worker | 1                     | /var/vcap/... | sdmnfbdsdjhkfsdf |

          resource_caches:
          | id | resource_cache_id | base_resource_type_id | source                     | params  | version              |
          | 1  | NULL              | 1                     | {repository: jtarchie/foo} | {}      | {digest: sha256:...} |
          | 2  | 1                 | NULL                  | {repo: vito/atomy}         | {}      | {ref: abcdef}        |

          resource_cache_uses:
          | build_id | cache_id | <- ON DELETE RESTRICT for cache_id
          | 42       | 2        |

        - look for volume relating to cache ID on worker
            - if found, no-op
              volumes:
              | id  | worker_name | resource_cache_id | worker_base_resource_type_id | state        |
              | 5   | some-worker | NULL              | 1                            | initialized  | lock
              | 9   | some-worker | 1                 | NULL                         | initialized  |
              | 14  | some-worker | 2                 | NULL                         | initialized  |


            - if not found, recurse into ResourceCache's creator
                - if base resource type, import and initialize volume
                  base_resource_types:
                  | id | name         | image         | version          |
                  | 1  | docker-image | /var/vcap/... | sdmnfbdsdjhkfsdf |

                  resource_caches:
                  | id | resource_cache_id | base_resource_type_id | source                     | params  | version              |
                  | 1  | NULL              | 1                     | {repository: jtarchie/foo} | {}      | {digest: sha256:...} |

                  volumes:
                  | id  | worker_name | resource_cache_id | state        |
                  | 14  | some-worker | 1                 | initialized  |

                - if resource cache, recurse
            - create volume and container
            - fetch and initialize volume for resource cache
    - run task:
        - select worker
        - compute cache ID (same as above)
        - blah


`check` (either `image_resource` or pipeline resource)
====================

resources:
- name: 30m
  type: time
  source: {interval: 30m}

- name: custom-resource
  type: custom-type
  source: {custom-resource: config}

resource_types:
- name: custom-type
  type: docker-image
  source: {custom-type: config}

check `30m`:

- generate resource config
    {
      base_resource_type: {
        name: time
      },
      source: {
        interval: 30m
      }
    }
    => UsedResourceConfig
- acquire checking lock for config
- find container for resource config
  - if found:
    - return container
  - if not found:
    - pick worker
    - find base resource type 'time' for that worker (join table + 'name' lookup)
    - create container relating to worker_base_resource_types
- run `check`
- release lock


check `custom-resource`:

- generate resource config
  - check `custom-type`
    - generate resource config
      {
        base_resource_type: {
          name: docker-image
        }
        source: {
          custom-type: config
        }
      }
    - acquire checking lock for config
    - find container for resource config
      - if found:
        - return container
      - if not found:
        - pick worker
        - find base resource type 'docker-image' for that worker (join table + 'name' lookup)
        - create container relating to worker_base_resource_types
    - run `check`
    - release lock
    - returns 'digest: sha256:abcd'
  - config is now:
    {
      resource_cache: {
        created_by_base_resource_type: {
          name: docker-image
        },
        source: {custom-type: config},
        params: {},
        version: {digest: sha256:abcd}
      },
      source: {custom-resource: config}
    }
    => UsedResourceConfig
- acquire checking lock for config
- find container for resource config
  - if found:
    - return container
  - if not found:
    - pick worker
    - find volume for resource cache on that worker
      - if found:
        - return volume
      - if not found:
        - acquire lock for fetching resource cache on worker
        - create container for fetching resource cache
        - create volume for resource cache
        - run `get`
        - return volume
    - create container with COW of volume as rootfs
- run `check`
- release lock


`put`
====================


`task`
====================


`resource_cache`
====================

---
resource_types:
- name: a ##################
  type: docker-image
  source: {for: a}

resources:
- name: b ##################
  type: a
  source: {for: b}

- name: some-image ########################
  type: docker-image
  source: {for: some-image}

jobs:
- name: some-job
  plan:
  - get: b #########################
    params: {some: params}
  - get: some-image
  - task: use-some-image
    image: some-image
    file: ...
  - task: use-some-external-image
    config:
      image_resource:
        type: docker-image
        source: {for: task_image_resource}


assuming some-job ran:

base_resource_type:
| id | name             |
| 1  | docker-image     |

resource_configs:

| id | base_resource_type_id | resource_cache_id | source                     |
| 10 | 1                     | NULL              | {for: a}                   |
| 20 | 1                     | NULL              | {for: some-image}          |
| 30 | 1                     | NULL              | {for: task_image_resource} |
| 40 | NULL                  | 100               | {for: b}                   |

resource_caches:

| id   | resource_config_id | version         | params         |
| 100  | 10                 | {digest:a-id}   | {}             |
| 200  | 20                 | {digest:si-id}  | {}             |
| 300  | 30                 | {digest:tir-id} | {}             |
| 400  | 40                 | {ref:abc}       | {some: params} |

resource_cache_uses:

| resource_cache_id | build_id | resource_id | resource_type_id |
| 100               | 42       | NULL        | NULL             |
| 200               | 42       | NULL        | NULL             |
| 300               | 42       | NULL        | NULL             |
| 400               | 42       | NULL        | NULL             |

builds:
| id |
| 42 |