// Code generated by counterfeiter. DO NOT EDIT.
package lockfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc/db/lock"
)

type FakeLockFactory struct {
	NewLockStub        func(logger lager.Logger, ids lock.LockID) lock.Lock
	newLockMutex       sync.RWMutex
	newLockArgsForCall []struct {
		logger lager.Logger
		ids    lock.LockID
	}
	newLockReturns struct {
		result1 lock.Lock
	}
	newLockReturnsOnCall map[int]struct {
		result1 lock.Lock
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLockFactory) NewLock(logger lager.Logger, ids lock.LockID) lock.Lock {
	fake.newLockMutex.Lock()
	ret, specificReturn := fake.newLockReturnsOnCall[len(fake.newLockArgsForCall)]
	fake.newLockArgsForCall = append(fake.newLockArgsForCall, struct {
		logger lager.Logger
		ids    lock.LockID
	}{logger, ids})
	fake.recordInvocation("NewLock", []interface{}{logger, ids})
	fake.newLockMutex.Unlock()
	if fake.NewLockStub != nil {
		return fake.NewLockStub(logger, ids)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.newLockReturns.result1
}

func (fake *FakeLockFactory) NewLockCallCount() int {
	fake.newLockMutex.RLock()
	defer fake.newLockMutex.RUnlock()
	return len(fake.newLockArgsForCall)
}

func (fake *FakeLockFactory) NewLockArgsForCall(i int) (lager.Logger, lock.LockID) {
	fake.newLockMutex.RLock()
	defer fake.newLockMutex.RUnlock()
	return fake.newLockArgsForCall[i].logger, fake.newLockArgsForCall[i].ids
}

func (fake *FakeLockFactory) NewLockReturns(result1 lock.Lock) {
	fake.NewLockStub = nil
	fake.newLockReturns = struct {
		result1 lock.Lock
	}{result1}
}

func (fake *FakeLockFactory) NewLockReturnsOnCall(i int, result1 lock.Lock) {
	fake.NewLockStub = nil
	if fake.newLockReturnsOnCall == nil {
		fake.newLockReturnsOnCall = make(map[int]struct {
			result1 lock.Lock
		})
	}
	fake.newLockReturnsOnCall[i] = struct {
		result1 lock.Lock
	}{result1}
}

func (fake *FakeLockFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newLockMutex.RLock()
	defer fake.newLockMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLockFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ lock.LockFactory = new(FakeLockFactory)
