// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"
	"time"

	"github.com/concourse/atc"
	"github.com/concourse/atc/db"
)

type FakeWorkerRepository struct {
	GetWorkerStub        func(name string) (db.Worker, bool, error)
	getWorkerMutex       sync.RWMutex
	getWorkerArgsForCall []struct {
		name string
	}
	getWorkerReturns struct {
		result1 db.Worker
		result2 bool
		result3 error
	}
	getWorkerReturnsOnCall map[int]struct {
		result1 db.Worker
		result2 bool
		result3 error
	}
	SaveWorkerStub        func(atcWorker atc.Worker, ttl time.Duration) (db.Worker, error)
	saveWorkerMutex       sync.RWMutex
	saveWorkerArgsForCall []struct {
		atcWorker atc.Worker
		ttl       time.Duration
	}
	saveWorkerReturns struct {
		result1 db.Worker
		result2 error
	}
	saveWorkerReturnsOnCall map[int]struct {
		result1 db.Worker
		result2 error
	}
	HeartbeatWorkerStub        func(worker atc.Worker, ttl time.Duration) (db.Worker, error)
	heartbeatWorkerMutex       sync.RWMutex
	heartbeatWorkerArgsForCall []struct {
		worker atc.Worker
		ttl    time.Duration
	}
	heartbeatWorkerReturns struct {
		result1 db.Worker
		result2 error
	}
	heartbeatWorkerReturnsOnCall map[int]struct {
		result1 db.Worker
		result2 error
	}
	WorkersStub        func() ([]db.Worker, error)
	workersMutex       sync.RWMutex
	workersArgsForCall []struct{}
	workersReturns     struct {
		result1 []db.Worker
		result2 error
	}
	workersReturnsOnCall map[int]struct {
		result1 []db.Worker
		result2 error
	}
	VisibleWorkersStub        func([]string) ([]db.Worker, error)
	visibleWorkersMutex       sync.RWMutex
	visibleWorkersArgsForCall []struct {
		arg1 []string
	}
	visibleWorkersReturns struct {
		result1 []db.Worker
		result2 error
	}
	visibleWorkersReturnsOnCall map[int]struct {
		result1 []db.Worker
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWorkerRepository) GetWorker(name string) (db.Worker, bool, error) {
	fake.getWorkerMutex.Lock()
	ret, specificReturn := fake.getWorkerReturnsOnCall[len(fake.getWorkerArgsForCall)]
	fake.getWorkerArgsForCall = append(fake.getWorkerArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetWorker", []interface{}{name})
	fake.getWorkerMutex.Unlock()
	if fake.GetWorkerStub != nil {
		return fake.GetWorkerStub(name)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getWorkerReturns.result1, fake.getWorkerReturns.result2, fake.getWorkerReturns.result3
}

func (fake *FakeWorkerRepository) GetWorkerCallCount() int {
	fake.getWorkerMutex.RLock()
	defer fake.getWorkerMutex.RUnlock()
	return len(fake.getWorkerArgsForCall)
}

func (fake *FakeWorkerRepository) GetWorkerArgsForCall(i int) string {
	fake.getWorkerMutex.RLock()
	defer fake.getWorkerMutex.RUnlock()
	return fake.getWorkerArgsForCall[i].name
}

func (fake *FakeWorkerRepository) GetWorkerReturns(result1 db.Worker, result2 bool, result3 error) {
	fake.GetWorkerStub = nil
	fake.getWorkerReturns = struct {
		result1 db.Worker
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeWorkerRepository) GetWorkerReturnsOnCall(i int, result1 db.Worker, result2 bool, result3 error) {
	fake.GetWorkerStub = nil
	if fake.getWorkerReturnsOnCall == nil {
		fake.getWorkerReturnsOnCall = make(map[int]struct {
			result1 db.Worker
			result2 bool
			result3 error
		})
	}
	fake.getWorkerReturnsOnCall[i] = struct {
		result1 db.Worker
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeWorkerRepository) SaveWorker(atcWorker atc.Worker, ttl time.Duration) (db.Worker, error) {
	fake.saveWorkerMutex.Lock()
	ret, specificReturn := fake.saveWorkerReturnsOnCall[len(fake.saveWorkerArgsForCall)]
	fake.saveWorkerArgsForCall = append(fake.saveWorkerArgsForCall, struct {
		atcWorker atc.Worker
		ttl       time.Duration
	}{atcWorker, ttl})
	fake.recordInvocation("SaveWorker", []interface{}{atcWorker, ttl})
	fake.saveWorkerMutex.Unlock()
	if fake.SaveWorkerStub != nil {
		return fake.SaveWorkerStub(atcWorker, ttl)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.saveWorkerReturns.result1, fake.saveWorkerReturns.result2
}

func (fake *FakeWorkerRepository) SaveWorkerCallCount() int {
	fake.saveWorkerMutex.RLock()
	defer fake.saveWorkerMutex.RUnlock()
	return len(fake.saveWorkerArgsForCall)
}

func (fake *FakeWorkerRepository) SaveWorkerArgsForCall(i int) (atc.Worker, time.Duration) {
	fake.saveWorkerMutex.RLock()
	defer fake.saveWorkerMutex.RUnlock()
	return fake.saveWorkerArgsForCall[i].atcWorker, fake.saveWorkerArgsForCall[i].ttl
}

func (fake *FakeWorkerRepository) SaveWorkerReturns(result1 db.Worker, result2 error) {
	fake.SaveWorkerStub = nil
	fake.saveWorkerReturns = struct {
		result1 db.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerRepository) SaveWorkerReturnsOnCall(i int, result1 db.Worker, result2 error) {
	fake.SaveWorkerStub = nil
	if fake.saveWorkerReturnsOnCall == nil {
		fake.saveWorkerReturnsOnCall = make(map[int]struct {
			result1 db.Worker
			result2 error
		})
	}
	fake.saveWorkerReturnsOnCall[i] = struct {
		result1 db.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerRepository) HeartbeatWorker(worker atc.Worker, ttl time.Duration) (db.Worker, error) {
	fake.heartbeatWorkerMutex.Lock()
	ret, specificReturn := fake.heartbeatWorkerReturnsOnCall[len(fake.heartbeatWorkerArgsForCall)]
	fake.heartbeatWorkerArgsForCall = append(fake.heartbeatWorkerArgsForCall, struct {
		worker atc.Worker
		ttl    time.Duration
	}{worker, ttl})
	fake.recordInvocation("HeartbeatWorker", []interface{}{worker, ttl})
	fake.heartbeatWorkerMutex.Unlock()
	if fake.HeartbeatWorkerStub != nil {
		return fake.HeartbeatWorkerStub(worker, ttl)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.heartbeatWorkerReturns.result1, fake.heartbeatWorkerReturns.result2
}

func (fake *FakeWorkerRepository) HeartbeatWorkerCallCount() int {
	fake.heartbeatWorkerMutex.RLock()
	defer fake.heartbeatWorkerMutex.RUnlock()
	return len(fake.heartbeatWorkerArgsForCall)
}

func (fake *FakeWorkerRepository) HeartbeatWorkerArgsForCall(i int) (atc.Worker, time.Duration) {
	fake.heartbeatWorkerMutex.RLock()
	defer fake.heartbeatWorkerMutex.RUnlock()
	return fake.heartbeatWorkerArgsForCall[i].worker, fake.heartbeatWorkerArgsForCall[i].ttl
}

func (fake *FakeWorkerRepository) HeartbeatWorkerReturns(result1 db.Worker, result2 error) {
	fake.HeartbeatWorkerStub = nil
	fake.heartbeatWorkerReturns = struct {
		result1 db.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerRepository) HeartbeatWorkerReturnsOnCall(i int, result1 db.Worker, result2 error) {
	fake.HeartbeatWorkerStub = nil
	if fake.heartbeatWorkerReturnsOnCall == nil {
		fake.heartbeatWorkerReturnsOnCall = make(map[int]struct {
			result1 db.Worker
			result2 error
		})
	}
	fake.heartbeatWorkerReturnsOnCall[i] = struct {
		result1 db.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerRepository) Workers() ([]db.Worker, error) {
	fake.workersMutex.Lock()
	ret, specificReturn := fake.workersReturnsOnCall[len(fake.workersArgsForCall)]
	fake.workersArgsForCall = append(fake.workersArgsForCall, struct{}{})
	fake.recordInvocation("Workers", []interface{}{})
	fake.workersMutex.Unlock()
	if fake.WorkersStub != nil {
		return fake.WorkersStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.workersReturns.result1, fake.workersReturns.result2
}

func (fake *FakeWorkerRepository) WorkersCallCount() int {
	fake.workersMutex.RLock()
	defer fake.workersMutex.RUnlock()
	return len(fake.workersArgsForCall)
}

func (fake *FakeWorkerRepository) WorkersReturns(result1 []db.Worker, result2 error) {
	fake.WorkersStub = nil
	fake.workersReturns = struct {
		result1 []db.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerRepository) WorkersReturnsOnCall(i int, result1 []db.Worker, result2 error) {
	fake.WorkersStub = nil
	if fake.workersReturnsOnCall == nil {
		fake.workersReturnsOnCall = make(map[int]struct {
			result1 []db.Worker
			result2 error
		})
	}
	fake.workersReturnsOnCall[i] = struct {
		result1 []db.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerRepository) VisibleWorkers(arg1 []string) ([]db.Worker, error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.visibleWorkersMutex.Lock()
	ret, specificReturn := fake.visibleWorkersReturnsOnCall[len(fake.visibleWorkersArgsForCall)]
	fake.visibleWorkersArgsForCall = append(fake.visibleWorkersArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	fake.recordInvocation("VisibleWorkers", []interface{}{arg1Copy})
	fake.visibleWorkersMutex.Unlock()
	if fake.VisibleWorkersStub != nil {
		return fake.VisibleWorkersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.visibleWorkersReturns.result1, fake.visibleWorkersReturns.result2
}

func (fake *FakeWorkerRepository) VisibleWorkersCallCount() int {
	fake.visibleWorkersMutex.RLock()
	defer fake.visibleWorkersMutex.RUnlock()
	return len(fake.visibleWorkersArgsForCall)
}

func (fake *FakeWorkerRepository) VisibleWorkersArgsForCall(i int) []string {
	fake.visibleWorkersMutex.RLock()
	defer fake.visibleWorkersMutex.RUnlock()
	return fake.visibleWorkersArgsForCall[i].arg1
}

func (fake *FakeWorkerRepository) VisibleWorkersReturns(result1 []db.Worker, result2 error) {
	fake.VisibleWorkersStub = nil
	fake.visibleWorkersReturns = struct {
		result1 []db.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerRepository) VisibleWorkersReturnsOnCall(i int, result1 []db.Worker, result2 error) {
	fake.VisibleWorkersStub = nil
	if fake.visibleWorkersReturnsOnCall == nil {
		fake.visibleWorkersReturnsOnCall = make(map[int]struct {
			result1 []db.Worker
			result2 error
		})
	}
	fake.visibleWorkersReturnsOnCall[i] = struct {
		result1 []db.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getWorkerMutex.RLock()
	defer fake.getWorkerMutex.RUnlock()
	fake.saveWorkerMutex.RLock()
	defer fake.saveWorkerMutex.RUnlock()
	fake.heartbeatWorkerMutex.RLock()
	defer fake.heartbeatWorkerMutex.RUnlock()
	fake.workersMutex.RLock()
	defer fake.workersMutex.RUnlock()
	fake.visibleWorkersMutex.RLock()
	defer fake.visibleWorkersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWorkerRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.WorkerRepository = new(FakeWorkerRepository)
