// This file was generated by counterfeiter
package dbfakes

import (
	"sync"

	"github.com/concourse/atc/db"
)

type FakeLease struct {
	BreakStub        func()
	breakMutex       sync.RWMutex
	breakArgsForCall []struct{}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLease) Break() {
	fake.breakMutex.Lock()
	fake.breakArgsForCall = append(fake.breakArgsForCall, struct{}{})
	fake.recordInvocation("Break", []interface{}{})
	fake.breakMutex.Unlock()
	if fake.BreakStub != nil {
		fake.BreakStub()
	}
}

func (fake *FakeLease) BreakCallCount() int {
	fake.breakMutex.RLock()
	defer fake.breakMutex.RUnlock()
	return len(fake.breakArgsForCall)
}

func (fake *FakeLease) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.breakMutex.RLock()
	defer fake.breakMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeLease) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.Lease = new(FakeLease)
