// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc"
	"github.com/concourse/atc/creds"
	"github.com/concourse/atc/db"
)

type FakeResourceCacheFactory struct {
	FindOrCreateResourceCacheStub        func(logger lager.Logger, resourceCacheUser db.ResourceCacheUser, resourceTypeName string, version atc.Version, source atc.Source, params atc.Params, resourceTypes creds.VersionedResourceTypes) (*db.UsedResourceCache, error)
	findOrCreateResourceCacheMutex       sync.RWMutex
	findOrCreateResourceCacheArgsForCall []struct {
		logger            lager.Logger
		resourceCacheUser db.ResourceCacheUser
		resourceTypeName  string
		version           atc.Version
		source            atc.Source
		params            atc.Params
		resourceTypes     creds.VersionedResourceTypes
	}
	findOrCreateResourceCacheReturns struct {
		result1 *db.UsedResourceCache
		result2 error
	}
	findOrCreateResourceCacheReturnsOnCall map[int]struct {
		result1 *db.UsedResourceCache
		result2 error
	}
	CleanUsesForFinishedBuildsStub        func() error
	cleanUsesForFinishedBuildsMutex       sync.RWMutex
	cleanUsesForFinishedBuildsArgsForCall []struct{}
	cleanUsesForFinishedBuildsReturns     struct {
		result1 error
	}
	cleanUsesForFinishedBuildsReturnsOnCall map[int]struct {
		result1 error
	}
	CleanBuildImageResourceCachesStub        func() error
	cleanBuildImageResourceCachesMutex       sync.RWMutex
	cleanBuildImageResourceCachesArgsForCall []struct{}
	cleanBuildImageResourceCachesReturns     struct {
		result1 error
	}
	cleanBuildImageResourceCachesReturnsOnCall map[int]struct {
		result1 error
	}
	CleanUpInvalidCachesStub        func() error
	cleanUpInvalidCachesMutex       sync.RWMutex
	cleanUpInvalidCachesArgsForCall []struct{}
	cleanUpInvalidCachesReturns     struct {
		result1 error
	}
	cleanUpInvalidCachesReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateResourceCacheMetadataStub        func(*db.UsedResourceCache, []atc.MetadataField) error
	updateResourceCacheMetadataMutex       sync.RWMutex
	updateResourceCacheMetadataArgsForCall []struct {
		arg1 *db.UsedResourceCache
		arg2 []atc.MetadataField
	}
	updateResourceCacheMetadataReturns struct {
		result1 error
	}
	updateResourceCacheMetadataReturnsOnCall map[int]struct {
		result1 error
	}
	ResourceCacheMetadataStub        func(*db.UsedResourceCache) (db.ResourceMetadataFields, error)
	resourceCacheMetadataMutex       sync.RWMutex
	resourceCacheMetadataArgsForCall []struct {
		arg1 *db.UsedResourceCache
	}
	resourceCacheMetadataReturns struct {
		result1 db.ResourceMetadataFields
		result2 error
	}
	resourceCacheMetadataReturnsOnCall map[int]struct {
		result1 db.ResourceMetadataFields
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCache(logger lager.Logger, resourceCacheUser db.ResourceCacheUser, resourceTypeName string, version atc.Version, source atc.Source, params atc.Params, resourceTypes creds.VersionedResourceTypes) (*db.UsedResourceCache, error) {
	fake.findOrCreateResourceCacheMutex.Lock()
	ret, specificReturn := fake.findOrCreateResourceCacheReturnsOnCall[len(fake.findOrCreateResourceCacheArgsForCall)]
	fake.findOrCreateResourceCacheArgsForCall = append(fake.findOrCreateResourceCacheArgsForCall, struct {
		logger            lager.Logger
		resourceCacheUser db.ResourceCacheUser
		resourceTypeName  string
		version           atc.Version
		source            atc.Source
		params            atc.Params
		resourceTypes     creds.VersionedResourceTypes
	}{logger, resourceCacheUser, resourceTypeName, version, source, params, resourceTypes})
	fake.recordInvocation("FindOrCreateResourceCache", []interface{}{logger, resourceCacheUser, resourceTypeName, version, source, params, resourceTypes})
	fake.findOrCreateResourceCacheMutex.Unlock()
	if fake.FindOrCreateResourceCacheStub != nil {
		return fake.FindOrCreateResourceCacheStub(logger, resourceCacheUser, resourceTypeName, version, source, params, resourceTypes)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findOrCreateResourceCacheReturns.result1, fake.findOrCreateResourceCacheReturns.result2
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheCallCount() int {
	fake.findOrCreateResourceCacheMutex.RLock()
	defer fake.findOrCreateResourceCacheMutex.RUnlock()
	return len(fake.findOrCreateResourceCacheArgsForCall)
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheArgsForCall(i int) (lager.Logger, db.ResourceCacheUser, string, atc.Version, atc.Source, atc.Params, creds.VersionedResourceTypes) {
	fake.findOrCreateResourceCacheMutex.RLock()
	defer fake.findOrCreateResourceCacheMutex.RUnlock()
	return fake.findOrCreateResourceCacheArgsForCall[i].logger, fake.findOrCreateResourceCacheArgsForCall[i].resourceCacheUser, fake.findOrCreateResourceCacheArgsForCall[i].resourceTypeName, fake.findOrCreateResourceCacheArgsForCall[i].version, fake.findOrCreateResourceCacheArgsForCall[i].source, fake.findOrCreateResourceCacheArgsForCall[i].params, fake.findOrCreateResourceCacheArgsForCall[i].resourceTypes
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheReturns(result1 *db.UsedResourceCache, result2 error) {
	fake.FindOrCreateResourceCacheStub = nil
	fake.findOrCreateResourceCacheReturns = struct {
		result1 *db.UsedResourceCache
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheReturnsOnCall(i int, result1 *db.UsedResourceCache, result2 error) {
	fake.FindOrCreateResourceCacheStub = nil
	if fake.findOrCreateResourceCacheReturnsOnCall == nil {
		fake.findOrCreateResourceCacheReturnsOnCall = make(map[int]struct {
			result1 *db.UsedResourceCache
			result2 error
		})
	}
	fake.findOrCreateResourceCacheReturnsOnCall[i] = struct {
		result1 *db.UsedResourceCache
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceCacheFactory) CleanUsesForFinishedBuilds() error {
	fake.cleanUsesForFinishedBuildsMutex.Lock()
	ret, specificReturn := fake.cleanUsesForFinishedBuildsReturnsOnCall[len(fake.cleanUsesForFinishedBuildsArgsForCall)]
	fake.cleanUsesForFinishedBuildsArgsForCall = append(fake.cleanUsesForFinishedBuildsArgsForCall, struct{}{})
	fake.recordInvocation("CleanUsesForFinishedBuilds", []interface{}{})
	fake.cleanUsesForFinishedBuildsMutex.Unlock()
	if fake.CleanUsesForFinishedBuildsStub != nil {
		return fake.CleanUsesForFinishedBuildsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cleanUsesForFinishedBuildsReturns.result1
}

func (fake *FakeResourceCacheFactory) CleanUsesForFinishedBuildsCallCount() int {
	fake.cleanUsesForFinishedBuildsMutex.RLock()
	defer fake.cleanUsesForFinishedBuildsMutex.RUnlock()
	return len(fake.cleanUsesForFinishedBuildsArgsForCall)
}

func (fake *FakeResourceCacheFactory) CleanUsesForFinishedBuildsReturns(result1 error) {
	fake.CleanUsesForFinishedBuildsStub = nil
	fake.cleanUsesForFinishedBuildsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceCacheFactory) CleanUsesForFinishedBuildsReturnsOnCall(i int, result1 error) {
	fake.CleanUsesForFinishedBuildsStub = nil
	if fake.cleanUsesForFinishedBuildsReturnsOnCall == nil {
		fake.cleanUsesForFinishedBuildsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cleanUsesForFinishedBuildsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceCacheFactory) CleanBuildImageResourceCaches() error {
	fake.cleanBuildImageResourceCachesMutex.Lock()
	ret, specificReturn := fake.cleanBuildImageResourceCachesReturnsOnCall[len(fake.cleanBuildImageResourceCachesArgsForCall)]
	fake.cleanBuildImageResourceCachesArgsForCall = append(fake.cleanBuildImageResourceCachesArgsForCall, struct{}{})
	fake.recordInvocation("CleanBuildImageResourceCaches", []interface{}{})
	fake.cleanBuildImageResourceCachesMutex.Unlock()
	if fake.CleanBuildImageResourceCachesStub != nil {
		return fake.CleanBuildImageResourceCachesStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cleanBuildImageResourceCachesReturns.result1
}

func (fake *FakeResourceCacheFactory) CleanBuildImageResourceCachesCallCount() int {
	fake.cleanBuildImageResourceCachesMutex.RLock()
	defer fake.cleanBuildImageResourceCachesMutex.RUnlock()
	return len(fake.cleanBuildImageResourceCachesArgsForCall)
}

func (fake *FakeResourceCacheFactory) CleanBuildImageResourceCachesReturns(result1 error) {
	fake.CleanBuildImageResourceCachesStub = nil
	fake.cleanBuildImageResourceCachesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceCacheFactory) CleanBuildImageResourceCachesReturnsOnCall(i int, result1 error) {
	fake.CleanBuildImageResourceCachesStub = nil
	if fake.cleanBuildImageResourceCachesReturnsOnCall == nil {
		fake.cleanBuildImageResourceCachesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cleanBuildImageResourceCachesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceCacheFactory) CleanUpInvalidCaches() error {
	fake.cleanUpInvalidCachesMutex.Lock()
	ret, specificReturn := fake.cleanUpInvalidCachesReturnsOnCall[len(fake.cleanUpInvalidCachesArgsForCall)]
	fake.cleanUpInvalidCachesArgsForCall = append(fake.cleanUpInvalidCachesArgsForCall, struct{}{})
	fake.recordInvocation("CleanUpInvalidCaches", []interface{}{})
	fake.cleanUpInvalidCachesMutex.Unlock()
	if fake.CleanUpInvalidCachesStub != nil {
		return fake.CleanUpInvalidCachesStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cleanUpInvalidCachesReturns.result1
}

func (fake *FakeResourceCacheFactory) CleanUpInvalidCachesCallCount() int {
	fake.cleanUpInvalidCachesMutex.RLock()
	defer fake.cleanUpInvalidCachesMutex.RUnlock()
	return len(fake.cleanUpInvalidCachesArgsForCall)
}

func (fake *FakeResourceCacheFactory) CleanUpInvalidCachesReturns(result1 error) {
	fake.CleanUpInvalidCachesStub = nil
	fake.cleanUpInvalidCachesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceCacheFactory) CleanUpInvalidCachesReturnsOnCall(i int, result1 error) {
	fake.CleanUpInvalidCachesStub = nil
	if fake.cleanUpInvalidCachesReturnsOnCall == nil {
		fake.cleanUpInvalidCachesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cleanUpInvalidCachesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceCacheFactory) UpdateResourceCacheMetadata(arg1 *db.UsedResourceCache, arg2 []atc.MetadataField) error {
	var arg2Copy []atc.MetadataField
	if arg2 != nil {
		arg2Copy = make([]atc.MetadataField, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.updateResourceCacheMetadataMutex.Lock()
	ret, specificReturn := fake.updateResourceCacheMetadataReturnsOnCall[len(fake.updateResourceCacheMetadataArgsForCall)]
	fake.updateResourceCacheMetadataArgsForCall = append(fake.updateResourceCacheMetadataArgsForCall, struct {
		arg1 *db.UsedResourceCache
		arg2 []atc.MetadataField
	}{arg1, arg2Copy})
	fake.recordInvocation("UpdateResourceCacheMetadata", []interface{}{arg1, arg2Copy})
	fake.updateResourceCacheMetadataMutex.Unlock()
	if fake.UpdateResourceCacheMetadataStub != nil {
		return fake.UpdateResourceCacheMetadataStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.updateResourceCacheMetadataReturns.result1
}

func (fake *FakeResourceCacheFactory) UpdateResourceCacheMetadataCallCount() int {
	fake.updateResourceCacheMetadataMutex.RLock()
	defer fake.updateResourceCacheMetadataMutex.RUnlock()
	return len(fake.updateResourceCacheMetadataArgsForCall)
}

func (fake *FakeResourceCacheFactory) UpdateResourceCacheMetadataArgsForCall(i int) (*db.UsedResourceCache, []atc.MetadataField) {
	fake.updateResourceCacheMetadataMutex.RLock()
	defer fake.updateResourceCacheMetadataMutex.RUnlock()
	return fake.updateResourceCacheMetadataArgsForCall[i].arg1, fake.updateResourceCacheMetadataArgsForCall[i].arg2
}

func (fake *FakeResourceCacheFactory) UpdateResourceCacheMetadataReturns(result1 error) {
	fake.UpdateResourceCacheMetadataStub = nil
	fake.updateResourceCacheMetadataReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceCacheFactory) UpdateResourceCacheMetadataReturnsOnCall(i int, result1 error) {
	fake.UpdateResourceCacheMetadataStub = nil
	if fake.updateResourceCacheMetadataReturnsOnCall == nil {
		fake.updateResourceCacheMetadataReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateResourceCacheMetadataReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceCacheFactory) ResourceCacheMetadata(arg1 *db.UsedResourceCache) (db.ResourceMetadataFields, error) {
	fake.resourceCacheMetadataMutex.Lock()
	ret, specificReturn := fake.resourceCacheMetadataReturnsOnCall[len(fake.resourceCacheMetadataArgsForCall)]
	fake.resourceCacheMetadataArgsForCall = append(fake.resourceCacheMetadataArgsForCall, struct {
		arg1 *db.UsedResourceCache
	}{arg1})
	fake.recordInvocation("ResourceCacheMetadata", []interface{}{arg1})
	fake.resourceCacheMetadataMutex.Unlock()
	if fake.ResourceCacheMetadataStub != nil {
		return fake.ResourceCacheMetadataStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.resourceCacheMetadataReturns.result1, fake.resourceCacheMetadataReturns.result2
}

func (fake *FakeResourceCacheFactory) ResourceCacheMetadataCallCount() int {
	fake.resourceCacheMetadataMutex.RLock()
	defer fake.resourceCacheMetadataMutex.RUnlock()
	return len(fake.resourceCacheMetadataArgsForCall)
}

func (fake *FakeResourceCacheFactory) ResourceCacheMetadataArgsForCall(i int) *db.UsedResourceCache {
	fake.resourceCacheMetadataMutex.RLock()
	defer fake.resourceCacheMetadataMutex.RUnlock()
	return fake.resourceCacheMetadataArgsForCall[i].arg1
}

func (fake *FakeResourceCacheFactory) ResourceCacheMetadataReturns(result1 db.ResourceMetadataFields, result2 error) {
	fake.ResourceCacheMetadataStub = nil
	fake.resourceCacheMetadataReturns = struct {
		result1 db.ResourceMetadataFields
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceCacheFactory) ResourceCacheMetadataReturnsOnCall(i int, result1 db.ResourceMetadataFields, result2 error) {
	fake.ResourceCacheMetadataStub = nil
	if fake.resourceCacheMetadataReturnsOnCall == nil {
		fake.resourceCacheMetadataReturnsOnCall = make(map[int]struct {
			result1 db.ResourceMetadataFields
			result2 error
		})
	}
	fake.resourceCacheMetadataReturnsOnCall[i] = struct {
		result1 db.ResourceMetadataFields
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceCacheFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findOrCreateResourceCacheMutex.RLock()
	defer fake.findOrCreateResourceCacheMutex.RUnlock()
	fake.cleanUsesForFinishedBuildsMutex.RLock()
	defer fake.cleanUsesForFinishedBuildsMutex.RUnlock()
	fake.cleanBuildImageResourceCachesMutex.RLock()
	defer fake.cleanBuildImageResourceCachesMutex.RUnlock()
	fake.cleanUpInvalidCachesMutex.RLock()
	defer fake.cleanUpInvalidCachesMutex.RUnlock()
	fake.updateResourceCacheMetadataMutex.RLock()
	defer fake.updateResourceCacheMetadataMutex.RUnlock()
	fake.resourceCacheMetadataMutex.RLock()
	defer fake.resourceCacheMetadataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResourceCacheFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.ResourceCacheFactory = new(FakeResourceCacheFactory)
