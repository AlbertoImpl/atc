// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"github.com/concourse/atc/db"
)

type FakeContainerOwner struct {
	SQLMapStub        func() map[string]interface{}
	sQLMapMutex       sync.RWMutex
	sQLMapArgsForCall []struct{}
	sQLMapReturns     struct {
		result1 map[string]interface{}
	}
	sQLMapReturnsOnCall map[int]struct {
		result1 map[string]interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContainerOwner) SQLMap() map[string]interface{} {
	fake.sQLMapMutex.Lock()
	ret, specificReturn := fake.sQLMapReturnsOnCall[len(fake.sQLMapArgsForCall)]
	fake.sQLMapArgsForCall = append(fake.sQLMapArgsForCall, struct{}{})
	fake.recordInvocation("SQLMap", []interface{}{})
	fake.sQLMapMutex.Unlock()
	if fake.SQLMapStub != nil {
		return fake.SQLMapStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.sQLMapReturns.result1
}

func (fake *FakeContainerOwner) SQLMapCallCount() int {
	fake.sQLMapMutex.RLock()
	defer fake.sQLMapMutex.RUnlock()
	return len(fake.sQLMapArgsForCall)
}

func (fake *FakeContainerOwner) SQLMapReturns(result1 map[string]interface{}) {
	fake.SQLMapStub = nil
	fake.sQLMapReturns = struct {
		result1 map[string]interface{}
	}{result1}
}

func (fake *FakeContainerOwner) SQLMapReturnsOnCall(i int, result1 map[string]interface{}) {
	fake.SQLMapStub = nil
	if fake.sQLMapReturnsOnCall == nil {
		fake.sQLMapReturnsOnCall = make(map[int]struct {
			result1 map[string]interface{}
		})
	}
	fake.sQLMapReturnsOnCall[i] = struct {
		result1 map[string]interface{}
	}{result1}
}

func (fake *FakeContainerOwner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sQLMapMutex.RLock()
	defer fake.sQLMapMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeContainerOwner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.ContainerOwner = new(FakeContainerOwner)
