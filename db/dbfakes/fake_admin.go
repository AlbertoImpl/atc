// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"github.com/concourse/atc"
	"github.com/concourse/atc/db"
)

type FakeAdmin struct {
	CreateTeamStub        func(atc.Team) (db.Team, error)
	createTeamMutex       sync.RWMutex
	createTeamArgsForCall []struct {
		arg1 atc.Team
	}
	createTeamReturns struct {
		result1 db.Team
		result2 error
	}
	createTeamReturnsOnCall map[int]struct {
		result1 db.Team
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAdmin) CreateTeam(arg1 atc.Team) (db.Team, error) {
	fake.createTeamMutex.Lock()
	ret, specificReturn := fake.createTeamReturnsOnCall[len(fake.createTeamArgsForCall)]
	fake.createTeamArgsForCall = append(fake.createTeamArgsForCall, struct {
		arg1 atc.Team
	}{arg1})
	fake.recordInvocation("CreateTeam", []interface{}{arg1})
	fake.createTeamMutex.Unlock()
	if fake.CreateTeamStub != nil {
		return fake.CreateTeamStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createTeamReturns.result1, fake.createTeamReturns.result2
}

func (fake *FakeAdmin) CreateTeamCallCount() int {
	fake.createTeamMutex.RLock()
	defer fake.createTeamMutex.RUnlock()
	return len(fake.createTeamArgsForCall)
}

func (fake *FakeAdmin) CreateTeamArgsForCall(i int) atc.Team {
	fake.createTeamMutex.RLock()
	defer fake.createTeamMutex.RUnlock()
	return fake.createTeamArgsForCall[i].arg1
}

func (fake *FakeAdmin) CreateTeamReturns(result1 db.Team, result2 error) {
	fake.CreateTeamStub = nil
	fake.createTeamReturns = struct {
		result1 db.Team
		result2 error
	}{result1, result2}
}

func (fake *FakeAdmin) CreateTeamReturnsOnCall(i int, result1 db.Team, result2 error) {
	fake.CreateTeamStub = nil
	if fake.createTeamReturnsOnCall == nil {
		fake.createTeamReturnsOnCall = make(map[int]struct {
			result1 db.Team
			result2 error
		})
	}
	fake.createTeamReturnsOnCall[i] = struct {
		result1 db.Team
		result2 error
	}{result1, result2}
}

func (fake *FakeAdmin) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createTeamMutex.RLock()
	defer fake.createTeamMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAdmin) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.Admin = new(FakeAdmin)
