// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/db"
)

type FakePipelinesDB struct {
	GetAllActivePipelinesStub        func() ([]db.SavedPipeline, error)
	getAllActivePipelinesMutex       sync.RWMutex
	getAllActivePipelinesArgsForCall []struct{}
	getAllActivePipelinesReturns     struct {
		result1 []db.SavedPipeline
		result2 error
	}
	GetPipelineByTeamNameAndNameStub        func(teamName string, pipelineName string) (db.SavedPipeline, error)
	getPipelineByTeamNameAndNameMutex       sync.RWMutex
	getPipelineByTeamNameAndNameArgsForCall []struct {
		teamName     string
		pipelineName string
	}
	getPipelineByTeamNameAndNameReturns struct {
		result1 db.SavedPipeline
		result2 error
	}
	OrderPipelinesStub        func([]string) error
	orderPipelinesMutex       sync.RWMutex
	orderPipelinesArgsForCall []struct {
		arg1 []string
	}
	orderPipelinesReturns struct {
		result1 error
	}
}

func (fake *FakePipelinesDB) GetAllActivePipelines() ([]db.SavedPipeline, error) {
	fake.getAllActivePipelinesMutex.Lock()
	fake.getAllActivePipelinesArgsForCall = append(fake.getAllActivePipelinesArgsForCall, struct{}{})
	fake.getAllActivePipelinesMutex.Unlock()
	if fake.GetAllActivePipelinesStub != nil {
		return fake.GetAllActivePipelinesStub()
	} else {
		return fake.getAllActivePipelinesReturns.result1, fake.getAllActivePipelinesReturns.result2
	}
}

func (fake *FakePipelinesDB) GetAllActivePipelinesCallCount() int {
	fake.getAllActivePipelinesMutex.RLock()
	defer fake.getAllActivePipelinesMutex.RUnlock()
	return len(fake.getAllActivePipelinesArgsForCall)
}

func (fake *FakePipelinesDB) GetAllActivePipelinesReturns(result1 []db.SavedPipeline, result2 error) {
	fake.GetAllActivePipelinesStub = nil
	fake.getAllActivePipelinesReturns = struct {
		result1 []db.SavedPipeline
		result2 error
	}{result1, result2}
}

func (fake *FakePipelinesDB) GetPipelineByTeamNameAndName(teamName string, pipelineName string) (db.SavedPipeline, error) {
	fake.getPipelineByTeamNameAndNameMutex.Lock()
	fake.getPipelineByTeamNameAndNameArgsForCall = append(fake.getPipelineByTeamNameAndNameArgsForCall, struct {
		teamName     string
		pipelineName string
	}{teamName, pipelineName})
	fake.getPipelineByTeamNameAndNameMutex.Unlock()
	if fake.GetPipelineByTeamNameAndNameStub != nil {
		return fake.GetPipelineByTeamNameAndNameStub(teamName, pipelineName)
	} else {
		return fake.getPipelineByTeamNameAndNameReturns.result1, fake.getPipelineByTeamNameAndNameReturns.result2
	}
}

func (fake *FakePipelinesDB) GetPipelineByTeamNameAndNameCallCount() int {
	fake.getPipelineByTeamNameAndNameMutex.RLock()
	defer fake.getPipelineByTeamNameAndNameMutex.RUnlock()
	return len(fake.getPipelineByTeamNameAndNameArgsForCall)
}

func (fake *FakePipelinesDB) GetPipelineByTeamNameAndNameArgsForCall(i int) (string, string) {
	fake.getPipelineByTeamNameAndNameMutex.RLock()
	defer fake.getPipelineByTeamNameAndNameMutex.RUnlock()
	return fake.getPipelineByTeamNameAndNameArgsForCall[i].teamName, fake.getPipelineByTeamNameAndNameArgsForCall[i].pipelineName
}

func (fake *FakePipelinesDB) GetPipelineByTeamNameAndNameReturns(result1 db.SavedPipeline, result2 error) {
	fake.GetPipelineByTeamNameAndNameStub = nil
	fake.getPipelineByTeamNameAndNameReturns = struct {
		result1 db.SavedPipeline
		result2 error
	}{result1, result2}
}

func (fake *FakePipelinesDB) OrderPipelines(arg1 []string) error {
	fake.orderPipelinesMutex.Lock()
	fake.orderPipelinesArgsForCall = append(fake.orderPipelinesArgsForCall, struct {
		arg1 []string
	}{arg1})
	fake.orderPipelinesMutex.Unlock()
	if fake.OrderPipelinesStub != nil {
		return fake.OrderPipelinesStub(arg1)
	} else {
		return fake.orderPipelinesReturns.result1
	}
}

func (fake *FakePipelinesDB) OrderPipelinesCallCount() int {
	fake.orderPipelinesMutex.RLock()
	defer fake.orderPipelinesMutex.RUnlock()
	return len(fake.orderPipelinesArgsForCall)
}

func (fake *FakePipelinesDB) OrderPipelinesArgsForCall(i int) []string {
	fake.orderPipelinesMutex.RLock()
	defer fake.orderPipelinesMutex.RUnlock()
	return fake.orderPipelinesArgsForCall[i].arg1
}

func (fake *FakePipelinesDB) OrderPipelinesReturns(result1 error) {
	fake.OrderPipelinesStub = nil
	fake.orderPipelinesReturns = struct {
		result1 error
	}{result1}
}

var _ db.PipelinesDB = new(FakePipelinesDB)
