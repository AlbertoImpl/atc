// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/db"
)

type FakeBuildDB struct {
	GetStub        func() (db.Build, bool, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct{}
	getReturns     struct {
		result1 db.Build
		result2 bool
		result3 error
	}
	GetIDStub        func() int
	getIDMutex       sync.RWMutex
	getIDArgsForCall []struct{}
	getIDReturns     struct {
		result1 int
	}
	EventsStub        func(from uint) (db.EventSource, error)
	eventsMutex       sync.RWMutex
	eventsArgsForCall []struct {
		from uint
	}
	eventsReturns struct {
		result1 db.EventSource
		result2 error
	}
	AbortNotifierStub        func() (db.Notifier, error)
	abortNotifierMutex       sync.RWMutex
	abortNotifierArgsForCall []struct{}
	abortNotifierReturns     struct {
		result1 db.Notifier
		result2 error
	}
}

func (fake *FakeBuildDB) Get() (db.Build, bool, error) {
	fake.getMutex.Lock()
	fake.getArgsForCall = append(fake.getArgsForCall, struct{}{})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub()
	} else {
		return fake.getReturns.result1, fake.getReturns.result2, fake.getReturns.result3
	}
}

func (fake *FakeBuildDB) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeBuildDB) GetReturns(result1 db.Build, result2 bool, result3 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 db.Build
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBuildDB) GetID() int {
	fake.getIDMutex.Lock()
	fake.getIDArgsForCall = append(fake.getIDArgsForCall, struct{}{})
	fake.getIDMutex.Unlock()
	if fake.GetIDStub != nil {
		return fake.GetIDStub()
	} else {
		return fake.getIDReturns.result1
	}
}

func (fake *FakeBuildDB) GetIDCallCount() int {
	fake.getIDMutex.RLock()
	defer fake.getIDMutex.RUnlock()
	return len(fake.getIDArgsForCall)
}

func (fake *FakeBuildDB) GetIDReturns(result1 int) {
	fake.GetIDStub = nil
	fake.getIDReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeBuildDB) Events(from uint) (db.EventSource, error) {
	fake.eventsMutex.Lock()
	fake.eventsArgsForCall = append(fake.eventsArgsForCall, struct {
		from uint
	}{from})
	fake.eventsMutex.Unlock()
	if fake.EventsStub != nil {
		return fake.EventsStub(from)
	} else {
		return fake.eventsReturns.result1, fake.eventsReturns.result2
	}
}

func (fake *FakeBuildDB) EventsCallCount() int {
	fake.eventsMutex.RLock()
	defer fake.eventsMutex.RUnlock()
	return len(fake.eventsArgsForCall)
}

func (fake *FakeBuildDB) EventsArgsForCall(i int) uint {
	fake.eventsMutex.RLock()
	defer fake.eventsMutex.RUnlock()
	return fake.eventsArgsForCall[i].from
}

func (fake *FakeBuildDB) EventsReturns(result1 db.EventSource, result2 error) {
	fake.EventsStub = nil
	fake.eventsReturns = struct {
		result1 db.EventSource
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildDB) AbortNotifier() (db.Notifier, error) {
	fake.abortNotifierMutex.Lock()
	fake.abortNotifierArgsForCall = append(fake.abortNotifierArgsForCall, struct{}{})
	fake.abortNotifierMutex.Unlock()
	if fake.AbortNotifierStub != nil {
		return fake.AbortNotifierStub()
	} else {
		return fake.abortNotifierReturns.result1, fake.abortNotifierReturns.result2
	}
}

func (fake *FakeBuildDB) AbortNotifierCallCount() int {
	fake.abortNotifierMutex.RLock()
	defer fake.abortNotifierMutex.RUnlock()
	return len(fake.abortNotifierArgsForCall)
}

func (fake *FakeBuildDB) AbortNotifierReturns(result1 db.Notifier, result2 error) {
	fake.AbortNotifierStub = nil
	fake.abortNotifierReturns = struct {
		result1 db.Notifier
		result2 error
	}{result1, result2}
}

var _ db.BuildDB = new(FakeBuildDB)
