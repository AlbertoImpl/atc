// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"time"

	"github.com/concourse/atc"
	"github.com/concourse/atc/db"
	"github.com/pivotal-golang/lager"
)

type FakeBuildDB struct {
	GetModelStub        func() db.Build
	getModelMutex       sync.RWMutex
	getModelArgsForCall []struct{}
	getModelReturns     struct {
		result1 db.Build
	}
	ReloadStub        func() (db.Build, bool, error)
	reloadMutex       sync.RWMutex
	reloadArgsForCall []struct{}
	reloadReturns     struct {
		result1 db.Build
		result2 bool
		result3 error
	}
	GetIDStub        func() int
	getIDMutex       sync.RWMutex
	getIDArgsForCall []struct{}
	getIDReturns     struct {
		result1 int
	}
	GetNameStub        func() string
	getNameMutex       sync.RWMutex
	getNameArgsForCall []struct{}
	getNameReturns     struct {
		result1 string
	}
	GetJobNameStub        func() string
	getJobNameMutex       sync.RWMutex
	getJobNameArgsForCall []struct{}
	getJobNameReturns     struct {
		result1 string
	}
	GetJobIDStub        func() int
	getJobIDMutex       sync.RWMutex
	getJobIDArgsForCall []struct{}
	getJobIDReturns     struct {
		result1 int
	}
	GetPipelineNameStub        func() string
	getPipelineNameMutex       sync.RWMutex
	getPipelineNameArgsForCall []struct{}
	getPipelineNameReturns     struct {
		result1 string
	}
	GetTeamNameStub        func() string
	getTeamNameMutex       sync.RWMutex
	getTeamNameArgsForCall []struct{}
	getTeamNameReturns     struct {
		result1 string
	}
	GetEngineMetadataStub        func() string
	getEngineMetadataMutex       sync.RWMutex
	getEngineMetadataArgsForCall []struct{}
	getEngineMetadataReturns     struct {
		result1 string
	}
	GetStatusStub        func() db.Status
	getStatusMutex       sync.RWMutex
	getStatusArgsForCall []struct{}
	getStatusReturns     struct {
		result1 db.Status
	}
	IsOneOffStub        func() bool
	isOneOffMutex       sync.RWMutex
	isOneOffArgsForCall []struct{}
	isOneOffReturns     struct {
		result1 bool
	}
	EventsStub        func(from uint) (db.EventSource, error)
	eventsMutex       sync.RWMutex
	eventsArgsForCall []struct {
		from uint
	}
	eventsReturns struct {
		result1 db.EventSource
		result2 error
	}
	SaveEventStub        func(event atc.Event) error
	saveEventMutex       sync.RWMutex
	saveEventArgsForCall []struct {
		event atc.Event
	}
	saveEventReturns struct {
		result1 error
	}
	GetVersionedResourcesStub        func() (db.SavedVersionedResources, error)
	getVersionedResourcesMutex       sync.RWMutex
	getVersionedResourcesArgsForCall []struct{}
	getVersionedResourcesReturns     struct {
		result1 db.SavedVersionedResources
		result2 error
	}
	GetResourcesStub        func() ([]db.BuildInput, []db.BuildOutput, error)
	getResourcesMutex       sync.RWMutex
	getResourcesArgsForCall []struct{}
	getResourcesReturns     struct {
		result1 []db.BuildInput
		result2 []db.BuildOutput
		result3 error
	}
	StartStub        func(string, string) (bool, error)
	startMutex       sync.RWMutex
	startArgsForCall []struct {
		arg1 string
		arg2 string
	}
	startReturns struct {
		result1 bool
		result2 error
	}
	FinishStub        func(status db.Status) error
	finishMutex       sync.RWMutex
	finishArgsForCall []struct {
		status db.Status
	}
	finishReturns struct {
		result1 error
	}
	MarkAsFailedStub        func(cause error) error
	markAsFailedMutex       sync.RWMutex
	markAsFailedArgsForCall []struct {
		cause error
	}
	markAsFailedReturns struct {
		result1 error
	}
	AbortStub        func() error
	abortMutex       sync.RWMutex
	abortArgsForCall []struct{}
	abortReturns     struct {
		result1 error
	}
	AbortNotifierStub        func() (db.Notifier, error)
	abortNotifierMutex       sync.RWMutex
	abortNotifierArgsForCall []struct{}
	abortNotifierReturns     struct {
		result1 db.Notifier
		result2 error
	}
	LeaseSchedulingStub        func(logger lager.Logger, interval time.Duration) (db.Lease, bool, error)
	leaseSchedulingMutex       sync.RWMutex
	leaseSchedulingArgsForCall []struct {
		logger   lager.Logger
		interval time.Duration
	}
	leaseSchedulingReturns struct {
		result1 db.Lease
		result2 bool
		result3 error
	}
	LeaseTrackingStub        func(logger lager.Logger, interval time.Duration) (db.Lease, bool, error)
	leaseTrackingMutex       sync.RWMutex
	leaseTrackingArgsForCall []struct {
		logger   lager.Logger
		interval time.Duration
	}
	leaseTrackingReturns struct {
		result1 db.Lease
		result2 bool
		result3 error
	}
	GetPreparationStub        func() (db.BuildPreparation, bool, error)
	getPreparationMutex       sync.RWMutex
	getPreparationArgsForCall []struct{}
	getPreparationReturns     struct {
		result1 db.BuildPreparation
		result2 bool
		result3 error
	}
	SaveEngineMetadataStub        func(engineMetadata string) error
	saveEngineMetadataMutex       sync.RWMutex
	saveEngineMetadataArgsForCall []struct {
		engineMetadata string
	}
	saveEngineMetadataReturns struct {
		result1 error
	}
	SaveInputStub        func(input db.BuildInput) (db.SavedVersionedResource, error)
	saveInputMutex       sync.RWMutex
	saveInputArgsForCall []struct {
		input db.BuildInput
	}
	saveInputReturns struct {
		result1 db.SavedVersionedResource
		result2 error
	}
	SaveOutputStub        func(vr db.VersionedResource, explicit bool) (db.SavedVersionedResource, error)
	saveOutputMutex       sync.RWMutex
	saveOutputArgsForCall []struct {
		vr       db.VersionedResource
		explicit bool
	}
	saveOutputReturns struct {
		result1 db.SavedVersionedResource
		result2 error
	}
	SaveImageResourceVersionStub        func(planID atc.PlanID, identifier db.ResourceCacheIdentifier) error
	saveImageResourceVersionMutex       sync.RWMutex
	saveImageResourceVersionArgsForCall []struct {
		planID     atc.PlanID
		identifier db.ResourceCacheIdentifier
	}
	saveImageResourceVersionReturns struct {
		result1 error
	}
	GetImageResourceCacheIdentifiersStub        func() ([]db.ResourceCacheIdentifier, error)
	getImageResourceCacheIdentifiersMutex       sync.RWMutex
	getImageResourceCacheIdentifiersArgsForCall []struct{}
	getImageResourceCacheIdentifiersReturns     struct {
		result1 []db.ResourceCacheIdentifier
		result2 error
	}
	GetConfigStub        func() (atc.Config, db.ConfigVersion, error)
	getConfigMutex       sync.RWMutex
	getConfigArgsForCall []struct{}
	getConfigReturns     struct {
		result1 atc.Config
		result2 db.ConfigVersion
		result3 error
	}
}

func (fake *FakeBuildDB) GetModel() db.Build {
	fake.getModelMutex.Lock()
	fake.getModelArgsForCall = append(fake.getModelArgsForCall, struct{}{})
	fake.getModelMutex.Unlock()
	if fake.GetModelStub != nil {
		return fake.GetModelStub()
	} else {
		return fake.getModelReturns.result1
	}
}

func (fake *FakeBuildDB) GetModelCallCount() int {
	fake.getModelMutex.RLock()
	defer fake.getModelMutex.RUnlock()
	return len(fake.getModelArgsForCall)
}

func (fake *FakeBuildDB) GetModelReturns(result1 db.Build) {
	fake.GetModelStub = nil
	fake.getModelReturns = struct {
		result1 db.Build
	}{result1}
}

func (fake *FakeBuildDB) Reload() (db.Build, bool, error) {
	fake.reloadMutex.Lock()
	fake.reloadArgsForCall = append(fake.reloadArgsForCall, struct{}{})
	fake.reloadMutex.Unlock()
	if fake.ReloadStub != nil {
		return fake.ReloadStub()
	} else {
		return fake.reloadReturns.result1, fake.reloadReturns.result2, fake.reloadReturns.result3
	}
}

func (fake *FakeBuildDB) ReloadCallCount() int {
	fake.reloadMutex.RLock()
	defer fake.reloadMutex.RUnlock()
	return len(fake.reloadArgsForCall)
}

func (fake *FakeBuildDB) ReloadReturns(result1 db.Build, result2 bool, result3 error) {
	fake.ReloadStub = nil
	fake.reloadReturns = struct {
		result1 db.Build
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBuildDB) GetID() int {
	fake.getIDMutex.Lock()
	fake.getIDArgsForCall = append(fake.getIDArgsForCall, struct{}{})
	fake.getIDMutex.Unlock()
	if fake.GetIDStub != nil {
		return fake.GetIDStub()
	} else {
		return fake.getIDReturns.result1
	}
}

func (fake *FakeBuildDB) GetIDCallCount() int {
	fake.getIDMutex.RLock()
	defer fake.getIDMutex.RUnlock()
	return len(fake.getIDArgsForCall)
}

func (fake *FakeBuildDB) GetIDReturns(result1 int) {
	fake.GetIDStub = nil
	fake.getIDReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeBuildDB) GetName() string {
	fake.getNameMutex.Lock()
	fake.getNameArgsForCall = append(fake.getNameArgsForCall, struct{}{})
	fake.getNameMutex.Unlock()
	if fake.GetNameStub != nil {
		return fake.GetNameStub()
	} else {
		return fake.getNameReturns.result1
	}
}

func (fake *FakeBuildDB) GetNameCallCount() int {
	fake.getNameMutex.RLock()
	defer fake.getNameMutex.RUnlock()
	return len(fake.getNameArgsForCall)
}

func (fake *FakeBuildDB) GetNameReturns(result1 string) {
	fake.GetNameStub = nil
	fake.getNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBuildDB) GetJobName() string {
	fake.getJobNameMutex.Lock()
	fake.getJobNameArgsForCall = append(fake.getJobNameArgsForCall, struct{}{})
	fake.getJobNameMutex.Unlock()
	if fake.GetJobNameStub != nil {
		return fake.GetJobNameStub()
	} else {
		return fake.getJobNameReturns.result1
	}
}

func (fake *FakeBuildDB) GetJobNameCallCount() int {
	fake.getJobNameMutex.RLock()
	defer fake.getJobNameMutex.RUnlock()
	return len(fake.getJobNameArgsForCall)
}

func (fake *FakeBuildDB) GetJobNameReturns(result1 string) {
	fake.GetJobNameStub = nil
	fake.getJobNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBuildDB) GetJobID() int {
	fake.getJobIDMutex.Lock()
	fake.getJobIDArgsForCall = append(fake.getJobIDArgsForCall, struct{}{})
	fake.getJobIDMutex.Unlock()
	if fake.GetJobIDStub != nil {
		return fake.GetJobIDStub()
	} else {
		return fake.getJobIDReturns.result1
	}
}

func (fake *FakeBuildDB) GetJobIDCallCount() int {
	fake.getJobIDMutex.RLock()
	defer fake.getJobIDMutex.RUnlock()
	return len(fake.getJobIDArgsForCall)
}

func (fake *FakeBuildDB) GetJobIDReturns(result1 int) {
	fake.GetJobIDStub = nil
	fake.getJobIDReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeBuildDB) GetPipelineName() string {
	fake.getPipelineNameMutex.Lock()
	fake.getPipelineNameArgsForCall = append(fake.getPipelineNameArgsForCall, struct{}{})
	fake.getPipelineNameMutex.Unlock()
	if fake.GetPipelineNameStub != nil {
		return fake.GetPipelineNameStub()
	} else {
		return fake.getPipelineNameReturns.result1
	}
}

func (fake *FakeBuildDB) GetPipelineNameCallCount() int {
	fake.getPipelineNameMutex.RLock()
	defer fake.getPipelineNameMutex.RUnlock()
	return len(fake.getPipelineNameArgsForCall)
}

func (fake *FakeBuildDB) GetPipelineNameReturns(result1 string) {
	fake.GetPipelineNameStub = nil
	fake.getPipelineNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBuildDB) GetTeamName() string {
	fake.getTeamNameMutex.Lock()
	fake.getTeamNameArgsForCall = append(fake.getTeamNameArgsForCall, struct{}{})
	fake.getTeamNameMutex.Unlock()
	if fake.GetTeamNameStub != nil {
		return fake.GetTeamNameStub()
	} else {
		return fake.getTeamNameReturns.result1
	}
}

func (fake *FakeBuildDB) GetTeamNameCallCount() int {
	fake.getTeamNameMutex.RLock()
	defer fake.getTeamNameMutex.RUnlock()
	return len(fake.getTeamNameArgsForCall)
}

func (fake *FakeBuildDB) GetTeamNameReturns(result1 string) {
	fake.GetTeamNameStub = nil
	fake.getTeamNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBuildDB) GetEngineMetadata() string {
	fake.getEngineMetadataMutex.Lock()
	fake.getEngineMetadataArgsForCall = append(fake.getEngineMetadataArgsForCall, struct{}{})
	fake.getEngineMetadataMutex.Unlock()
	if fake.GetEngineMetadataStub != nil {
		return fake.GetEngineMetadataStub()
	} else {
		return fake.getEngineMetadataReturns.result1
	}
}

func (fake *FakeBuildDB) GetEngineMetadataCallCount() int {
	fake.getEngineMetadataMutex.RLock()
	defer fake.getEngineMetadataMutex.RUnlock()
	return len(fake.getEngineMetadataArgsForCall)
}

func (fake *FakeBuildDB) GetEngineMetadataReturns(result1 string) {
	fake.GetEngineMetadataStub = nil
	fake.getEngineMetadataReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBuildDB) GetStatus() db.Status {
	fake.getStatusMutex.Lock()
	fake.getStatusArgsForCall = append(fake.getStatusArgsForCall, struct{}{})
	fake.getStatusMutex.Unlock()
	if fake.GetStatusStub != nil {
		return fake.GetStatusStub()
	} else {
		return fake.getStatusReturns.result1
	}
}

func (fake *FakeBuildDB) GetStatusCallCount() int {
	fake.getStatusMutex.RLock()
	defer fake.getStatusMutex.RUnlock()
	return len(fake.getStatusArgsForCall)
}

func (fake *FakeBuildDB) GetStatusReturns(result1 db.Status) {
	fake.GetStatusStub = nil
	fake.getStatusReturns = struct {
		result1 db.Status
	}{result1}
}

func (fake *FakeBuildDB) IsOneOff() bool {
	fake.isOneOffMutex.Lock()
	fake.isOneOffArgsForCall = append(fake.isOneOffArgsForCall, struct{}{})
	fake.isOneOffMutex.Unlock()
	if fake.IsOneOffStub != nil {
		return fake.IsOneOffStub()
	} else {
		return fake.isOneOffReturns.result1
	}
}

func (fake *FakeBuildDB) IsOneOffCallCount() int {
	fake.isOneOffMutex.RLock()
	defer fake.isOneOffMutex.RUnlock()
	return len(fake.isOneOffArgsForCall)
}

func (fake *FakeBuildDB) IsOneOffReturns(result1 bool) {
	fake.IsOneOffStub = nil
	fake.isOneOffReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeBuildDB) Events(from uint) (db.EventSource, error) {
	fake.eventsMutex.Lock()
	fake.eventsArgsForCall = append(fake.eventsArgsForCall, struct {
		from uint
	}{from})
	fake.eventsMutex.Unlock()
	if fake.EventsStub != nil {
		return fake.EventsStub(from)
	} else {
		return fake.eventsReturns.result1, fake.eventsReturns.result2
	}
}

func (fake *FakeBuildDB) EventsCallCount() int {
	fake.eventsMutex.RLock()
	defer fake.eventsMutex.RUnlock()
	return len(fake.eventsArgsForCall)
}

func (fake *FakeBuildDB) EventsArgsForCall(i int) uint {
	fake.eventsMutex.RLock()
	defer fake.eventsMutex.RUnlock()
	return fake.eventsArgsForCall[i].from
}

func (fake *FakeBuildDB) EventsReturns(result1 db.EventSource, result2 error) {
	fake.EventsStub = nil
	fake.eventsReturns = struct {
		result1 db.EventSource
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildDB) SaveEvent(event atc.Event) error {
	fake.saveEventMutex.Lock()
	fake.saveEventArgsForCall = append(fake.saveEventArgsForCall, struct {
		event atc.Event
	}{event})
	fake.saveEventMutex.Unlock()
	if fake.SaveEventStub != nil {
		return fake.SaveEventStub(event)
	} else {
		return fake.saveEventReturns.result1
	}
}

func (fake *FakeBuildDB) SaveEventCallCount() int {
	fake.saveEventMutex.RLock()
	defer fake.saveEventMutex.RUnlock()
	return len(fake.saveEventArgsForCall)
}

func (fake *FakeBuildDB) SaveEventArgsForCall(i int) atc.Event {
	fake.saveEventMutex.RLock()
	defer fake.saveEventMutex.RUnlock()
	return fake.saveEventArgsForCall[i].event
}

func (fake *FakeBuildDB) SaveEventReturns(result1 error) {
	fake.SaveEventStub = nil
	fake.saveEventReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildDB) GetVersionedResources() (db.SavedVersionedResources, error) {
	fake.getVersionedResourcesMutex.Lock()
	fake.getVersionedResourcesArgsForCall = append(fake.getVersionedResourcesArgsForCall, struct{}{})
	fake.getVersionedResourcesMutex.Unlock()
	if fake.GetVersionedResourcesStub != nil {
		return fake.GetVersionedResourcesStub()
	} else {
		return fake.getVersionedResourcesReturns.result1, fake.getVersionedResourcesReturns.result2
	}
}

func (fake *FakeBuildDB) GetVersionedResourcesCallCount() int {
	fake.getVersionedResourcesMutex.RLock()
	defer fake.getVersionedResourcesMutex.RUnlock()
	return len(fake.getVersionedResourcesArgsForCall)
}

func (fake *FakeBuildDB) GetVersionedResourcesReturns(result1 db.SavedVersionedResources, result2 error) {
	fake.GetVersionedResourcesStub = nil
	fake.getVersionedResourcesReturns = struct {
		result1 db.SavedVersionedResources
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildDB) GetResources() ([]db.BuildInput, []db.BuildOutput, error) {
	fake.getResourcesMutex.Lock()
	fake.getResourcesArgsForCall = append(fake.getResourcesArgsForCall, struct{}{})
	fake.getResourcesMutex.Unlock()
	if fake.GetResourcesStub != nil {
		return fake.GetResourcesStub()
	} else {
		return fake.getResourcesReturns.result1, fake.getResourcesReturns.result2, fake.getResourcesReturns.result3
	}
}

func (fake *FakeBuildDB) GetResourcesCallCount() int {
	fake.getResourcesMutex.RLock()
	defer fake.getResourcesMutex.RUnlock()
	return len(fake.getResourcesArgsForCall)
}

func (fake *FakeBuildDB) GetResourcesReturns(result1 []db.BuildInput, result2 []db.BuildOutput, result3 error) {
	fake.GetResourcesStub = nil
	fake.getResourcesReturns = struct {
		result1 []db.BuildInput
		result2 []db.BuildOutput
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBuildDB) Start(arg1 string, arg2 string) (bool, error) {
	fake.startMutex.Lock()
	fake.startArgsForCall = append(fake.startArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.startMutex.Unlock()
	if fake.StartStub != nil {
		return fake.StartStub(arg1, arg2)
	} else {
		return fake.startReturns.result1, fake.startReturns.result2
	}
}

func (fake *FakeBuildDB) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeBuildDB) StartArgsForCall(i int) (string, string) {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return fake.startArgsForCall[i].arg1, fake.startArgsForCall[i].arg2
}

func (fake *FakeBuildDB) StartReturns(result1 bool, result2 error) {
	fake.StartStub = nil
	fake.startReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildDB) Finish(status db.Status) error {
	fake.finishMutex.Lock()
	fake.finishArgsForCall = append(fake.finishArgsForCall, struct {
		status db.Status
	}{status})
	fake.finishMutex.Unlock()
	if fake.FinishStub != nil {
		return fake.FinishStub(status)
	} else {
		return fake.finishReturns.result1
	}
}

func (fake *FakeBuildDB) FinishCallCount() int {
	fake.finishMutex.RLock()
	defer fake.finishMutex.RUnlock()
	return len(fake.finishArgsForCall)
}

func (fake *FakeBuildDB) FinishArgsForCall(i int) db.Status {
	fake.finishMutex.RLock()
	defer fake.finishMutex.RUnlock()
	return fake.finishArgsForCall[i].status
}

func (fake *FakeBuildDB) FinishReturns(result1 error) {
	fake.FinishStub = nil
	fake.finishReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildDB) MarkAsFailed(cause error) error {
	fake.markAsFailedMutex.Lock()
	fake.markAsFailedArgsForCall = append(fake.markAsFailedArgsForCall, struct {
		cause error
	}{cause})
	fake.markAsFailedMutex.Unlock()
	if fake.MarkAsFailedStub != nil {
		return fake.MarkAsFailedStub(cause)
	} else {
		return fake.markAsFailedReturns.result1
	}
}

func (fake *FakeBuildDB) MarkAsFailedCallCount() int {
	fake.markAsFailedMutex.RLock()
	defer fake.markAsFailedMutex.RUnlock()
	return len(fake.markAsFailedArgsForCall)
}

func (fake *FakeBuildDB) MarkAsFailedArgsForCall(i int) error {
	fake.markAsFailedMutex.RLock()
	defer fake.markAsFailedMutex.RUnlock()
	return fake.markAsFailedArgsForCall[i].cause
}

func (fake *FakeBuildDB) MarkAsFailedReturns(result1 error) {
	fake.MarkAsFailedStub = nil
	fake.markAsFailedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildDB) Abort() error {
	fake.abortMutex.Lock()
	fake.abortArgsForCall = append(fake.abortArgsForCall, struct{}{})
	fake.abortMutex.Unlock()
	if fake.AbortStub != nil {
		return fake.AbortStub()
	} else {
		return fake.abortReturns.result1
	}
}

func (fake *FakeBuildDB) AbortCallCount() int {
	fake.abortMutex.RLock()
	defer fake.abortMutex.RUnlock()
	return len(fake.abortArgsForCall)
}

func (fake *FakeBuildDB) AbortReturns(result1 error) {
	fake.AbortStub = nil
	fake.abortReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildDB) AbortNotifier() (db.Notifier, error) {
	fake.abortNotifierMutex.Lock()
	fake.abortNotifierArgsForCall = append(fake.abortNotifierArgsForCall, struct{}{})
	fake.abortNotifierMutex.Unlock()
	if fake.AbortNotifierStub != nil {
		return fake.AbortNotifierStub()
	} else {
		return fake.abortNotifierReturns.result1, fake.abortNotifierReturns.result2
	}
}

func (fake *FakeBuildDB) AbortNotifierCallCount() int {
	fake.abortNotifierMutex.RLock()
	defer fake.abortNotifierMutex.RUnlock()
	return len(fake.abortNotifierArgsForCall)
}

func (fake *FakeBuildDB) AbortNotifierReturns(result1 db.Notifier, result2 error) {
	fake.AbortNotifierStub = nil
	fake.abortNotifierReturns = struct {
		result1 db.Notifier
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildDB) LeaseScheduling(logger lager.Logger, interval time.Duration) (db.Lease, bool, error) {
	fake.leaseSchedulingMutex.Lock()
	fake.leaseSchedulingArgsForCall = append(fake.leaseSchedulingArgsForCall, struct {
		logger   lager.Logger
		interval time.Duration
	}{logger, interval})
	fake.leaseSchedulingMutex.Unlock()
	if fake.LeaseSchedulingStub != nil {
		return fake.LeaseSchedulingStub(logger, interval)
	} else {
		return fake.leaseSchedulingReturns.result1, fake.leaseSchedulingReturns.result2, fake.leaseSchedulingReturns.result3
	}
}

func (fake *FakeBuildDB) LeaseSchedulingCallCount() int {
	fake.leaseSchedulingMutex.RLock()
	defer fake.leaseSchedulingMutex.RUnlock()
	return len(fake.leaseSchedulingArgsForCall)
}

func (fake *FakeBuildDB) LeaseSchedulingArgsForCall(i int) (lager.Logger, time.Duration) {
	fake.leaseSchedulingMutex.RLock()
	defer fake.leaseSchedulingMutex.RUnlock()
	return fake.leaseSchedulingArgsForCall[i].logger, fake.leaseSchedulingArgsForCall[i].interval
}

func (fake *FakeBuildDB) LeaseSchedulingReturns(result1 db.Lease, result2 bool, result3 error) {
	fake.LeaseSchedulingStub = nil
	fake.leaseSchedulingReturns = struct {
		result1 db.Lease
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBuildDB) LeaseTracking(logger lager.Logger, interval time.Duration) (db.Lease, bool, error) {
	fake.leaseTrackingMutex.Lock()
	fake.leaseTrackingArgsForCall = append(fake.leaseTrackingArgsForCall, struct {
		logger   lager.Logger
		interval time.Duration
	}{logger, interval})
	fake.leaseTrackingMutex.Unlock()
	if fake.LeaseTrackingStub != nil {
		return fake.LeaseTrackingStub(logger, interval)
	} else {
		return fake.leaseTrackingReturns.result1, fake.leaseTrackingReturns.result2, fake.leaseTrackingReturns.result3
	}
}

func (fake *FakeBuildDB) LeaseTrackingCallCount() int {
	fake.leaseTrackingMutex.RLock()
	defer fake.leaseTrackingMutex.RUnlock()
	return len(fake.leaseTrackingArgsForCall)
}

func (fake *FakeBuildDB) LeaseTrackingArgsForCall(i int) (lager.Logger, time.Duration) {
	fake.leaseTrackingMutex.RLock()
	defer fake.leaseTrackingMutex.RUnlock()
	return fake.leaseTrackingArgsForCall[i].logger, fake.leaseTrackingArgsForCall[i].interval
}

func (fake *FakeBuildDB) LeaseTrackingReturns(result1 db.Lease, result2 bool, result3 error) {
	fake.LeaseTrackingStub = nil
	fake.leaseTrackingReturns = struct {
		result1 db.Lease
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBuildDB) GetPreparation() (db.BuildPreparation, bool, error) {
	fake.getPreparationMutex.Lock()
	fake.getPreparationArgsForCall = append(fake.getPreparationArgsForCall, struct{}{})
	fake.getPreparationMutex.Unlock()
	if fake.GetPreparationStub != nil {
		return fake.GetPreparationStub()
	} else {
		return fake.getPreparationReturns.result1, fake.getPreparationReturns.result2, fake.getPreparationReturns.result3
	}
}

func (fake *FakeBuildDB) GetPreparationCallCount() int {
	fake.getPreparationMutex.RLock()
	defer fake.getPreparationMutex.RUnlock()
	return len(fake.getPreparationArgsForCall)
}

func (fake *FakeBuildDB) GetPreparationReturns(result1 db.BuildPreparation, result2 bool, result3 error) {
	fake.GetPreparationStub = nil
	fake.getPreparationReturns = struct {
		result1 db.BuildPreparation
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBuildDB) SaveEngineMetadata(engineMetadata string) error {
	fake.saveEngineMetadataMutex.Lock()
	fake.saveEngineMetadataArgsForCall = append(fake.saveEngineMetadataArgsForCall, struct {
		engineMetadata string
	}{engineMetadata})
	fake.saveEngineMetadataMutex.Unlock()
	if fake.SaveEngineMetadataStub != nil {
		return fake.SaveEngineMetadataStub(engineMetadata)
	} else {
		return fake.saveEngineMetadataReturns.result1
	}
}

func (fake *FakeBuildDB) SaveEngineMetadataCallCount() int {
	fake.saveEngineMetadataMutex.RLock()
	defer fake.saveEngineMetadataMutex.RUnlock()
	return len(fake.saveEngineMetadataArgsForCall)
}

func (fake *FakeBuildDB) SaveEngineMetadataArgsForCall(i int) string {
	fake.saveEngineMetadataMutex.RLock()
	defer fake.saveEngineMetadataMutex.RUnlock()
	return fake.saveEngineMetadataArgsForCall[i].engineMetadata
}

func (fake *FakeBuildDB) SaveEngineMetadataReturns(result1 error) {
	fake.SaveEngineMetadataStub = nil
	fake.saveEngineMetadataReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildDB) SaveInput(input db.BuildInput) (db.SavedVersionedResource, error) {
	fake.saveInputMutex.Lock()
	fake.saveInputArgsForCall = append(fake.saveInputArgsForCall, struct {
		input db.BuildInput
	}{input})
	fake.saveInputMutex.Unlock()
	if fake.SaveInputStub != nil {
		return fake.SaveInputStub(input)
	} else {
		return fake.saveInputReturns.result1, fake.saveInputReturns.result2
	}
}

func (fake *FakeBuildDB) SaveInputCallCount() int {
	fake.saveInputMutex.RLock()
	defer fake.saveInputMutex.RUnlock()
	return len(fake.saveInputArgsForCall)
}

func (fake *FakeBuildDB) SaveInputArgsForCall(i int) db.BuildInput {
	fake.saveInputMutex.RLock()
	defer fake.saveInputMutex.RUnlock()
	return fake.saveInputArgsForCall[i].input
}

func (fake *FakeBuildDB) SaveInputReturns(result1 db.SavedVersionedResource, result2 error) {
	fake.SaveInputStub = nil
	fake.saveInputReturns = struct {
		result1 db.SavedVersionedResource
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildDB) SaveOutput(vr db.VersionedResource, explicit bool) (db.SavedVersionedResource, error) {
	fake.saveOutputMutex.Lock()
	fake.saveOutputArgsForCall = append(fake.saveOutputArgsForCall, struct {
		vr       db.VersionedResource
		explicit bool
	}{vr, explicit})
	fake.saveOutputMutex.Unlock()
	if fake.SaveOutputStub != nil {
		return fake.SaveOutputStub(vr, explicit)
	} else {
		return fake.saveOutputReturns.result1, fake.saveOutputReturns.result2
	}
}

func (fake *FakeBuildDB) SaveOutputCallCount() int {
	fake.saveOutputMutex.RLock()
	defer fake.saveOutputMutex.RUnlock()
	return len(fake.saveOutputArgsForCall)
}

func (fake *FakeBuildDB) SaveOutputArgsForCall(i int) (db.VersionedResource, bool) {
	fake.saveOutputMutex.RLock()
	defer fake.saveOutputMutex.RUnlock()
	return fake.saveOutputArgsForCall[i].vr, fake.saveOutputArgsForCall[i].explicit
}

func (fake *FakeBuildDB) SaveOutputReturns(result1 db.SavedVersionedResource, result2 error) {
	fake.SaveOutputStub = nil
	fake.saveOutputReturns = struct {
		result1 db.SavedVersionedResource
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildDB) SaveImageResourceVersion(planID atc.PlanID, identifier db.ResourceCacheIdentifier) error {
	fake.saveImageResourceVersionMutex.Lock()
	fake.saveImageResourceVersionArgsForCall = append(fake.saveImageResourceVersionArgsForCall, struct {
		planID     atc.PlanID
		identifier db.ResourceCacheIdentifier
	}{planID, identifier})
	fake.saveImageResourceVersionMutex.Unlock()
	if fake.SaveImageResourceVersionStub != nil {
		return fake.SaveImageResourceVersionStub(planID, identifier)
	} else {
		return fake.saveImageResourceVersionReturns.result1
	}
}

func (fake *FakeBuildDB) SaveImageResourceVersionCallCount() int {
	fake.saveImageResourceVersionMutex.RLock()
	defer fake.saveImageResourceVersionMutex.RUnlock()
	return len(fake.saveImageResourceVersionArgsForCall)
}

func (fake *FakeBuildDB) SaveImageResourceVersionArgsForCall(i int) (atc.PlanID, db.ResourceCacheIdentifier) {
	fake.saveImageResourceVersionMutex.RLock()
	defer fake.saveImageResourceVersionMutex.RUnlock()
	return fake.saveImageResourceVersionArgsForCall[i].planID, fake.saveImageResourceVersionArgsForCall[i].identifier
}

func (fake *FakeBuildDB) SaveImageResourceVersionReturns(result1 error) {
	fake.SaveImageResourceVersionStub = nil
	fake.saveImageResourceVersionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildDB) GetImageResourceCacheIdentifiers() ([]db.ResourceCacheIdentifier, error) {
	fake.getImageResourceCacheIdentifiersMutex.Lock()
	fake.getImageResourceCacheIdentifiersArgsForCall = append(fake.getImageResourceCacheIdentifiersArgsForCall, struct{}{})
	fake.getImageResourceCacheIdentifiersMutex.Unlock()
	if fake.GetImageResourceCacheIdentifiersStub != nil {
		return fake.GetImageResourceCacheIdentifiersStub()
	} else {
		return fake.getImageResourceCacheIdentifiersReturns.result1, fake.getImageResourceCacheIdentifiersReturns.result2
	}
}

func (fake *FakeBuildDB) GetImageResourceCacheIdentifiersCallCount() int {
	fake.getImageResourceCacheIdentifiersMutex.RLock()
	defer fake.getImageResourceCacheIdentifiersMutex.RUnlock()
	return len(fake.getImageResourceCacheIdentifiersArgsForCall)
}

func (fake *FakeBuildDB) GetImageResourceCacheIdentifiersReturns(result1 []db.ResourceCacheIdentifier, result2 error) {
	fake.GetImageResourceCacheIdentifiersStub = nil
	fake.getImageResourceCacheIdentifiersReturns = struct {
		result1 []db.ResourceCacheIdentifier
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildDB) GetConfig() (atc.Config, db.ConfigVersion, error) {
	fake.getConfigMutex.Lock()
	fake.getConfigArgsForCall = append(fake.getConfigArgsForCall, struct{}{})
	fake.getConfigMutex.Unlock()
	if fake.GetConfigStub != nil {
		return fake.GetConfigStub()
	} else {
		return fake.getConfigReturns.result1, fake.getConfigReturns.result2, fake.getConfigReturns.result3
	}
}

func (fake *FakeBuildDB) GetConfigCallCount() int {
	fake.getConfigMutex.RLock()
	defer fake.getConfigMutex.RUnlock()
	return len(fake.getConfigArgsForCall)
}

func (fake *FakeBuildDB) GetConfigReturns(result1 atc.Config, result2 db.ConfigVersion, result3 error) {
	fake.GetConfigStub = nil
	fake.getConfigReturns = struct {
		result1 atc.Config
		result2 db.ConfigVersion
		result3 error
	}{result1, result2, result3}
}

var _ db.BuildDB = new(FakeBuildDB)
