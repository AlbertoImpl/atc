// This file was generated by counterfeiter
package workerfakes

import (
	"sync"

	"github.com/concourse/atc"
	"github.com/concourse/atc/dbng"
	"github.com/concourse/atc/worker"
)

type FakeDBContainerFactory struct {
	CreateTaskContainerStub        func(worker *dbng.Worker, build *dbng.Build, planID atc.PlanID, meta dbng.ContainerMetadata) (*dbng.CreatingContainer, error)
	createTaskContainerMutex       sync.RWMutex
	createTaskContainerArgsForCall []struct {
		worker *dbng.Worker
		build  *dbng.Build
		planID atc.PlanID
		meta   dbng.ContainerMetadata
	}
	createTaskContainerReturns struct {
		result1 *dbng.CreatingContainer
		result2 error
	}
	CreateResourcePutContainerStub        func(worker *dbng.Worker, build *dbng.Build, planID atc.PlanID, meta dbng.ContainerMetadata) (*dbng.CreatingContainer, error)
	createResourcePutContainerMutex       sync.RWMutex
	createResourcePutContainerArgsForCall []struct {
		worker *dbng.Worker
		build  *dbng.Build
		planID atc.PlanID
		meta   dbng.ContainerMetadata
	}
	createResourcePutContainerReturns struct {
		result1 *dbng.CreatingContainer
		result2 error
	}
	CreateResourceGetContainerStub        func(worker *dbng.Worker, resourceCache *dbng.UsedResourceCache) (*dbng.CreatingContainer, error)
	createResourceGetContainerMutex       sync.RWMutex
	createResourceGetContainerArgsForCall []struct {
		worker        *dbng.Worker
		resourceCache *dbng.UsedResourceCache
	}
	createResourceGetContainerReturns struct {
		result1 *dbng.CreatingContainer
		result2 error
	}
	FindContainerStub        func(handle string) (*dbng.CreatedContainer, bool, error)
	findContainerMutex       sync.RWMutex
	findContainerArgsForCall []struct {
		handle string
	}
	findContainerReturns struct {
		result1 *dbng.CreatedContainer
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDBContainerFactory) CreateTaskContainer(worker *dbng.Worker, build *dbng.Build, planID atc.PlanID, meta dbng.ContainerMetadata) (*dbng.CreatingContainer, error) {
	fake.createTaskContainerMutex.Lock()
	fake.createTaskContainerArgsForCall = append(fake.createTaskContainerArgsForCall, struct {
		worker *dbng.Worker
		build  *dbng.Build
		planID atc.PlanID
		meta   dbng.ContainerMetadata
	}{worker, build, planID, meta})
	fake.recordInvocation("CreateTaskContainer", []interface{}{worker, build, planID, meta})
	fake.createTaskContainerMutex.Unlock()
	if fake.CreateTaskContainerStub != nil {
		return fake.CreateTaskContainerStub(worker, build, planID, meta)
	} else {
		return fake.createTaskContainerReturns.result1, fake.createTaskContainerReturns.result2
	}
}

func (fake *FakeDBContainerFactory) CreateTaskContainerCallCount() int {
	fake.createTaskContainerMutex.RLock()
	defer fake.createTaskContainerMutex.RUnlock()
	return len(fake.createTaskContainerArgsForCall)
}

func (fake *FakeDBContainerFactory) CreateTaskContainerArgsForCall(i int) (*dbng.Worker, *dbng.Build, atc.PlanID, dbng.ContainerMetadata) {
	fake.createTaskContainerMutex.RLock()
	defer fake.createTaskContainerMutex.RUnlock()
	return fake.createTaskContainerArgsForCall[i].worker, fake.createTaskContainerArgsForCall[i].build, fake.createTaskContainerArgsForCall[i].planID, fake.createTaskContainerArgsForCall[i].meta
}

func (fake *FakeDBContainerFactory) CreateTaskContainerReturns(result1 *dbng.CreatingContainer, result2 error) {
	fake.CreateTaskContainerStub = nil
	fake.createTaskContainerReturns = struct {
		result1 *dbng.CreatingContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeDBContainerFactory) CreateResourcePutContainer(worker *dbng.Worker, build *dbng.Build, planID atc.PlanID, meta dbng.ContainerMetadata) (*dbng.CreatingContainer, error) {
	fake.createResourcePutContainerMutex.Lock()
	fake.createResourcePutContainerArgsForCall = append(fake.createResourcePutContainerArgsForCall, struct {
		worker *dbng.Worker
		build  *dbng.Build
		planID atc.PlanID
		meta   dbng.ContainerMetadata
	}{worker, build, planID, meta})
	fake.recordInvocation("CreateResourcePutContainer", []interface{}{worker, build, planID, meta})
	fake.createResourcePutContainerMutex.Unlock()
	if fake.CreateResourcePutContainerStub != nil {
		return fake.CreateResourcePutContainerStub(worker, build, planID, meta)
	} else {
		return fake.createResourcePutContainerReturns.result1, fake.createResourcePutContainerReturns.result2
	}
}

func (fake *FakeDBContainerFactory) CreateResourcePutContainerCallCount() int {
	fake.createResourcePutContainerMutex.RLock()
	defer fake.createResourcePutContainerMutex.RUnlock()
	return len(fake.createResourcePutContainerArgsForCall)
}

func (fake *FakeDBContainerFactory) CreateResourcePutContainerArgsForCall(i int) (*dbng.Worker, *dbng.Build, atc.PlanID, dbng.ContainerMetadata) {
	fake.createResourcePutContainerMutex.RLock()
	defer fake.createResourcePutContainerMutex.RUnlock()
	return fake.createResourcePutContainerArgsForCall[i].worker, fake.createResourcePutContainerArgsForCall[i].build, fake.createResourcePutContainerArgsForCall[i].planID, fake.createResourcePutContainerArgsForCall[i].meta
}

func (fake *FakeDBContainerFactory) CreateResourcePutContainerReturns(result1 *dbng.CreatingContainer, result2 error) {
	fake.CreateResourcePutContainerStub = nil
	fake.createResourcePutContainerReturns = struct {
		result1 *dbng.CreatingContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeDBContainerFactory) CreateResourceGetContainer(worker *dbng.Worker, resourceCache *dbng.UsedResourceCache) (*dbng.CreatingContainer, error) {
	fake.createResourceGetContainerMutex.Lock()
	fake.createResourceGetContainerArgsForCall = append(fake.createResourceGetContainerArgsForCall, struct {
		worker        *dbng.Worker
		resourceCache *dbng.UsedResourceCache
	}{worker, resourceCache})
	fake.recordInvocation("CreateResourceGetContainer", []interface{}{worker, resourceCache})
	fake.createResourceGetContainerMutex.Unlock()
	if fake.CreateResourceGetContainerStub != nil {
		return fake.CreateResourceGetContainerStub(worker, resourceCache)
	} else {
		return fake.createResourceGetContainerReturns.result1, fake.createResourceGetContainerReturns.result2
	}
}

func (fake *FakeDBContainerFactory) CreateResourceGetContainerCallCount() int {
	fake.createResourceGetContainerMutex.RLock()
	defer fake.createResourceGetContainerMutex.RUnlock()
	return len(fake.createResourceGetContainerArgsForCall)
}

func (fake *FakeDBContainerFactory) CreateResourceGetContainerArgsForCall(i int) (*dbng.Worker, *dbng.UsedResourceCache) {
	fake.createResourceGetContainerMutex.RLock()
	defer fake.createResourceGetContainerMutex.RUnlock()
	return fake.createResourceGetContainerArgsForCall[i].worker, fake.createResourceGetContainerArgsForCall[i].resourceCache
}

func (fake *FakeDBContainerFactory) CreateResourceGetContainerReturns(result1 *dbng.CreatingContainer, result2 error) {
	fake.CreateResourceGetContainerStub = nil
	fake.createResourceGetContainerReturns = struct {
		result1 *dbng.CreatingContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeDBContainerFactory) FindContainer(handle string) (*dbng.CreatedContainer, bool, error) {
	fake.findContainerMutex.Lock()
	fake.findContainerArgsForCall = append(fake.findContainerArgsForCall, struct {
		handle string
	}{handle})
	fake.recordInvocation("FindContainer", []interface{}{handle})
	fake.findContainerMutex.Unlock()
	if fake.FindContainerStub != nil {
		return fake.FindContainerStub(handle)
	} else {
		return fake.findContainerReturns.result1, fake.findContainerReturns.result2, fake.findContainerReturns.result3
	}
}

func (fake *FakeDBContainerFactory) FindContainerCallCount() int {
	fake.findContainerMutex.RLock()
	defer fake.findContainerMutex.RUnlock()
	return len(fake.findContainerArgsForCall)
}

func (fake *FakeDBContainerFactory) FindContainerArgsForCall(i int) string {
	fake.findContainerMutex.RLock()
	defer fake.findContainerMutex.RUnlock()
	return fake.findContainerArgsForCall[i].handle
}

func (fake *FakeDBContainerFactory) FindContainerReturns(result1 *dbng.CreatedContainer, result2 bool, result3 error) {
	fake.FindContainerStub = nil
	fake.findContainerReturns = struct {
		result1 *dbng.CreatedContainer
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDBContainerFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createTaskContainerMutex.RLock()
	defer fake.createTaskContainerMutex.RUnlock()
	fake.createResourcePutContainerMutex.RLock()
	defer fake.createResourcePutContainerMutex.RUnlock()
	fake.createResourceGetContainerMutex.RLock()
	defer fake.createResourceGetContainerMutex.RUnlock()
	fake.findContainerMutex.RLock()
	defer fake.findContainerMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDBContainerFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ worker.DBContainerFactory = new(FakeDBContainerFactory)
