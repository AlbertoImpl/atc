// This file was generated by counterfeiter
package fakes

import (
	"net/http"
	"sync"

	gconn "github.com/cloudfoundry-incubator/garden/client/connection"
	"github.com/concourse/atc/worker"
)

type FakeGardenConnectionFactory struct {
	BuildConnectionStub        func(worker.HijackStreamer) gconn.Connection
	buildConnectionMutex       sync.RWMutex
	buildConnectionArgsForCall []struct {
		arg1 worker.HijackStreamer
	}
	buildConnectionReturns struct {
		result1 gconn.Connection
	}
	CreateRetryableHttpClientStub        func() http.Client
	createRetryableHttpClientMutex       sync.RWMutex
	createRetryableHttpClientArgsForCall []struct{}
	createRetryableHttpClientReturns     struct {
		result1 http.Client
	}
}

func (fake *FakeGardenConnectionFactory) BuildConnection(arg1 worker.HijackStreamer) gconn.Connection {
	fake.buildConnectionMutex.Lock()
	fake.buildConnectionArgsForCall = append(fake.buildConnectionArgsForCall, struct {
		arg1 worker.HijackStreamer
	}{arg1})
	fake.buildConnectionMutex.Unlock()
	if fake.BuildConnectionStub != nil {
		return fake.BuildConnectionStub(arg1)
	} else {
		return fake.buildConnectionReturns.result1
	}
}

func (fake *FakeGardenConnectionFactory) BuildConnectionCallCount() int {
	fake.buildConnectionMutex.RLock()
	defer fake.buildConnectionMutex.RUnlock()
	return len(fake.buildConnectionArgsForCall)
}

func (fake *FakeGardenConnectionFactory) BuildConnectionArgsForCall(i int) worker.HijackStreamer {
	fake.buildConnectionMutex.RLock()
	defer fake.buildConnectionMutex.RUnlock()
	return fake.buildConnectionArgsForCall[i].arg1
}

func (fake *FakeGardenConnectionFactory) BuildConnectionReturns(result1 gconn.Connection) {
	fake.BuildConnectionStub = nil
	fake.buildConnectionReturns = struct {
		result1 gconn.Connection
	}{result1}
}

func (fake *FakeGardenConnectionFactory) CreateRetryableHttpClient() http.Client {
	fake.createRetryableHttpClientMutex.Lock()
	fake.createRetryableHttpClientArgsForCall = append(fake.createRetryableHttpClientArgsForCall, struct{}{})
	fake.createRetryableHttpClientMutex.Unlock()
	if fake.CreateRetryableHttpClientStub != nil {
		return fake.CreateRetryableHttpClientStub()
	} else {
		return fake.createRetryableHttpClientReturns.result1
	}
}

func (fake *FakeGardenConnectionFactory) CreateRetryableHttpClientCallCount() int {
	fake.createRetryableHttpClientMutex.RLock()
	defer fake.createRetryableHttpClientMutex.RUnlock()
	return len(fake.createRetryableHttpClientArgsForCall)
}

func (fake *FakeGardenConnectionFactory) CreateRetryableHttpClientReturns(result1 http.Client) {
	fake.CreateRetryableHttpClientStub = nil
	fake.createRetryableHttpClientReturns = struct {
		result1 http.Client
	}{result1}
}

var _ worker.GardenConnectionFactory = new(FakeGardenConnectionFactory)
