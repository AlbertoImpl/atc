// This file was generated by counterfeiter
package imagefakes

import (
	"sync"

	"github.com/concourse/atc/worker"
	"github.com/concourse/atc/worker/image"
)

type FakeImageResourceFetcherFactory struct {
	ImageResourceFetcherForStub        func(worker.Worker) image.ImageResourceFetcher
	imageResourceFetcherForMutex       sync.RWMutex
	imageResourceFetcherForArgsForCall []struct {
		arg1 worker.Worker
	}
	imageResourceFetcherForReturns struct {
		result1 image.ImageResourceFetcher
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImageResourceFetcherFactory) ImageResourceFetcherFor(arg1 worker.Worker) image.ImageResourceFetcher {
	fake.imageResourceFetcherForMutex.Lock()
	fake.imageResourceFetcherForArgsForCall = append(fake.imageResourceFetcherForArgsForCall, struct {
		arg1 worker.Worker
	}{arg1})
	fake.recordInvocation("ImageResourceFetcherFor", []interface{}{arg1})
	fake.imageResourceFetcherForMutex.Unlock()
	if fake.ImageResourceFetcherForStub != nil {
		return fake.ImageResourceFetcherForStub(arg1)
	}
	return fake.imageResourceFetcherForReturns.result1
}

func (fake *FakeImageResourceFetcherFactory) ImageResourceFetcherForCallCount() int {
	fake.imageResourceFetcherForMutex.RLock()
	defer fake.imageResourceFetcherForMutex.RUnlock()
	return len(fake.imageResourceFetcherForArgsForCall)
}

func (fake *FakeImageResourceFetcherFactory) ImageResourceFetcherForArgsForCall(i int) worker.Worker {
	fake.imageResourceFetcherForMutex.RLock()
	defer fake.imageResourceFetcherForMutex.RUnlock()
	return fake.imageResourceFetcherForArgsForCall[i].arg1
}

func (fake *FakeImageResourceFetcherFactory) ImageResourceFetcherForReturns(result1 image.ImageResourceFetcher) {
	fake.ImageResourceFetcherForStub = nil
	fake.imageResourceFetcherForReturns = struct {
		result1 image.ImageResourceFetcher
	}{result1}
}

func (fake *FakeImageResourceFetcherFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.imageResourceFetcherForMutex.RLock()
	defer fake.imageResourceFetcherForMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeImageResourceFetcherFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ image.ImageResourceFetcherFactory = new(FakeImageResourceFetcherFactory)
