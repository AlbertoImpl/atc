// This file was generated by counterfeiter
package resourcefakes

import (
	"sync"

	"github.com/concourse/atc"
	"github.com/concourse/atc/resource"
	"github.com/concourse/atc/worker"
	"github.com/pivotal-golang/lager"
)

type FakeTracker struct {
	FindContainerForSessionStub        func(lager.Logger, resource.Session) (resource.Resource, resource.Cache, bool, error)
	findContainerForSessionMutex       sync.RWMutex
	findContainerForSessionArgsForCall []struct {
		arg1 lager.Logger
		arg2 resource.Session
	}
	findContainerForSessionReturns struct {
		result1 resource.Resource
		result2 resource.Cache
		result3 bool
		result4 error
	}
	ChooseWorkerStub        func(resource.ResourceType, atc.Tags, atc.ResourceTypes) (worker.Worker, error)
	chooseWorkerMutex       sync.RWMutex
	chooseWorkerArgsForCall []struct {
		arg1 resource.ResourceType
		arg2 atc.Tags
		arg3 atc.ResourceTypes
	}
	chooseWorkerReturns struct {
		result1 worker.Worker
		result2 error
	}
	InitStub        func(lager.Logger, resource.Metadata, resource.Session, resource.ResourceType, atc.Tags, atc.ResourceTypes, worker.ImageFetchingDelegate) (resource.Resource, error)
	initMutex       sync.RWMutex
	initArgsForCall []struct {
		arg1 lager.Logger
		arg2 resource.Metadata
		arg3 resource.Session
		arg4 resource.ResourceType
		arg5 atc.Tags
		arg6 atc.ResourceTypes
		arg7 worker.ImageFetchingDelegate
	}
	initReturns struct {
		result1 resource.Resource
		result2 error
	}
	InitWithCacheStub        func(lager.Logger, resource.Metadata, resource.Session, resource.ResourceType, atc.Tags, resource.CacheIdentifier, atc.ResourceTypes, worker.ImageFetchingDelegate, worker.Worker) (resource.Resource, resource.Cache, error)
	initWithCacheMutex       sync.RWMutex
	initWithCacheArgsForCall []struct {
		arg1 lager.Logger
		arg2 resource.Metadata
		arg3 resource.Session
		arg4 resource.ResourceType
		arg5 atc.Tags
		arg6 resource.CacheIdentifier
		arg7 atc.ResourceTypes
		arg8 worker.ImageFetchingDelegate
		arg9 worker.Worker
	}
	initWithCacheReturns struct {
		result1 resource.Resource
		result2 resource.Cache
		result3 error
	}
	InitWithSourcesStub        func(lager.Logger, resource.Metadata, resource.Session, resource.ResourceType, atc.Tags, map[string]resource.ArtifactSource, atc.ResourceTypes, worker.ImageFetchingDelegate) (resource.Resource, []string, error)
	initWithSourcesMutex       sync.RWMutex
	initWithSourcesArgsForCall []struct {
		arg1 lager.Logger
		arg2 resource.Metadata
		arg3 resource.Session
		arg4 resource.ResourceType
		arg5 atc.Tags
		arg6 map[string]resource.ArtifactSource
		arg7 atc.ResourceTypes
		arg8 worker.ImageFetchingDelegate
	}
	initWithSourcesReturns struct {
		result1 resource.Resource
		result2 []string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTracker) FindContainerForSession(arg1 lager.Logger, arg2 resource.Session) (resource.Resource, resource.Cache, bool, error) {
	fake.findContainerForSessionMutex.Lock()
	fake.findContainerForSessionArgsForCall = append(fake.findContainerForSessionArgsForCall, struct {
		arg1 lager.Logger
		arg2 resource.Session
	}{arg1, arg2})
	fake.recordInvocation("FindContainerForSession", []interface{}{arg1, arg2})
	fake.findContainerForSessionMutex.Unlock()
	if fake.FindContainerForSessionStub != nil {
		return fake.FindContainerForSessionStub(arg1, arg2)
	} else {
		return fake.findContainerForSessionReturns.result1, fake.findContainerForSessionReturns.result2, fake.findContainerForSessionReturns.result3, fake.findContainerForSessionReturns.result4
	}
}

func (fake *FakeTracker) FindContainerForSessionCallCount() int {
	fake.findContainerForSessionMutex.RLock()
	defer fake.findContainerForSessionMutex.RUnlock()
	return len(fake.findContainerForSessionArgsForCall)
}

func (fake *FakeTracker) FindContainerForSessionArgsForCall(i int) (lager.Logger, resource.Session) {
	fake.findContainerForSessionMutex.RLock()
	defer fake.findContainerForSessionMutex.RUnlock()
	return fake.findContainerForSessionArgsForCall[i].arg1, fake.findContainerForSessionArgsForCall[i].arg2
}

func (fake *FakeTracker) FindContainerForSessionReturns(result1 resource.Resource, result2 resource.Cache, result3 bool, result4 error) {
	fake.FindContainerForSessionStub = nil
	fake.findContainerForSessionReturns = struct {
		result1 resource.Resource
		result2 resource.Cache
		result3 bool
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeTracker) ChooseWorker(arg1 resource.ResourceType, arg2 atc.Tags, arg3 atc.ResourceTypes) (worker.Worker, error) {
	fake.chooseWorkerMutex.Lock()
	fake.chooseWorkerArgsForCall = append(fake.chooseWorkerArgsForCall, struct {
		arg1 resource.ResourceType
		arg2 atc.Tags
		arg3 atc.ResourceTypes
	}{arg1, arg2, arg3})
	fake.recordInvocation("ChooseWorker", []interface{}{arg1, arg2, arg3})
	fake.chooseWorkerMutex.Unlock()
	if fake.ChooseWorkerStub != nil {
		return fake.ChooseWorkerStub(arg1, arg2, arg3)
	} else {
		return fake.chooseWorkerReturns.result1, fake.chooseWorkerReturns.result2
	}
}

func (fake *FakeTracker) ChooseWorkerCallCount() int {
	fake.chooseWorkerMutex.RLock()
	defer fake.chooseWorkerMutex.RUnlock()
	return len(fake.chooseWorkerArgsForCall)
}

func (fake *FakeTracker) ChooseWorkerArgsForCall(i int) (resource.ResourceType, atc.Tags, atc.ResourceTypes) {
	fake.chooseWorkerMutex.RLock()
	defer fake.chooseWorkerMutex.RUnlock()
	return fake.chooseWorkerArgsForCall[i].arg1, fake.chooseWorkerArgsForCall[i].arg2, fake.chooseWorkerArgsForCall[i].arg3
}

func (fake *FakeTracker) ChooseWorkerReturns(result1 worker.Worker, result2 error) {
	fake.ChooseWorkerStub = nil
	fake.chooseWorkerReturns = struct {
		result1 worker.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeTracker) Init(arg1 lager.Logger, arg2 resource.Metadata, arg3 resource.Session, arg4 resource.ResourceType, arg5 atc.Tags, arg6 atc.ResourceTypes, arg7 worker.ImageFetchingDelegate) (resource.Resource, error) {
	fake.initMutex.Lock()
	fake.initArgsForCall = append(fake.initArgsForCall, struct {
		arg1 lager.Logger
		arg2 resource.Metadata
		arg3 resource.Session
		arg4 resource.ResourceType
		arg5 atc.Tags
		arg6 atc.ResourceTypes
		arg7 worker.ImageFetchingDelegate
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	fake.recordInvocation("Init", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	fake.initMutex.Unlock()
	if fake.InitStub != nil {
		return fake.InitStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	} else {
		return fake.initReturns.result1, fake.initReturns.result2
	}
}

func (fake *FakeTracker) InitCallCount() int {
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	return len(fake.initArgsForCall)
}

func (fake *FakeTracker) InitArgsForCall(i int) (lager.Logger, resource.Metadata, resource.Session, resource.ResourceType, atc.Tags, atc.ResourceTypes, worker.ImageFetchingDelegate) {
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	return fake.initArgsForCall[i].arg1, fake.initArgsForCall[i].arg2, fake.initArgsForCall[i].arg3, fake.initArgsForCall[i].arg4, fake.initArgsForCall[i].arg5, fake.initArgsForCall[i].arg6, fake.initArgsForCall[i].arg7
}

func (fake *FakeTracker) InitReturns(result1 resource.Resource, result2 error) {
	fake.InitStub = nil
	fake.initReturns = struct {
		result1 resource.Resource
		result2 error
	}{result1, result2}
}

func (fake *FakeTracker) InitWithCache(arg1 lager.Logger, arg2 resource.Metadata, arg3 resource.Session, arg4 resource.ResourceType, arg5 atc.Tags, arg6 resource.CacheIdentifier, arg7 atc.ResourceTypes, arg8 worker.ImageFetchingDelegate, arg9 worker.Worker) (resource.Resource, resource.Cache, error) {
	fake.initWithCacheMutex.Lock()
	fake.initWithCacheArgsForCall = append(fake.initWithCacheArgsForCall, struct {
		arg1 lager.Logger
		arg2 resource.Metadata
		arg3 resource.Session
		arg4 resource.ResourceType
		arg5 atc.Tags
		arg6 resource.CacheIdentifier
		arg7 atc.ResourceTypes
		arg8 worker.ImageFetchingDelegate
		arg9 worker.Worker
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9})
	fake.recordInvocation("InitWithCache", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9})
	fake.initWithCacheMutex.Unlock()
	if fake.InitWithCacheStub != nil {
		return fake.InitWithCacheStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	} else {
		return fake.initWithCacheReturns.result1, fake.initWithCacheReturns.result2, fake.initWithCacheReturns.result3
	}
}

func (fake *FakeTracker) InitWithCacheCallCount() int {
	fake.initWithCacheMutex.RLock()
	defer fake.initWithCacheMutex.RUnlock()
	return len(fake.initWithCacheArgsForCall)
}

func (fake *FakeTracker) InitWithCacheArgsForCall(i int) (lager.Logger, resource.Metadata, resource.Session, resource.ResourceType, atc.Tags, resource.CacheIdentifier, atc.ResourceTypes, worker.ImageFetchingDelegate, worker.Worker) {
	fake.initWithCacheMutex.RLock()
	defer fake.initWithCacheMutex.RUnlock()
	return fake.initWithCacheArgsForCall[i].arg1, fake.initWithCacheArgsForCall[i].arg2, fake.initWithCacheArgsForCall[i].arg3, fake.initWithCacheArgsForCall[i].arg4, fake.initWithCacheArgsForCall[i].arg5, fake.initWithCacheArgsForCall[i].arg6, fake.initWithCacheArgsForCall[i].arg7, fake.initWithCacheArgsForCall[i].arg8, fake.initWithCacheArgsForCall[i].arg9
}

func (fake *FakeTracker) InitWithCacheReturns(result1 resource.Resource, result2 resource.Cache, result3 error) {
	fake.InitWithCacheStub = nil
	fake.initWithCacheReturns = struct {
		result1 resource.Resource
		result2 resource.Cache
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTracker) InitWithSources(arg1 lager.Logger, arg2 resource.Metadata, arg3 resource.Session, arg4 resource.ResourceType, arg5 atc.Tags, arg6 map[string]resource.ArtifactSource, arg7 atc.ResourceTypes, arg8 worker.ImageFetchingDelegate) (resource.Resource, []string, error) {
	fake.initWithSourcesMutex.Lock()
	fake.initWithSourcesArgsForCall = append(fake.initWithSourcesArgsForCall, struct {
		arg1 lager.Logger
		arg2 resource.Metadata
		arg3 resource.Session
		arg4 resource.ResourceType
		arg5 atc.Tags
		arg6 map[string]resource.ArtifactSource
		arg7 atc.ResourceTypes
		arg8 worker.ImageFetchingDelegate
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8})
	fake.recordInvocation("InitWithSources", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8})
	fake.initWithSourcesMutex.Unlock()
	if fake.InitWithSourcesStub != nil {
		return fake.InitWithSourcesStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	} else {
		return fake.initWithSourcesReturns.result1, fake.initWithSourcesReturns.result2, fake.initWithSourcesReturns.result3
	}
}

func (fake *FakeTracker) InitWithSourcesCallCount() int {
	fake.initWithSourcesMutex.RLock()
	defer fake.initWithSourcesMutex.RUnlock()
	return len(fake.initWithSourcesArgsForCall)
}

func (fake *FakeTracker) InitWithSourcesArgsForCall(i int) (lager.Logger, resource.Metadata, resource.Session, resource.ResourceType, atc.Tags, map[string]resource.ArtifactSource, atc.ResourceTypes, worker.ImageFetchingDelegate) {
	fake.initWithSourcesMutex.RLock()
	defer fake.initWithSourcesMutex.RUnlock()
	return fake.initWithSourcesArgsForCall[i].arg1, fake.initWithSourcesArgsForCall[i].arg2, fake.initWithSourcesArgsForCall[i].arg3, fake.initWithSourcesArgsForCall[i].arg4, fake.initWithSourcesArgsForCall[i].arg5, fake.initWithSourcesArgsForCall[i].arg6, fake.initWithSourcesArgsForCall[i].arg7, fake.initWithSourcesArgsForCall[i].arg8
}

func (fake *FakeTracker) InitWithSourcesReturns(result1 resource.Resource, result2 []string, result3 error) {
	fake.InitWithSourcesStub = nil
	fake.initWithSourcesReturns = struct {
		result1 resource.Resource
		result2 []string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTracker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findContainerForSessionMutex.RLock()
	defer fake.findContainerForSessionMutex.RUnlock()
	fake.chooseWorkerMutex.RLock()
	defer fake.chooseWorkerMutex.RUnlock()
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	fake.initWithCacheMutex.RLock()
	defer fake.initWithCacheMutex.RUnlock()
	fake.initWithSourcesMutex.RLock()
	defer fake.initWithSourcesMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeTracker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resource.Tracker = new(FakeTracker)
