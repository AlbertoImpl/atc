// This file was generated by counterfeiter
package resourcefakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc/resource"
	"github.com/concourse/atc/worker"
)

type FakeResourceInstance struct {
	FindInitializedOnStub        func(lager.Logger, worker.Client) (worker.Volume, bool, error)
	findInitializedOnMutex       sync.RWMutex
	findInitializedOnArgsForCall []struct {
		arg1 lager.Logger
		arg2 worker.Client
	}
	findInitializedOnReturns struct {
		result1 worker.Volume
		result2 bool
		result3 error
	}
	CreateOnStub        func(lager.Logger, worker.Client) (worker.Volume, error)
	createOnMutex       sync.RWMutex
	createOnArgsForCall []struct {
		arg1 lager.Logger
		arg2 worker.Client
	}
	createOnReturns struct {
		result1 worker.Volume
		result2 error
	}
	ResourceCacheIdentifierStub        func() worker.ResourceCacheIdentifier
	resourceCacheIdentifierMutex       sync.RWMutex
	resourceCacheIdentifierArgsForCall []struct{}
	resourceCacheIdentifierReturns     struct {
		result1 worker.ResourceCacheIdentifier
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourceInstance) FindInitializedOn(arg1 lager.Logger, arg2 worker.Client) (worker.Volume, bool, error) {
	fake.findInitializedOnMutex.Lock()
	fake.findInitializedOnArgsForCall = append(fake.findInitializedOnArgsForCall, struct {
		arg1 lager.Logger
		arg2 worker.Client
	}{arg1, arg2})
	fake.recordInvocation("FindInitializedOn", []interface{}{arg1, arg2})
	fake.findInitializedOnMutex.Unlock()
	if fake.FindInitializedOnStub != nil {
		return fake.FindInitializedOnStub(arg1, arg2)
	}
	return fake.findInitializedOnReturns.result1, fake.findInitializedOnReturns.result2, fake.findInitializedOnReturns.result3
}

func (fake *FakeResourceInstance) FindInitializedOnCallCount() int {
	fake.findInitializedOnMutex.RLock()
	defer fake.findInitializedOnMutex.RUnlock()
	return len(fake.findInitializedOnArgsForCall)
}

func (fake *FakeResourceInstance) FindInitializedOnArgsForCall(i int) (lager.Logger, worker.Client) {
	fake.findInitializedOnMutex.RLock()
	defer fake.findInitializedOnMutex.RUnlock()
	return fake.findInitializedOnArgsForCall[i].arg1, fake.findInitializedOnArgsForCall[i].arg2
}

func (fake *FakeResourceInstance) FindInitializedOnReturns(result1 worker.Volume, result2 bool, result3 error) {
	fake.FindInitializedOnStub = nil
	fake.findInitializedOnReturns = struct {
		result1 worker.Volume
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeResourceInstance) CreateOn(arg1 lager.Logger, arg2 worker.Client) (worker.Volume, error) {
	fake.createOnMutex.Lock()
	fake.createOnArgsForCall = append(fake.createOnArgsForCall, struct {
		arg1 lager.Logger
		arg2 worker.Client
	}{arg1, arg2})
	fake.recordInvocation("CreateOn", []interface{}{arg1, arg2})
	fake.createOnMutex.Unlock()
	if fake.CreateOnStub != nil {
		return fake.CreateOnStub(arg1, arg2)
	}
	return fake.createOnReturns.result1, fake.createOnReturns.result2
}

func (fake *FakeResourceInstance) CreateOnCallCount() int {
	fake.createOnMutex.RLock()
	defer fake.createOnMutex.RUnlock()
	return len(fake.createOnArgsForCall)
}

func (fake *FakeResourceInstance) CreateOnArgsForCall(i int) (lager.Logger, worker.Client) {
	fake.createOnMutex.RLock()
	defer fake.createOnMutex.RUnlock()
	return fake.createOnArgsForCall[i].arg1, fake.createOnArgsForCall[i].arg2
}

func (fake *FakeResourceInstance) CreateOnReturns(result1 worker.Volume, result2 error) {
	fake.CreateOnStub = nil
	fake.createOnReturns = struct {
		result1 worker.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceInstance) ResourceCacheIdentifier() worker.ResourceCacheIdentifier {
	fake.resourceCacheIdentifierMutex.Lock()
	fake.resourceCacheIdentifierArgsForCall = append(fake.resourceCacheIdentifierArgsForCall, struct{}{})
	fake.recordInvocation("ResourceCacheIdentifier", []interface{}{})
	fake.resourceCacheIdentifierMutex.Unlock()
	if fake.ResourceCacheIdentifierStub != nil {
		return fake.ResourceCacheIdentifierStub()
	}
	return fake.resourceCacheIdentifierReturns.result1
}

func (fake *FakeResourceInstance) ResourceCacheIdentifierCallCount() int {
	fake.resourceCacheIdentifierMutex.RLock()
	defer fake.resourceCacheIdentifierMutex.RUnlock()
	return len(fake.resourceCacheIdentifierArgsForCall)
}

func (fake *FakeResourceInstance) ResourceCacheIdentifierReturns(result1 worker.ResourceCacheIdentifier) {
	fake.ResourceCacheIdentifierStub = nil
	fake.resourceCacheIdentifierReturns = struct {
		result1 worker.ResourceCacheIdentifier
	}{result1}
}

func (fake *FakeResourceInstance) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findInitializedOnMutex.RLock()
	defer fake.findInitializedOnMutex.RUnlock()
	fake.createOnMutex.RLock()
	defer fake.createOnMutex.RUnlock()
	fake.resourceCacheIdentifierMutex.RLock()
	defer fake.resourceCacheIdentifierMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeResourceInstance) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resource.ResourceInstance = new(FakeResourceInstance)
