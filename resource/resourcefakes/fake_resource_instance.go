// Code generated by counterfeiter. DO NOT EDIT.
package resourcefakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc/db"
	"github.com/concourse/atc/resource"
	"github.com/concourse/atc/worker"
)

type FakeResourceInstance struct {
	ResourceUserStub        func() db.ResourceUser
	resourceUserMutex       sync.RWMutex
	resourceUserArgsForCall []struct{}
	resourceUserReturns     struct {
		result1 db.ResourceUser
	}
	resourceUserReturnsOnCall map[int]struct {
		result1 db.ResourceUser
	}
	ContainerOwnerStub        func() db.ContainerOwner
	containerOwnerMutex       sync.RWMutex
	containerOwnerArgsForCall []struct{}
	containerOwnerReturns     struct {
		result1 db.ContainerOwner
	}
	containerOwnerReturnsOnCall map[int]struct {
		result1 db.ContainerOwner
	}
	FindOnStub        func(lager.Logger, worker.Client) (worker.Volume, bool, error)
	findOnMutex       sync.RWMutex
	findOnArgsForCall []struct {
		arg1 lager.Logger
		arg2 worker.Client
	}
	findOnReturns struct {
		result1 worker.Volume
		result2 bool
		result3 error
	}
	findOnReturnsOnCall map[int]struct {
		result1 worker.Volume
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourceInstance) ResourceUser() db.ResourceUser {
	fake.resourceUserMutex.Lock()
	ret, specificReturn := fake.resourceUserReturnsOnCall[len(fake.resourceUserArgsForCall)]
	fake.resourceUserArgsForCall = append(fake.resourceUserArgsForCall, struct{}{})
	fake.recordInvocation("ResourceUser", []interface{}{})
	fake.resourceUserMutex.Unlock()
	if fake.ResourceUserStub != nil {
		return fake.ResourceUserStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.resourceUserReturns.result1
}

func (fake *FakeResourceInstance) ResourceUserCallCount() int {
	fake.resourceUserMutex.RLock()
	defer fake.resourceUserMutex.RUnlock()
	return len(fake.resourceUserArgsForCall)
}

func (fake *FakeResourceInstance) ResourceUserReturns(result1 db.ResourceUser) {
	fake.ResourceUserStub = nil
	fake.resourceUserReturns = struct {
		result1 db.ResourceUser
	}{result1}
}

func (fake *FakeResourceInstance) ResourceUserReturnsOnCall(i int, result1 db.ResourceUser) {
	fake.ResourceUserStub = nil
	if fake.resourceUserReturnsOnCall == nil {
		fake.resourceUserReturnsOnCall = make(map[int]struct {
			result1 db.ResourceUser
		})
	}
	fake.resourceUserReturnsOnCall[i] = struct {
		result1 db.ResourceUser
	}{result1}
}

func (fake *FakeResourceInstance) ContainerOwner() db.ContainerOwner {
	fake.containerOwnerMutex.Lock()
	ret, specificReturn := fake.containerOwnerReturnsOnCall[len(fake.containerOwnerArgsForCall)]
	fake.containerOwnerArgsForCall = append(fake.containerOwnerArgsForCall, struct{}{})
	fake.recordInvocation("ContainerOwner", []interface{}{})
	fake.containerOwnerMutex.Unlock()
	if fake.ContainerOwnerStub != nil {
		return fake.ContainerOwnerStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.containerOwnerReturns.result1
}

func (fake *FakeResourceInstance) ContainerOwnerCallCount() int {
	fake.containerOwnerMutex.RLock()
	defer fake.containerOwnerMutex.RUnlock()
	return len(fake.containerOwnerArgsForCall)
}

func (fake *FakeResourceInstance) ContainerOwnerReturns(result1 db.ContainerOwner) {
	fake.ContainerOwnerStub = nil
	fake.containerOwnerReturns = struct {
		result1 db.ContainerOwner
	}{result1}
}

func (fake *FakeResourceInstance) ContainerOwnerReturnsOnCall(i int, result1 db.ContainerOwner) {
	fake.ContainerOwnerStub = nil
	if fake.containerOwnerReturnsOnCall == nil {
		fake.containerOwnerReturnsOnCall = make(map[int]struct {
			result1 db.ContainerOwner
		})
	}
	fake.containerOwnerReturnsOnCall[i] = struct {
		result1 db.ContainerOwner
	}{result1}
}

func (fake *FakeResourceInstance) FindOn(arg1 lager.Logger, arg2 worker.Client) (worker.Volume, bool, error) {
	fake.findOnMutex.Lock()
	ret, specificReturn := fake.findOnReturnsOnCall[len(fake.findOnArgsForCall)]
	fake.findOnArgsForCall = append(fake.findOnArgsForCall, struct {
		arg1 lager.Logger
		arg2 worker.Client
	}{arg1, arg2})
	fake.recordInvocation("FindOn", []interface{}{arg1, arg2})
	fake.findOnMutex.Unlock()
	if fake.FindOnStub != nil {
		return fake.FindOnStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.findOnReturns.result1, fake.findOnReturns.result2, fake.findOnReturns.result3
}

func (fake *FakeResourceInstance) FindOnCallCount() int {
	fake.findOnMutex.RLock()
	defer fake.findOnMutex.RUnlock()
	return len(fake.findOnArgsForCall)
}

func (fake *FakeResourceInstance) FindOnArgsForCall(i int) (lager.Logger, worker.Client) {
	fake.findOnMutex.RLock()
	defer fake.findOnMutex.RUnlock()
	return fake.findOnArgsForCall[i].arg1, fake.findOnArgsForCall[i].arg2
}

func (fake *FakeResourceInstance) FindOnReturns(result1 worker.Volume, result2 bool, result3 error) {
	fake.FindOnStub = nil
	fake.findOnReturns = struct {
		result1 worker.Volume
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeResourceInstance) FindOnReturnsOnCall(i int, result1 worker.Volume, result2 bool, result3 error) {
	fake.FindOnStub = nil
	if fake.findOnReturnsOnCall == nil {
		fake.findOnReturnsOnCall = make(map[int]struct {
			result1 worker.Volume
			result2 bool
			result3 error
		})
	}
	fake.findOnReturnsOnCall[i] = struct {
		result1 worker.Volume
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeResourceInstance) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.resourceUserMutex.RLock()
	defer fake.resourceUserMutex.RUnlock()
	fake.containerOwnerMutex.RLock()
	defer fake.containerOwnerMutex.RUnlock()
	fake.findOnMutex.RLock()
	defer fake.findOnMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResourceInstance) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resource.ResourceInstance = new(FakeResourceInstance)
