// This file was generated by counterfeiter
package resourcefakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc"
	"github.com/concourse/atc/resource"
	"github.com/concourse/atc/worker"
)

type FakeResourceFactory struct {
	NewResourceStub        func(logger lager.Logger, id worker.Identifier, metadata worker.Metadata, resourceSpec worker.ContainerSpec, resourceTypes atc.ResourceTypes, imageFetchingDelegate worker.ImageFetchingDelegate, resourceSources map[string]worker.ArtifactSource) (resource.Resource, []string, error)
	newResourceMutex       sync.RWMutex
	newResourceArgsForCall []struct {
		logger                lager.Logger
		id                    worker.Identifier
		metadata              worker.Metadata
		resourceSpec          worker.ContainerSpec
		resourceTypes         atc.ResourceTypes
		imageFetchingDelegate worker.ImageFetchingDelegate
		resourceSources       map[string]worker.ArtifactSource
	}
	newResourceReturns struct {
		result1 resource.Resource
		result2 []string
		result3 error
	}
	NewBuildResourceStub        func(logger lager.Logger, id worker.Identifier, metadata worker.Metadata, containerSpec worker.ContainerSpec, resourceTypes atc.ResourceTypes, imageFetchingDelegate worker.ImageFetchingDelegate, inputSources []resource.InputSource, outputPaths map[string]string) (resource.Resource, []resource.InputSource, error)
	newBuildResourceMutex       sync.RWMutex
	newBuildResourceArgsForCall []struct {
		logger                lager.Logger
		id                    worker.Identifier
		metadata              worker.Metadata
		containerSpec         worker.ContainerSpec
		resourceTypes         atc.ResourceTypes
		imageFetchingDelegate worker.ImageFetchingDelegate
		inputSources          []resource.InputSource
		outputPaths           map[string]string
	}
	newBuildResourceReturns struct {
		result1 resource.Resource
		result2 []resource.InputSource
		result3 error
	}
	NewCheckResourceStub        func(logger lager.Logger, id worker.Identifier, metadata worker.Metadata, resourceSpec worker.ContainerSpec, resourceTypes atc.ResourceTypes) (resource.Resource, error)
	newCheckResourceMutex       sync.RWMutex
	newCheckResourceArgsForCall []struct {
		logger        lager.Logger
		id            worker.Identifier
		metadata      worker.Metadata
		resourceSpec  worker.ContainerSpec
		resourceTypes atc.ResourceTypes
	}
	newCheckResourceReturns struct {
		result1 resource.Resource
		result2 error
	}
	NewCheckResourceForResourceTypeStub        func(logger lager.Logger, id worker.Identifier, metadata worker.Metadata, resourceSpec worker.ContainerSpec, resourceTypes atc.ResourceTypes) (resource.Resource, error)
	newCheckResourceForResourceTypeMutex       sync.RWMutex
	newCheckResourceForResourceTypeArgsForCall []struct {
		logger        lager.Logger
		id            worker.Identifier
		metadata      worker.Metadata
		resourceSpec  worker.ContainerSpec
		resourceTypes atc.ResourceTypes
	}
	newCheckResourceForResourceTypeReturns struct {
		result1 resource.Resource
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourceFactory) NewResource(logger lager.Logger, id worker.Identifier, metadata worker.Metadata, resourceSpec worker.ContainerSpec, resourceTypes atc.ResourceTypes, imageFetchingDelegate worker.ImageFetchingDelegate, resourceSources map[string]worker.ArtifactSource) (resource.Resource, []string, error) {
	fake.newResourceMutex.Lock()
	fake.newResourceArgsForCall = append(fake.newResourceArgsForCall, struct {
		logger                lager.Logger
		id                    worker.Identifier
		metadata              worker.Metadata
		resourceSpec          worker.ContainerSpec
		resourceTypes         atc.ResourceTypes
		imageFetchingDelegate worker.ImageFetchingDelegate
		resourceSources       map[string]worker.ArtifactSource
	}{logger, id, metadata, resourceSpec, resourceTypes, imageFetchingDelegate, resourceSources})
	fake.recordInvocation("NewResource", []interface{}{logger, id, metadata, resourceSpec, resourceTypes, imageFetchingDelegate, resourceSources})
	fake.newResourceMutex.Unlock()
	if fake.NewResourceStub != nil {
		return fake.NewResourceStub(logger, id, metadata, resourceSpec, resourceTypes, imageFetchingDelegate, resourceSources)
	} else {
		return fake.newResourceReturns.result1, fake.newResourceReturns.result2, fake.newResourceReturns.result3
	}
}

func (fake *FakeResourceFactory) NewResourceCallCount() int {
	fake.newResourceMutex.RLock()
	defer fake.newResourceMutex.RUnlock()
	return len(fake.newResourceArgsForCall)
}

func (fake *FakeResourceFactory) NewResourceArgsForCall(i int) (lager.Logger, worker.Identifier, worker.Metadata, worker.ContainerSpec, atc.ResourceTypes, worker.ImageFetchingDelegate, map[string]worker.ArtifactSource) {
	fake.newResourceMutex.RLock()
	defer fake.newResourceMutex.RUnlock()
	return fake.newResourceArgsForCall[i].logger, fake.newResourceArgsForCall[i].id, fake.newResourceArgsForCall[i].metadata, fake.newResourceArgsForCall[i].resourceSpec, fake.newResourceArgsForCall[i].resourceTypes, fake.newResourceArgsForCall[i].imageFetchingDelegate, fake.newResourceArgsForCall[i].resourceSources
}

func (fake *FakeResourceFactory) NewResourceReturns(result1 resource.Resource, result2 []string, result3 error) {
	fake.NewResourceStub = nil
	fake.newResourceReturns = struct {
		result1 resource.Resource
		result2 []string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeResourceFactory) NewBuildResource(logger lager.Logger, id worker.Identifier, metadata worker.Metadata, containerSpec worker.ContainerSpec, resourceTypes atc.ResourceTypes, imageFetchingDelegate worker.ImageFetchingDelegate, inputSources []resource.InputSource, outputPaths map[string]string) (resource.Resource, []resource.InputSource, error) {
	var inputSourcesCopy []resource.InputSource
	if inputSources != nil {
		inputSourcesCopy = make([]resource.InputSource, len(inputSources))
		copy(inputSourcesCopy, inputSources)
	}
	fake.newBuildResourceMutex.Lock()
	fake.newBuildResourceArgsForCall = append(fake.newBuildResourceArgsForCall, struct {
		logger                lager.Logger
		id                    worker.Identifier
		metadata              worker.Metadata
		containerSpec         worker.ContainerSpec
		resourceTypes         atc.ResourceTypes
		imageFetchingDelegate worker.ImageFetchingDelegate
		inputSources          []resource.InputSource
		outputPaths           map[string]string
	}{logger, id, metadata, containerSpec, resourceTypes, imageFetchingDelegate, inputSourcesCopy, outputPaths})
	fake.recordInvocation("NewBuildResource", []interface{}{logger, id, metadata, containerSpec, resourceTypes, imageFetchingDelegate, inputSourcesCopy, outputPaths})
	fake.newBuildResourceMutex.Unlock()
	if fake.NewBuildResourceStub != nil {
		return fake.NewBuildResourceStub(logger, id, metadata, containerSpec, resourceTypes, imageFetchingDelegate, inputSources, outputPaths)
	} else {
		return fake.newBuildResourceReturns.result1, fake.newBuildResourceReturns.result2, fake.newBuildResourceReturns.result3
	}
}

func (fake *FakeResourceFactory) NewBuildResourceCallCount() int {
	fake.newBuildResourceMutex.RLock()
	defer fake.newBuildResourceMutex.RUnlock()
	return len(fake.newBuildResourceArgsForCall)
}

func (fake *FakeResourceFactory) NewBuildResourceArgsForCall(i int) (lager.Logger, worker.Identifier, worker.Metadata, worker.ContainerSpec, atc.ResourceTypes, worker.ImageFetchingDelegate, []resource.InputSource, map[string]string) {
	fake.newBuildResourceMutex.RLock()
	defer fake.newBuildResourceMutex.RUnlock()
	return fake.newBuildResourceArgsForCall[i].logger, fake.newBuildResourceArgsForCall[i].id, fake.newBuildResourceArgsForCall[i].metadata, fake.newBuildResourceArgsForCall[i].containerSpec, fake.newBuildResourceArgsForCall[i].resourceTypes, fake.newBuildResourceArgsForCall[i].imageFetchingDelegate, fake.newBuildResourceArgsForCall[i].inputSources, fake.newBuildResourceArgsForCall[i].outputPaths
}

func (fake *FakeResourceFactory) NewBuildResourceReturns(result1 resource.Resource, result2 []resource.InputSource, result3 error) {
	fake.NewBuildResourceStub = nil
	fake.newBuildResourceReturns = struct {
		result1 resource.Resource
		result2 []resource.InputSource
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeResourceFactory) NewCheckResource(logger lager.Logger, id worker.Identifier, metadata worker.Metadata, resourceSpec worker.ContainerSpec, resourceTypes atc.ResourceTypes) (resource.Resource, error) {
	fake.newCheckResourceMutex.Lock()
	fake.newCheckResourceArgsForCall = append(fake.newCheckResourceArgsForCall, struct {
		logger        lager.Logger
		id            worker.Identifier
		metadata      worker.Metadata
		resourceSpec  worker.ContainerSpec
		resourceTypes atc.ResourceTypes
	}{logger, id, metadata, resourceSpec, resourceTypes})
	fake.recordInvocation("NewCheckResource", []interface{}{logger, id, metadata, resourceSpec, resourceTypes})
	fake.newCheckResourceMutex.Unlock()
	if fake.NewCheckResourceStub != nil {
		return fake.NewCheckResourceStub(logger, id, metadata, resourceSpec, resourceTypes)
	} else {
		return fake.newCheckResourceReturns.result1, fake.newCheckResourceReturns.result2
	}
}

func (fake *FakeResourceFactory) NewCheckResourceCallCount() int {
	fake.newCheckResourceMutex.RLock()
	defer fake.newCheckResourceMutex.RUnlock()
	return len(fake.newCheckResourceArgsForCall)
}

func (fake *FakeResourceFactory) NewCheckResourceArgsForCall(i int) (lager.Logger, worker.Identifier, worker.Metadata, worker.ContainerSpec, atc.ResourceTypes) {
	fake.newCheckResourceMutex.RLock()
	defer fake.newCheckResourceMutex.RUnlock()
	return fake.newCheckResourceArgsForCall[i].logger, fake.newCheckResourceArgsForCall[i].id, fake.newCheckResourceArgsForCall[i].metadata, fake.newCheckResourceArgsForCall[i].resourceSpec, fake.newCheckResourceArgsForCall[i].resourceTypes
}

func (fake *FakeResourceFactory) NewCheckResourceReturns(result1 resource.Resource, result2 error) {
	fake.NewCheckResourceStub = nil
	fake.newCheckResourceReturns = struct {
		result1 resource.Resource
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceFactory) NewCheckResourceForResourceType(logger lager.Logger, id worker.Identifier, metadata worker.Metadata, resourceSpec worker.ContainerSpec, resourceTypes atc.ResourceTypes) (resource.Resource, error) {
	fake.newCheckResourceForResourceTypeMutex.Lock()
	fake.newCheckResourceForResourceTypeArgsForCall = append(fake.newCheckResourceForResourceTypeArgsForCall, struct {
		logger        lager.Logger
		id            worker.Identifier
		metadata      worker.Metadata
		resourceSpec  worker.ContainerSpec
		resourceTypes atc.ResourceTypes
	}{logger, id, metadata, resourceSpec, resourceTypes})
	fake.recordInvocation("NewCheckResourceForResourceType", []interface{}{logger, id, metadata, resourceSpec, resourceTypes})
	fake.newCheckResourceForResourceTypeMutex.Unlock()
	if fake.NewCheckResourceForResourceTypeStub != nil {
		return fake.NewCheckResourceForResourceTypeStub(logger, id, metadata, resourceSpec, resourceTypes)
	} else {
		return fake.newCheckResourceForResourceTypeReturns.result1, fake.newCheckResourceForResourceTypeReturns.result2
	}
}

func (fake *FakeResourceFactory) NewCheckResourceForResourceTypeCallCount() int {
	fake.newCheckResourceForResourceTypeMutex.RLock()
	defer fake.newCheckResourceForResourceTypeMutex.RUnlock()
	return len(fake.newCheckResourceForResourceTypeArgsForCall)
}

func (fake *FakeResourceFactory) NewCheckResourceForResourceTypeArgsForCall(i int) (lager.Logger, worker.Identifier, worker.Metadata, worker.ContainerSpec, atc.ResourceTypes) {
	fake.newCheckResourceForResourceTypeMutex.RLock()
	defer fake.newCheckResourceForResourceTypeMutex.RUnlock()
	return fake.newCheckResourceForResourceTypeArgsForCall[i].logger, fake.newCheckResourceForResourceTypeArgsForCall[i].id, fake.newCheckResourceForResourceTypeArgsForCall[i].metadata, fake.newCheckResourceForResourceTypeArgsForCall[i].resourceSpec, fake.newCheckResourceForResourceTypeArgsForCall[i].resourceTypes
}

func (fake *FakeResourceFactory) NewCheckResourceForResourceTypeReturns(result1 resource.Resource, result2 error) {
	fake.NewCheckResourceForResourceTypeStub = nil
	fake.newCheckResourceForResourceTypeReturns = struct {
		result1 resource.Resource
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newResourceMutex.RLock()
	defer fake.newResourceMutex.RUnlock()
	fake.newBuildResourceMutex.RLock()
	defer fake.newBuildResourceMutex.RUnlock()
	fake.newCheckResourceMutex.RLock()
	defer fake.newCheckResourceMutex.RUnlock()
	fake.newCheckResourceForResourceTypeMutex.RLock()
	defer fake.newCheckResourceForResourceTypeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeResourceFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resource.ResourceFactory = new(FakeResourceFactory)
