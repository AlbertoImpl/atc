// This file was generated by counterfeiter
package resourcefakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc"
	"github.com/concourse/atc/resource"
	"github.com/concourse/atc/worker"
)

type FakeResourceFactory struct {
	NewPutResourceStub        func(logger lager.Logger, metadata resource.Metadata, session resource.Session, typ resource.ResourceType, tags atc.Tags, teamID int, sources map[string]resource.ArtifactSource, resourceTypes atc.ResourceTypes, imageFetchingDelegate worker.ImageFetchingDelegate) (resource.Resource, []string, error)
	newPutResourceMutex       sync.RWMutex
	newPutResourceArgsForCall []struct {
		logger                lager.Logger
		metadata              resource.Metadata
		session               resource.Session
		typ                   resource.ResourceType
		tags                  atc.Tags
		teamID                int
		sources               map[string]resource.ArtifactSource
		resourceTypes         atc.ResourceTypes
		imageFetchingDelegate worker.ImageFetchingDelegate
	}
	newPutResourceReturns struct {
		result1 resource.Resource
		result2 []string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourceFactory) NewPutResource(logger lager.Logger, metadata resource.Metadata, session resource.Session, typ resource.ResourceType, tags atc.Tags, teamID int, sources map[string]resource.ArtifactSource, resourceTypes atc.ResourceTypes, imageFetchingDelegate worker.ImageFetchingDelegate) (resource.Resource, []string, error) {
	fake.newPutResourceMutex.Lock()
	fake.newPutResourceArgsForCall = append(fake.newPutResourceArgsForCall, struct {
		logger                lager.Logger
		metadata              resource.Metadata
		session               resource.Session
		typ                   resource.ResourceType
		tags                  atc.Tags
		teamID                int
		sources               map[string]resource.ArtifactSource
		resourceTypes         atc.ResourceTypes
		imageFetchingDelegate worker.ImageFetchingDelegate
	}{logger, metadata, session, typ, tags, teamID, sources, resourceTypes, imageFetchingDelegate})
	fake.recordInvocation("NewPutResource", []interface{}{logger, metadata, session, typ, tags, teamID, sources, resourceTypes, imageFetchingDelegate})
	fake.newPutResourceMutex.Unlock()
	if fake.NewPutResourceStub != nil {
		return fake.NewPutResourceStub(logger, metadata, session, typ, tags, teamID, sources, resourceTypes, imageFetchingDelegate)
	} else {
		return fake.newPutResourceReturns.result1, fake.newPutResourceReturns.result2, fake.newPutResourceReturns.result3
	}
}

func (fake *FakeResourceFactory) NewPutResourceCallCount() int {
	fake.newPutResourceMutex.RLock()
	defer fake.newPutResourceMutex.RUnlock()
	return len(fake.newPutResourceArgsForCall)
}

func (fake *FakeResourceFactory) NewPutResourceArgsForCall(i int) (lager.Logger, resource.Metadata, resource.Session, resource.ResourceType, atc.Tags, int, map[string]resource.ArtifactSource, atc.ResourceTypes, worker.ImageFetchingDelegate) {
	fake.newPutResourceMutex.RLock()
	defer fake.newPutResourceMutex.RUnlock()
	return fake.newPutResourceArgsForCall[i].logger, fake.newPutResourceArgsForCall[i].metadata, fake.newPutResourceArgsForCall[i].session, fake.newPutResourceArgsForCall[i].typ, fake.newPutResourceArgsForCall[i].tags, fake.newPutResourceArgsForCall[i].teamID, fake.newPutResourceArgsForCall[i].sources, fake.newPutResourceArgsForCall[i].resourceTypes, fake.newPutResourceArgsForCall[i].imageFetchingDelegate
}

func (fake *FakeResourceFactory) NewPutResourceReturns(result1 resource.Resource, result2 []string, result3 error) {
	fake.NewPutResourceStub = nil
	fake.newPutResourceReturns = struct {
		result1 resource.Resource
		result2 []string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeResourceFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newPutResourceMutex.RLock()
	defer fake.newPutResourceMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeResourceFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resource.ResourceFactory = new(FakeResourceFactory)
