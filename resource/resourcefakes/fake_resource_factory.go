// This file was generated by counterfeiter
package resourcefakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc"
	"github.com/concourse/atc/resource"
	"github.com/concourse/atc/worker"
)

type FakeResourceFactory struct {
	NewResourceStub        func(logger lager.Logger, id worker.Identifier, metadata worker.Metadata, resourceSpec worker.ContainerSpec, resourceTypes atc.ResourceTypes, imageFetchingDelegate worker.ImageFetchingDelegate, resourceSources map[string]worker.ArtifactSource) (resource.Resource, []string, error)
	newResourceMutex       sync.RWMutex
	newResourceArgsForCall []struct {
		logger                lager.Logger
		id                    worker.Identifier
		metadata              worker.Metadata
		resourceSpec          worker.ContainerSpec
		resourceTypes         atc.ResourceTypes
		imageFetchingDelegate worker.ImageFetchingDelegate
		resourceSources       map[string]worker.ArtifactSource
	}
	newResourceReturns struct {
		result1 resource.Resource
		result2 []string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourceFactory) NewResource(logger lager.Logger, id worker.Identifier, metadata worker.Metadata, resourceSpec worker.ContainerSpec, resourceTypes atc.ResourceTypes, imageFetchingDelegate worker.ImageFetchingDelegate, resourceSources map[string]worker.ArtifactSource) (resource.Resource, []string, error) {
	fake.newResourceMutex.Lock()
	fake.newResourceArgsForCall = append(fake.newResourceArgsForCall, struct {
		logger                lager.Logger
		id                    worker.Identifier
		metadata              worker.Metadata
		resourceSpec          worker.ContainerSpec
		resourceTypes         atc.ResourceTypes
		imageFetchingDelegate worker.ImageFetchingDelegate
		resourceSources       map[string]worker.ArtifactSource
	}{logger, id, metadata, resourceSpec, resourceTypes, imageFetchingDelegate, resourceSources})
	fake.recordInvocation("NewResource", []interface{}{logger, id, metadata, resourceSpec, resourceTypes, imageFetchingDelegate, resourceSources})
	fake.newResourceMutex.Unlock()
	if fake.NewResourceStub != nil {
		return fake.NewResourceStub(logger, id, metadata, resourceSpec, resourceTypes, imageFetchingDelegate, resourceSources)
	} else {
		return fake.newResourceReturns.result1, fake.newResourceReturns.result2, fake.newResourceReturns.result3
	}
}

func (fake *FakeResourceFactory) NewResourceCallCount() int {
	fake.newResourceMutex.RLock()
	defer fake.newResourceMutex.RUnlock()
	return len(fake.newResourceArgsForCall)
}

func (fake *FakeResourceFactory) NewResourceArgsForCall(i int) (lager.Logger, worker.Identifier, worker.Metadata, worker.ContainerSpec, atc.ResourceTypes, worker.ImageFetchingDelegate, map[string]worker.ArtifactSource) {
	fake.newResourceMutex.RLock()
	defer fake.newResourceMutex.RUnlock()
	return fake.newResourceArgsForCall[i].logger, fake.newResourceArgsForCall[i].id, fake.newResourceArgsForCall[i].metadata, fake.newResourceArgsForCall[i].resourceSpec, fake.newResourceArgsForCall[i].resourceTypes, fake.newResourceArgsForCall[i].imageFetchingDelegate, fake.newResourceArgsForCall[i].resourceSources
}

func (fake *FakeResourceFactory) NewResourceReturns(result1 resource.Resource, result2 []string, result3 error) {
	fake.NewResourceStub = nil
	fake.newResourceReturns = struct {
		result1 resource.Resource
		result2 []string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeResourceFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newResourceMutex.RLock()
	defer fake.newResourceMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeResourceFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resource.ResourceFactory = new(FakeResourceFactory)
