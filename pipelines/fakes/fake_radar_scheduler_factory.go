// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/db"
	"github.com/concourse/atc/pipelines"
	"github.com/concourse/atc/radar"
	"github.com/concourse/atc/scheduler"
)

type FakeRadarSchedulerFactory struct {
	BuildScannerFactoryStub        func(pipelineDB db.PipelineDB, externalURL string) radar.ScannerFactory
	buildScannerFactoryMutex       sync.RWMutex
	buildScannerFactoryArgsForCall []struct {
		pipelineDB  db.PipelineDB
		externalURL string
	}
	buildScannerFactoryReturns struct {
		result1 radar.ScannerFactory
	}
	BuildSchedulerStub        func(pipelineDB db.PipelineDB, externalURL string) scheduler.BuildScheduler
	buildSchedulerMutex       sync.RWMutex
	buildSchedulerArgsForCall []struct {
		pipelineDB  db.PipelineDB
		externalURL string
	}
	buildSchedulerReturns struct {
		result1 scheduler.BuildScheduler
	}
}

func (fake *FakeRadarSchedulerFactory) BuildScannerFactory(pipelineDB db.PipelineDB, externalURL string) radar.ScannerFactory {
	fake.buildScannerFactoryMutex.Lock()
	fake.buildScannerFactoryArgsForCall = append(fake.buildScannerFactoryArgsForCall, struct {
		pipelineDB  db.PipelineDB
		externalURL string
	}{pipelineDB, externalURL})
	fake.buildScannerFactoryMutex.Unlock()
	if fake.BuildScannerFactoryStub != nil {
		return fake.BuildScannerFactoryStub(pipelineDB, externalURL)
	} else {
		return fake.buildScannerFactoryReturns.result1
	}
}

func (fake *FakeRadarSchedulerFactory) BuildScannerFactoryCallCount() int {
	fake.buildScannerFactoryMutex.RLock()
	defer fake.buildScannerFactoryMutex.RUnlock()
	return len(fake.buildScannerFactoryArgsForCall)
}

func (fake *FakeRadarSchedulerFactory) BuildScannerFactoryArgsForCall(i int) (db.PipelineDB, string) {
	fake.buildScannerFactoryMutex.RLock()
	defer fake.buildScannerFactoryMutex.RUnlock()
	return fake.buildScannerFactoryArgsForCall[i].pipelineDB, fake.buildScannerFactoryArgsForCall[i].externalURL
}

func (fake *FakeRadarSchedulerFactory) BuildScannerFactoryReturns(result1 radar.ScannerFactory) {
	fake.BuildScannerFactoryStub = nil
	fake.buildScannerFactoryReturns = struct {
		result1 radar.ScannerFactory
	}{result1}
}

func (fake *FakeRadarSchedulerFactory) BuildScheduler(pipelineDB db.PipelineDB, externalURL string) scheduler.BuildScheduler {
	fake.buildSchedulerMutex.Lock()
	fake.buildSchedulerArgsForCall = append(fake.buildSchedulerArgsForCall, struct {
		pipelineDB  db.PipelineDB
		externalURL string
	}{pipelineDB, externalURL})
	fake.buildSchedulerMutex.Unlock()
	if fake.BuildSchedulerStub != nil {
		return fake.BuildSchedulerStub(pipelineDB, externalURL)
	} else {
		return fake.buildSchedulerReturns.result1
	}
}

func (fake *FakeRadarSchedulerFactory) BuildSchedulerCallCount() int {
	fake.buildSchedulerMutex.RLock()
	defer fake.buildSchedulerMutex.RUnlock()
	return len(fake.buildSchedulerArgsForCall)
}

func (fake *FakeRadarSchedulerFactory) BuildSchedulerArgsForCall(i int) (db.PipelineDB, string) {
	fake.buildSchedulerMutex.RLock()
	defer fake.buildSchedulerMutex.RUnlock()
	return fake.buildSchedulerArgsForCall[i].pipelineDB, fake.buildSchedulerArgsForCall[i].externalURL
}

func (fake *FakeRadarSchedulerFactory) BuildSchedulerReturns(result1 scheduler.BuildScheduler) {
	fake.BuildSchedulerStub = nil
	fake.buildSchedulerReturns = struct {
		result1 scheduler.BuildScheduler
	}{result1}
}

var _ pipelines.RadarSchedulerFactory = new(FakeRadarSchedulerFactory)
