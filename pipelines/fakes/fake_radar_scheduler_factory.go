// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/db"
	"github.com/concourse/atc/pipelines"
	"github.com/concourse/atc/radar"
	"github.com/concourse/atc/scheduler"
)

type FakeRadarSchedulerFactory struct {
	BuildRadarStub        func(pipelineDB db.PipelineDB, externalURL string) *radar.Radar
	buildRadarMutex       sync.RWMutex
	buildRadarArgsForCall []struct {
		pipelineDB  db.PipelineDB
		externalURL string
	}
	buildRadarReturns struct {
		result1 *radar.Radar
	}
	BuildSchedulerStub        func(pipelineDB db.PipelineDB, externalURL string) scheduler.BuildScheduler
	buildSchedulerMutex       sync.RWMutex
	buildSchedulerArgsForCall []struct {
		pipelineDB  db.PipelineDB
		externalURL string
	}
	buildSchedulerReturns struct {
		result1 scheduler.BuildScheduler
	}
}

func (fake *FakeRadarSchedulerFactory) BuildRadar(pipelineDB db.PipelineDB, externalURL string) *radar.Radar {
	fake.buildRadarMutex.Lock()
	fake.buildRadarArgsForCall = append(fake.buildRadarArgsForCall, struct {
		pipelineDB  db.PipelineDB
		externalURL string
	}{pipelineDB, externalURL})
	fake.buildRadarMutex.Unlock()
	if fake.BuildRadarStub != nil {
		return fake.BuildRadarStub(pipelineDB, externalURL)
	} else {
		return fake.buildRadarReturns.result1
	}
}

func (fake *FakeRadarSchedulerFactory) BuildRadarCallCount() int {
	fake.buildRadarMutex.RLock()
	defer fake.buildRadarMutex.RUnlock()
	return len(fake.buildRadarArgsForCall)
}

func (fake *FakeRadarSchedulerFactory) BuildRadarArgsForCall(i int) (db.PipelineDB, string) {
	fake.buildRadarMutex.RLock()
	defer fake.buildRadarMutex.RUnlock()
	return fake.buildRadarArgsForCall[i].pipelineDB, fake.buildRadarArgsForCall[i].externalURL
}

func (fake *FakeRadarSchedulerFactory) BuildRadarReturns(result1 *radar.Radar) {
	fake.BuildRadarStub = nil
	fake.buildRadarReturns = struct {
		result1 *radar.Radar
	}{result1}
}

func (fake *FakeRadarSchedulerFactory) BuildScheduler(pipelineDB db.PipelineDB, externalURL string) scheduler.BuildScheduler {
	fake.buildSchedulerMutex.Lock()
	fake.buildSchedulerArgsForCall = append(fake.buildSchedulerArgsForCall, struct {
		pipelineDB  db.PipelineDB
		externalURL string
	}{pipelineDB, externalURL})
	fake.buildSchedulerMutex.Unlock()
	if fake.BuildSchedulerStub != nil {
		return fake.BuildSchedulerStub(pipelineDB, externalURL)
	} else {
		return fake.buildSchedulerReturns.result1
	}
}

func (fake *FakeRadarSchedulerFactory) BuildSchedulerCallCount() int {
	fake.buildSchedulerMutex.RLock()
	defer fake.buildSchedulerMutex.RUnlock()
	return len(fake.buildSchedulerArgsForCall)
}

func (fake *FakeRadarSchedulerFactory) BuildSchedulerArgsForCall(i int) (db.PipelineDB, string) {
	fake.buildSchedulerMutex.RLock()
	defer fake.buildSchedulerMutex.RUnlock()
	return fake.buildSchedulerArgsForCall[i].pipelineDB, fake.buildSchedulerArgsForCall[i].externalURL
}

func (fake *FakeRadarSchedulerFactory) BuildSchedulerReturns(result1 scheduler.BuildScheduler) {
	fake.BuildSchedulerStub = nil
	fake.buildSchedulerReturns = struct {
		result1 scheduler.BuildScheduler
	}{result1}
}

var _ pipelines.RadarSchedulerFactory = new(FakeRadarSchedulerFactory)
