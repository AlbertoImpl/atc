// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/db"
	"github.com/concourse/atc/pipelines"
)

type FakePipelinesDB struct {
	GetAllPipelinesStub        func() ([]db.SavedPipeline, error)
	getAllPipelinesMutex       sync.RWMutex
	getAllPipelinesArgsForCall []struct{}
	getAllPipelinesReturns     struct {
		result1 []db.SavedPipeline
		result2 error
	}
	GetBuildPrepsForPendingBuildsForPipelineStub        func(pipelineName string) ([]db.BuildPreparation, error)
	getBuildPrepsForPendingBuildsForPipelineMutex       sync.RWMutex
	getBuildPrepsForPendingBuildsForPipelineArgsForCall []struct {
		pipelineName string
	}
	getBuildPrepsForPendingBuildsForPipelineReturns struct {
		result1 []db.BuildPreparation
		result2 error
	}
	UpdateBuildPreparationStub        func(buildPreparation db.BuildPreparation) error
	updateBuildPreparationMutex       sync.RWMutex
	updateBuildPreparationArgsForCall []struct {
		buildPreparation db.BuildPreparation
	}
	updateBuildPreparationReturns struct {
		result1 error
	}
}

func (fake *FakePipelinesDB) GetAllPipelines() ([]db.SavedPipeline, error) {
	fake.getAllPipelinesMutex.Lock()
	fake.getAllPipelinesArgsForCall = append(fake.getAllPipelinesArgsForCall, struct{}{})
	fake.getAllPipelinesMutex.Unlock()
	if fake.GetAllPipelinesStub != nil {
		return fake.GetAllPipelinesStub()
	} else {
		return fake.getAllPipelinesReturns.result1, fake.getAllPipelinesReturns.result2
	}
}

func (fake *FakePipelinesDB) GetAllPipelinesCallCount() int {
	fake.getAllPipelinesMutex.RLock()
	defer fake.getAllPipelinesMutex.RUnlock()
	return len(fake.getAllPipelinesArgsForCall)
}

func (fake *FakePipelinesDB) GetAllPipelinesReturns(result1 []db.SavedPipeline, result2 error) {
	fake.GetAllPipelinesStub = nil
	fake.getAllPipelinesReturns = struct {
		result1 []db.SavedPipeline
		result2 error
	}{result1, result2}
}

func (fake *FakePipelinesDB) GetBuildPrepsForPendingBuildsForPipeline(pipelineName string) ([]db.BuildPreparation, error) {
	fake.getBuildPrepsForPendingBuildsForPipelineMutex.Lock()
	fake.getBuildPrepsForPendingBuildsForPipelineArgsForCall = append(fake.getBuildPrepsForPendingBuildsForPipelineArgsForCall, struct {
		pipelineName string
	}{pipelineName})
	fake.getBuildPrepsForPendingBuildsForPipelineMutex.Unlock()
	if fake.GetBuildPrepsForPendingBuildsForPipelineStub != nil {
		return fake.GetBuildPrepsForPendingBuildsForPipelineStub(pipelineName)
	} else {
		return fake.getBuildPrepsForPendingBuildsForPipelineReturns.result1, fake.getBuildPrepsForPendingBuildsForPipelineReturns.result2
	}
}

func (fake *FakePipelinesDB) GetBuildPrepsForPendingBuildsForPipelineCallCount() int {
	fake.getBuildPrepsForPendingBuildsForPipelineMutex.RLock()
	defer fake.getBuildPrepsForPendingBuildsForPipelineMutex.RUnlock()
	return len(fake.getBuildPrepsForPendingBuildsForPipelineArgsForCall)
}

func (fake *FakePipelinesDB) GetBuildPrepsForPendingBuildsForPipelineArgsForCall(i int) string {
	fake.getBuildPrepsForPendingBuildsForPipelineMutex.RLock()
	defer fake.getBuildPrepsForPendingBuildsForPipelineMutex.RUnlock()
	return fake.getBuildPrepsForPendingBuildsForPipelineArgsForCall[i].pipelineName
}

func (fake *FakePipelinesDB) GetBuildPrepsForPendingBuildsForPipelineReturns(result1 []db.BuildPreparation, result2 error) {
	fake.GetBuildPrepsForPendingBuildsForPipelineStub = nil
	fake.getBuildPrepsForPendingBuildsForPipelineReturns = struct {
		result1 []db.BuildPreparation
		result2 error
	}{result1, result2}
}

func (fake *FakePipelinesDB) UpdateBuildPreparation(buildPreparation db.BuildPreparation) error {
	fake.updateBuildPreparationMutex.Lock()
	fake.updateBuildPreparationArgsForCall = append(fake.updateBuildPreparationArgsForCall, struct {
		buildPreparation db.BuildPreparation
	}{buildPreparation})
	fake.updateBuildPreparationMutex.Unlock()
	if fake.UpdateBuildPreparationStub != nil {
		return fake.UpdateBuildPreparationStub(buildPreparation)
	} else {
		return fake.updateBuildPreparationReturns.result1
	}
}

func (fake *FakePipelinesDB) UpdateBuildPreparationCallCount() int {
	fake.updateBuildPreparationMutex.RLock()
	defer fake.updateBuildPreparationMutex.RUnlock()
	return len(fake.updateBuildPreparationArgsForCall)
}

func (fake *FakePipelinesDB) UpdateBuildPreparationArgsForCall(i int) db.BuildPreparation {
	fake.updateBuildPreparationMutex.RLock()
	defer fake.updateBuildPreparationMutex.RUnlock()
	return fake.updateBuildPreparationArgsForCall[i].buildPreparation
}

func (fake *FakePipelinesDB) UpdateBuildPreparationReturns(result1 error) {
	fake.UpdateBuildPreparationStub = nil
	fake.updateBuildPreparationReturns = struct {
		result1 error
	}{result1}
}

var _ pipelines.PipelinesDB = new(FakePipelinesDB)
