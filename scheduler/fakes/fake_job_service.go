// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/db"
	"github.com/concourse/atc/scheduler"
)

type FakeJobService struct {
	CanBuildBeScheduledStub        func(build db.Build, buildPrep *db.BuildPreparation) (bool, string, error)
	canBuildBeScheduledMutex       sync.RWMutex
	canBuildBeScheduledArgsForCall []struct {
		build     db.Build
		buildPrep *db.BuildPreparation
	}
	canBuildBeScheduledReturns struct {
		result1 bool
		result2 string
		result3 error
	}
}

func (fake *FakeJobService) CanBuildBeScheduled(build db.Build, buildPrep *db.BuildPreparation) (bool, string, error) {
	fake.canBuildBeScheduledMutex.Lock()
	fake.canBuildBeScheduledArgsForCall = append(fake.canBuildBeScheduledArgsForCall, struct {
		build     db.Build
		buildPrep *db.BuildPreparation
	}{build, buildPrep})
	fake.canBuildBeScheduledMutex.Unlock()
	if fake.CanBuildBeScheduledStub != nil {
		return fake.CanBuildBeScheduledStub(build, buildPrep)
	} else {
		return fake.canBuildBeScheduledReturns.result1, fake.canBuildBeScheduledReturns.result2, fake.canBuildBeScheduledReturns.result3
	}
}

func (fake *FakeJobService) CanBuildBeScheduledCallCount() int {
	fake.canBuildBeScheduledMutex.RLock()
	defer fake.canBuildBeScheduledMutex.RUnlock()
	return len(fake.canBuildBeScheduledArgsForCall)
}

func (fake *FakeJobService) CanBuildBeScheduledArgsForCall(i int) (db.Build, *db.BuildPreparation) {
	fake.canBuildBeScheduledMutex.RLock()
	defer fake.canBuildBeScheduledMutex.RUnlock()
	return fake.canBuildBeScheduledArgsForCall[i].build, fake.canBuildBeScheduledArgsForCall[i].buildPrep
}

func (fake *FakeJobService) CanBuildBeScheduledReturns(result1 bool, result2 string, result3 error) {
	fake.CanBuildBeScheduledStub = nil
	fake.canBuildBeScheduledReturns = struct {
		result1 bool
		result2 string
		result3 error
	}{result1, result2, result3}
}

var _ scheduler.JobService = new(FakeJobService)
