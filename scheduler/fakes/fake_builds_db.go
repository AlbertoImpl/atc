// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"time"

	"github.com/concourse/atc/db"
	"github.com/concourse/atc/scheduler"
)

type FakeBuildsDB struct {
	LeaseBuildSchedulingStub        func(buildID int, interval time.Duration) (db.Lease, bool, error)
	leaseBuildSchedulingMutex       sync.RWMutex
	leaseBuildSchedulingArgsForCall []struct {
		buildID  int
		interval time.Duration
	}
	leaseBuildSchedulingReturns struct {
		result1 db.Lease
		result2 bool
		result3 error
	}
	GetAllStartedBuildsStub        func() ([]db.Build, error)
	getAllStartedBuildsMutex       sync.RWMutex
	getAllStartedBuildsArgsForCall []struct{}
	getAllStartedBuildsReturns     struct {
		result1 []db.Build
		result2 error
	}
	ErrorBuildStub        func(buildID int, err error) error
	errorBuildMutex       sync.RWMutex
	errorBuildArgsForCall []struct {
		buildID int
		err     error
	}
	errorBuildReturns struct {
		result1 error
	}
	FinishBuildStub        func(int, db.Status) error
	finishBuildMutex       sync.RWMutex
	finishBuildArgsForCall []struct {
		arg1 int
		arg2 db.Status
	}
	finishBuildReturns struct {
		result1 error
	}
}

func (fake *FakeBuildsDB) LeaseBuildScheduling(buildID int, interval time.Duration) (db.Lease, bool, error) {
	fake.leaseBuildSchedulingMutex.Lock()
	fake.leaseBuildSchedulingArgsForCall = append(fake.leaseBuildSchedulingArgsForCall, struct {
		buildID  int
		interval time.Duration
	}{buildID, interval})
	fake.leaseBuildSchedulingMutex.Unlock()
	if fake.LeaseBuildSchedulingStub != nil {
		return fake.LeaseBuildSchedulingStub(buildID, interval)
	} else {
		return fake.leaseBuildSchedulingReturns.result1, fake.leaseBuildSchedulingReturns.result2, fake.leaseBuildSchedulingReturns.result3
	}
}

func (fake *FakeBuildsDB) LeaseBuildSchedulingCallCount() int {
	fake.leaseBuildSchedulingMutex.RLock()
	defer fake.leaseBuildSchedulingMutex.RUnlock()
	return len(fake.leaseBuildSchedulingArgsForCall)
}

func (fake *FakeBuildsDB) LeaseBuildSchedulingArgsForCall(i int) (int, time.Duration) {
	fake.leaseBuildSchedulingMutex.RLock()
	defer fake.leaseBuildSchedulingMutex.RUnlock()
	return fake.leaseBuildSchedulingArgsForCall[i].buildID, fake.leaseBuildSchedulingArgsForCall[i].interval
}

func (fake *FakeBuildsDB) LeaseBuildSchedulingReturns(result1 db.Lease, result2 bool, result3 error) {
	fake.LeaseBuildSchedulingStub = nil
	fake.leaseBuildSchedulingReturns = struct {
		result1 db.Lease
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBuildsDB) GetAllStartedBuilds() ([]db.Build, error) {
	fake.getAllStartedBuildsMutex.Lock()
	fake.getAllStartedBuildsArgsForCall = append(fake.getAllStartedBuildsArgsForCall, struct{}{})
	fake.getAllStartedBuildsMutex.Unlock()
	if fake.GetAllStartedBuildsStub != nil {
		return fake.GetAllStartedBuildsStub()
	} else {
		return fake.getAllStartedBuildsReturns.result1, fake.getAllStartedBuildsReturns.result2
	}
}

func (fake *FakeBuildsDB) GetAllStartedBuildsCallCount() int {
	fake.getAllStartedBuildsMutex.RLock()
	defer fake.getAllStartedBuildsMutex.RUnlock()
	return len(fake.getAllStartedBuildsArgsForCall)
}

func (fake *FakeBuildsDB) GetAllStartedBuildsReturns(result1 []db.Build, result2 error) {
	fake.GetAllStartedBuildsStub = nil
	fake.getAllStartedBuildsReturns = struct {
		result1 []db.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildsDB) ErrorBuild(buildID int, err error) error {
	fake.errorBuildMutex.Lock()
	fake.errorBuildArgsForCall = append(fake.errorBuildArgsForCall, struct {
		buildID int
		err     error
	}{buildID, err})
	fake.errorBuildMutex.Unlock()
	if fake.ErrorBuildStub != nil {
		return fake.ErrorBuildStub(buildID, err)
	} else {
		return fake.errorBuildReturns.result1
	}
}

func (fake *FakeBuildsDB) ErrorBuildCallCount() int {
	fake.errorBuildMutex.RLock()
	defer fake.errorBuildMutex.RUnlock()
	return len(fake.errorBuildArgsForCall)
}

func (fake *FakeBuildsDB) ErrorBuildArgsForCall(i int) (int, error) {
	fake.errorBuildMutex.RLock()
	defer fake.errorBuildMutex.RUnlock()
	return fake.errorBuildArgsForCall[i].buildID, fake.errorBuildArgsForCall[i].err
}

func (fake *FakeBuildsDB) ErrorBuildReturns(result1 error) {
	fake.ErrorBuildStub = nil
	fake.errorBuildReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildsDB) FinishBuild(arg1 int, arg2 db.Status) error {
	fake.finishBuildMutex.Lock()
	fake.finishBuildArgsForCall = append(fake.finishBuildArgsForCall, struct {
		arg1 int
		arg2 db.Status
	}{arg1, arg2})
	fake.finishBuildMutex.Unlock()
	if fake.FinishBuildStub != nil {
		return fake.FinishBuildStub(arg1, arg2)
	} else {
		return fake.finishBuildReturns.result1
	}
}

func (fake *FakeBuildsDB) FinishBuildCallCount() int {
	fake.finishBuildMutex.RLock()
	defer fake.finishBuildMutex.RUnlock()
	return len(fake.finishBuildArgsForCall)
}

func (fake *FakeBuildsDB) FinishBuildArgsForCall(i int) (int, db.Status) {
	fake.finishBuildMutex.RLock()
	defer fake.finishBuildMutex.RUnlock()
	return fake.finishBuildArgsForCall[i].arg1, fake.finishBuildArgsForCall[i].arg2
}

func (fake *FakeBuildsDB) FinishBuildReturns(result1 error) {
	fake.FinishBuildStub = nil
	fake.finishBuildReturns = struct {
		result1 error
	}{result1}
}

var _ scheduler.BuildsDB = new(FakeBuildsDB)
