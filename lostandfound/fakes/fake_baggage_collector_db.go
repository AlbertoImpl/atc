// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"time"

	"github.com/concourse/atc/db"
	"github.com/concourse/atc/lostandfound"
)

type FakeBaggageCollectorDB struct {
	ReapVolumeStub        func(string) error
	reapVolumeMutex       sync.RWMutex
	reapVolumeArgsForCall []struct {
		arg1 string
	}
	reapVolumeReturns struct {
		result1 error
	}
	GetAllActivePipelinesStub        func() ([]db.SavedPipeline, error)
	getAllActivePipelinesMutex       sync.RWMutex
	getAllActivePipelinesArgsForCall []struct{}
	getAllActivePipelinesReturns     struct {
		result1 []db.SavedPipeline
		result2 error
	}
	GetVolumesStub        func() ([]db.SavedVolume, error)
	getVolumesMutex       sync.RWMutex
	getVolumesArgsForCall []struct{}
	getVolumesReturns     struct {
		result1 []db.SavedVolume
		result2 error
	}
	SetVolumeTTLStub        func(string, time.Duration) error
	setVolumeTTLMutex       sync.RWMutex
	setVolumeTTLArgsForCall []struct {
		arg1 string
		arg2 time.Duration
	}
	setVolumeTTLReturns struct {
		result1 error
	}
	GetImageVolumeIdentifiersByBuildIDStub        func(buildID int) ([]db.VolumeIdentifier, error)
	getImageVolumeIdentifiersByBuildIDMutex       sync.RWMutex
	getImageVolumeIdentifiersByBuildIDArgsForCall []struct {
		buildID int
	}
	getImageVolumeIdentifiersByBuildIDReturns struct {
		result1 []db.VolumeIdentifier
		result2 error
	}
}

func (fake *FakeBaggageCollectorDB) ReapVolume(arg1 string) error {
	fake.reapVolumeMutex.Lock()
	fake.reapVolumeArgsForCall = append(fake.reapVolumeArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.reapVolumeMutex.Unlock()
	if fake.ReapVolumeStub != nil {
		return fake.ReapVolumeStub(arg1)
	} else {
		return fake.reapVolumeReturns.result1
	}
}

func (fake *FakeBaggageCollectorDB) ReapVolumeCallCount() int {
	fake.reapVolumeMutex.RLock()
	defer fake.reapVolumeMutex.RUnlock()
	return len(fake.reapVolumeArgsForCall)
}

func (fake *FakeBaggageCollectorDB) ReapVolumeArgsForCall(i int) string {
	fake.reapVolumeMutex.RLock()
	defer fake.reapVolumeMutex.RUnlock()
	return fake.reapVolumeArgsForCall[i].arg1
}

func (fake *FakeBaggageCollectorDB) ReapVolumeReturns(result1 error) {
	fake.ReapVolumeStub = nil
	fake.reapVolumeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBaggageCollectorDB) GetAllActivePipelines() ([]db.SavedPipeline, error) {
	fake.getAllActivePipelinesMutex.Lock()
	fake.getAllActivePipelinesArgsForCall = append(fake.getAllActivePipelinesArgsForCall, struct{}{})
	fake.getAllActivePipelinesMutex.Unlock()
	if fake.GetAllActivePipelinesStub != nil {
		return fake.GetAllActivePipelinesStub()
	} else {
		return fake.getAllActivePipelinesReturns.result1, fake.getAllActivePipelinesReturns.result2
	}
}

func (fake *FakeBaggageCollectorDB) GetAllActivePipelinesCallCount() int {
	fake.getAllActivePipelinesMutex.RLock()
	defer fake.getAllActivePipelinesMutex.RUnlock()
	return len(fake.getAllActivePipelinesArgsForCall)
}

func (fake *FakeBaggageCollectorDB) GetAllActivePipelinesReturns(result1 []db.SavedPipeline, result2 error) {
	fake.GetAllActivePipelinesStub = nil
	fake.getAllActivePipelinesReturns = struct {
		result1 []db.SavedPipeline
		result2 error
	}{result1, result2}
}

func (fake *FakeBaggageCollectorDB) GetVolumes() ([]db.SavedVolume, error) {
	fake.getVolumesMutex.Lock()
	fake.getVolumesArgsForCall = append(fake.getVolumesArgsForCall, struct{}{})
	fake.getVolumesMutex.Unlock()
	if fake.GetVolumesStub != nil {
		return fake.GetVolumesStub()
	} else {
		return fake.getVolumesReturns.result1, fake.getVolumesReturns.result2
	}
}

func (fake *FakeBaggageCollectorDB) GetVolumesCallCount() int {
	fake.getVolumesMutex.RLock()
	defer fake.getVolumesMutex.RUnlock()
	return len(fake.getVolumesArgsForCall)
}

func (fake *FakeBaggageCollectorDB) GetVolumesReturns(result1 []db.SavedVolume, result2 error) {
	fake.GetVolumesStub = nil
	fake.getVolumesReturns = struct {
		result1 []db.SavedVolume
		result2 error
	}{result1, result2}
}

func (fake *FakeBaggageCollectorDB) SetVolumeTTL(arg1 string, arg2 time.Duration) error {
	fake.setVolumeTTLMutex.Lock()
	fake.setVolumeTTLArgsForCall = append(fake.setVolumeTTLArgsForCall, struct {
		arg1 string
		arg2 time.Duration
	}{arg1, arg2})
	fake.setVolumeTTLMutex.Unlock()
	if fake.SetVolumeTTLStub != nil {
		return fake.SetVolumeTTLStub(arg1, arg2)
	} else {
		return fake.setVolumeTTLReturns.result1
	}
}

func (fake *FakeBaggageCollectorDB) SetVolumeTTLCallCount() int {
	fake.setVolumeTTLMutex.RLock()
	defer fake.setVolumeTTLMutex.RUnlock()
	return len(fake.setVolumeTTLArgsForCall)
}

func (fake *FakeBaggageCollectorDB) SetVolumeTTLArgsForCall(i int) (string, time.Duration) {
	fake.setVolumeTTLMutex.RLock()
	defer fake.setVolumeTTLMutex.RUnlock()
	return fake.setVolumeTTLArgsForCall[i].arg1, fake.setVolumeTTLArgsForCall[i].arg2
}

func (fake *FakeBaggageCollectorDB) SetVolumeTTLReturns(result1 error) {
	fake.SetVolumeTTLStub = nil
	fake.setVolumeTTLReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBaggageCollectorDB) GetImageVolumeIdentifiersByBuildID(buildID int) ([]db.VolumeIdentifier, error) {
	fake.getImageVolumeIdentifiersByBuildIDMutex.Lock()
	fake.getImageVolumeIdentifiersByBuildIDArgsForCall = append(fake.getImageVolumeIdentifiersByBuildIDArgsForCall, struct {
		buildID int
	}{buildID})
	fake.getImageVolumeIdentifiersByBuildIDMutex.Unlock()
	if fake.GetImageVolumeIdentifiersByBuildIDStub != nil {
		return fake.GetImageVolumeIdentifiersByBuildIDStub(buildID)
	} else {
		return fake.getImageVolumeIdentifiersByBuildIDReturns.result1, fake.getImageVolumeIdentifiersByBuildIDReturns.result2
	}
}

func (fake *FakeBaggageCollectorDB) GetImageVolumeIdentifiersByBuildIDCallCount() int {
	fake.getImageVolumeIdentifiersByBuildIDMutex.RLock()
	defer fake.getImageVolumeIdentifiersByBuildIDMutex.RUnlock()
	return len(fake.getImageVolumeIdentifiersByBuildIDArgsForCall)
}

func (fake *FakeBaggageCollectorDB) GetImageVolumeIdentifiersByBuildIDArgsForCall(i int) int {
	fake.getImageVolumeIdentifiersByBuildIDMutex.RLock()
	defer fake.getImageVolumeIdentifiersByBuildIDMutex.RUnlock()
	return fake.getImageVolumeIdentifiersByBuildIDArgsForCall[i].buildID
}

func (fake *FakeBaggageCollectorDB) GetImageVolumeIdentifiersByBuildIDReturns(result1 []db.VolumeIdentifier, result2 error) {
	fake.GetImageVolumeIdentifiersByBuildIDStub = nil
	fake.getImageVolumeIdentifiersByBuildIDReturns = struct {
		result1 []db.VolumeIdentifier
		result2 error
	}{result1, result2}
}

var _ lostandfound.BaggageCollectorDB = new(FakeBaggageCollectorDB)
