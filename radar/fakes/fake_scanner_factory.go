// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/radar"
	"github.com/pivotal-golang/lager"
	"github.com/tedsuo/ifrit"
)

type FakeScannerFactory struct {
	ScanResourceRunnerStub        func(lager.Logger, string) ifrit.Runner
	scanResourceRunnerMutex       sync.RWMutex
	scanResourceRunnerArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
	}
	scanResourceRunnerReturns struct {
		result1 ifrit.Runner
	}
	ScanResourceTypeRunnerStub        func(lager.Logger, string) ifrit.Runner
	scanResourceTypeRunnerMutex       sync.RWMutex
	scanResourceTypeRunnerArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
	}
	scanResourceTypeRunnerReturns struct {
		result1 ifrit.Runner
	}
}

func (fake *FakeScannerFactory) ScanResourceRunner(arg1 lager.Logger, arg2 string) ifrit.Runner {
	fake.scanResourceRunnerMutex.Lock()
	fake.scanResourceRunnerArgsForCall = append(fake.scanResourceRunnerArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
	}{arg1, arg2})
	fake.scanResourceRunnerMutex.Unlock()
	if fake.ScanResourceRunnerStub != nil {
		return fake.ScanResourceRunnerStub(arg1, arg2)
	} else {
		return fake.scanResourceRunnerReturns.result1
	}
}

func (fake *FakeScannerFactory) ScanResourceRunnerCallCount() int {
	fake.scanResourceRunnerMutex.RLock()
	defer fake.scanResourceRunnerMutex.RUnlock()
	return len(fake.scanResourceRunnerArgsForCall)
}

func (fake *FakeScannerFactory) ScanResourceRunnerArgsForCall(i int) (lager.Logger, string) {
	fake.scanResourceRunnerMutex.RLock()
	defer fake.scanResourceRunnerMutex.RUnlock()
	return fake.scanResourceRunnerArgsForCall[i].arg1, fake.scanResourceRunnerArgsForCall[i].arg2
}

func (fake *FakeScannerFactory) ScanResourceRunnerReturns(result1 ifrit.Runner) {
	fake.ScanResourceRunnerStub = nil
	fake.scanResourceRunnerReturns = struct {
		result1 ifrit.Runner
	}{result1}
}

func (fake *FakeScannerFactory) ScanResourceTypeRunner(arg1 lager.Logger, arg2 string) ifrit.Runner {
	fake.scanResourceTypeRunnerMutex.Lock()
	fake.scanResourceTypeRunnerArgsForCall = append(fake.scanResourceTypeRunnerArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
	}{arg1, arg2})
	fake.scanResourceTypeRunnerMutex.Unlock()
	if fake.ScanResourceTypeRunnerStub != nil {
		return fake.ScanResourceTypeRunnerStub(arg1, arg2)
	} else {
		return fake.scanResourceTypeRunnerReturns.result1
	}
}

func (fake *FakeScannerFactory) ScanResourceTypeRunnerCallCount() int {
	fake.scanResourceTypeRunnerMutex.RLock()
	defer fake.scanResourceTypeRunnerMutex.RUnlock()
	return len(fake.scanResourceTypeRunnerArgsForCall)
}

func (fake *FakeScannerFactory) ScanResourceTypeRunnerArgsForCall(i int) (lager.Logger, string) {
	fake.scanResourceTypeRunnerMutex.RLock()
	defer fake.scanResourceTypeRunnerMutex.RUnlock()
	return fake.scanResourceTypeRunnerArgsForCall[i].arg1, fake.scanResourceTypeRunnerArgsForCall[i].arg2
}

func (fake *FakeScannerFactory) ScanResourceTypeRunnerReturns(result1 ifrit.Runner) {
	fake.ScanResourceTypeRunnerStub = nil
	fake.scanResourceTypeRunnerReturns = struct {
		result1 ifrit.Runner
	}{result1}
}

var _ radar.ScannerFactory = new(FakeScannerFactory)
