// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/radar"
	"github.com/pivotal-golang/lager"
	"github.com/tedsuo/ifrit"
)

type FakeScannerFactory struct {
	ScannerStub        func(lager.Logger, string) ifrit.Runner
	scannerMutex       sync.RWMutex
	scannerArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
	}
	scannerReturns struct {
		result1 ifrit.Runner
	}
	ResourceTypeScannerStub        func(lager.Logger, string) ifrit.Runner
	resourceTypeScannerMutex       sync.RWMutex
	resourceTypeScannerArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
	}
	resourceTypeScannerReturns struct {
		result1 ifrit.Runner
	}
}

func (fake *FakeScannerFactory) Scanner(arg1 lager.Logger, arg2 string) ifrit.Runner {
	fake.scannerMutex.Lock()
	fake.scannerArgsForCall = append(fake.scannerArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
	}{arg1, arg2})
	fake.scannerMutex.Unlock()
	if fake.ScannerStub != nil {
		return fake.ScannerStub(arg1, arg2)
	} else {
		return fake.scannerReturns.result1
	}
}

func (fake *FakeScannerFactory) ScannerCallCount() int {
	fake.scannerMutex.RLock()
	defer fake.scannerMutex.RUnlock()
	return len(fake.scannerArgsForCall)
}

func (fake *FakeScannerFactory) ScannerArgsForCall(i int) (lager.Logger, string) {
	fake.scannerMutex.RLock()
	defer fake.scannerMutex.RUnlock()
	return fake.scannerArgsForCall[i].arg1, fake.scannerArgsForCall[i].arg2
}

func (fake *FakeScannerFactory) ScannerReturns(result1 ifrit.Runner) {
	fake.ScannerStub = nil
	fake.scannerReturns = struct {
		result1 ifrit.Runner
	}{result1}
}

func (fake *FakeScannerFactory) ResourceTypeScanner(arg1 lager.Logger, arg2 string) ifrit.Runner {
	fake.resourceTypeScannerMutex.Lock()
	fake.resourceTypeScannerArgsForCall = append(fake.resourceTypeScannerArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
	}{arg1, arg2})
	fake.resourceTypeScannerMutex.Unlock()
	if fake.ResourceTypeScannerStub != nil {
		return fake.ResourceTypeScannerStub(arg1, arg2)
	} else {
		return fake.resourceTypeScannerReturns.result1
	}
}

func (fake *FakeScannerFactory) ResourceTypeScannerCallCount() int {
	fake.resourceTypeScannerMutex.RLock()
	defer fake.resourceTypeScannerMutex.RUnlock()
	return len(fake.resourceTypeScannerArgsForCall)
}

func (fake *FakeScannerFactory) ResourceTypeScannerArgsForCall(i int) (lager.Logger, string) {
	fake.resourceTypeScannerMutex.RLock()
	defer fake.resourceTypeScannerMutex.RUnlock()
	return fake.resourceTypeScannerArgsForCall[i].arg1, fake.resourceTypeScannerArgsForCall[i].arg2
}

func (fake *FakeScannerFactory) ResourceTypeScannerReturns(result1 ifrit.Runner) {
	fake.ResourceTypeScannerStub = nil
	fake.resourceTypeScannerReturns = struct {
		result1 ifrit.Runner
	}{result1}
}

var _ radar.ScannerFactory = new(FakeScannerFactory)
