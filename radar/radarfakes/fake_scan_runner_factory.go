// Code generated by counterfeiter. DO NOT EDIT.
package radarfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc/radar"
)

type FakeScanRunnerFactory struct {
	ScanResourceConfigRunnerStub        func(lager.Logger, radar.Scannable) radar.IntervalRunner
	scanResourceConfigRunnerMutex       sync.RWMutex
	scanResourceConfigRunnerArgsForCall []struct {
		arg1 lager.Logger
		arg2 radar.Scannable
	}
	scanResourceConfigRunnerReturns struct {
		result1 radar.IntervalRunner
	}
	scanResourceConfigRunnerReturnsOnCall map[int]struct {
		result1 radar.IntervalRunner
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeScanRunnerFactory) ScanResourceConfigRunner(arg1 lager.Logger, arg2 radar.Scannable) radar.IntervalRunner {
	fake.scanResourceConfigRunnerMutex.Lock()
	ret, specificReturn := fake.scanResourceConfigRunnerReturnsOnCall[len(fake.scanResourceConfigRunnerArgsForCall)]
	fake.scanResourceConfigRunnerArgsForCall = append(fake.scanResourceConfigRunnerArgsForCall, struct {
		arg1 lager.Logger
		arg2 radar.Scannable
	}{arg1, arg2})
	fake.recordInvocation("ScanResourceConfigRunner", []interface{}{arg1, arg2})
	fake.scanResourceConfigRunnerMutex.Unlock()
	if fake.ScanResourceConfigRunnerStub != nil {
		return fake.ScanResourceConfigRunnerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.scanResourceConfigRunnerReturns.result1
}

func (fake *FakeScanRunnerFactory) ScanResourceConfigRunnerCallCount() int {
	fake.scanResourceConfigRunnerMutex.RLock()
	defer fake.scanResourceConfigRunnerMutex.RUnlock()
	return len(fake.scanResourceConfigRunnerArgsForCall)
}

func (fake *FakeScanRunnerFactory) ScanResourceConfigRunnerArgsForCall(i int) (lager.Logger, radar.Scannable) {
	fake.scanResourceConfigRunnerMutex.RLock()
	defer fake.scanResourceConfigRunnerMutex.RUnlock()
	return fake.scanResourceConfigRunnerArgsForCall[i].arg1, fake.scanResourceConfigRunnerArgsForCall[i].arg2
}

func (fake *FakeScanRunnerFactory) ScanResourceConfigRunnerReturns(result1 radar.IntervalRunner) {
	fake.ScanResourceConfigRunnerStub = nil
	fake.scanResourceConfigRunnerReturns = struct {
		result1 radar.IntervalRunner
	}{result1}
}

func (fake *FakeScanRunnerFactory) ScanResourceConfigRunnerReturnsOnCall(i int, result1 radar.IntervalRunner) {
	fake.ScanResourceConfigRunnerStub = nil
	if fake.scanResourceConfigRunnerReturnsOnCall == nil {
		fake.scanResourceConfigRunnerReturnsOnCall = make(map[int]struct {
			result1 radar.IntervalRunner
		})
	}
	fake.scanResourceConfigRunnerReturnsOnCall[i] = struct {
		result1 radar.IntervalRunner
	}{result1}
}

func (fake *FakeScanRunnerFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.scanResourceConfigRunnerMutex.RLock()
	defer fake.scanResourceConfigRunnerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeScanRunnerFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ radar.ScanRunnerFactory = new(FakeScanRunnerFactory)
