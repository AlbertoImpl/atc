// Code generated by counterfeiter. DO NOT EDIT.
package enginefakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc"
	"github.com/concourse/atc/engine"
	"github.com/concourse/atc/event"
	"github.com/concourse/atc/exec"
)

type FakeBuildDelegate struct {
	GetBuildEventsDelegateStub        func(atc.PlanID, atc.GetPlan, exec.GetResultAction) exec.BuildEventsDelegate
	getBuildEventsDelegateMutex       sync.RWMutex
	getBuildEventsDelegateArgsForCall []struct {
		arg1 atc.PlanID
		arg2 atc.GetPlan
		arg3 exec.GetResultAction
	}
	getBuildEventsDelegateReturns struct {
		result1 exec.BuildEventsDelegate
	}
	getBuildEventsDelegateReturnsOnCall map[int]struct {
		result1 exec.BuildEventsDelegate
	}
	PutBuildEventsDelegateStub        func(atc.PlanID, atc.PutPlan, exec.PutResultAction) exec.BuildEventsDelegate
	putBuildEventsDelegateMutex       sync.RWMutex
	putBuildEventsDelegateArgsForCall []struct {
		arg1 atc.PlanID
		arg2 atc.PutPlan
		arg3 exec.PutResultAction
	}
	putBuildEventsDelegateReturns struct {
		result1 exec.BuildEventsDelegate
	}
	putBuildEventsDelegateReturnsOnCall map[int]struct {
		result1 exec.BuildEventsDelegate
	}
	ExecutionDelegateStub        func(lager.Logger, atc.TaskPlan, event.OriginID) exec.TaskDelegate
	executionDelegateMutex       sync.RWMutex
	executionDelegateArgsForCall []struct {
		arg1 lager.Logger
		arg2 atc.TaskPlan
		arg3 event.OriginID
	}
	executionDelegateReturns struct {
		result1 exec.TaskDelegate
	}
	executionDelegateReturnsOnCall map[int]struct {
		result1 exec.TaskDelegate
	}
	ImageFetchingDelegateStub        func(atc.PlanID) exec.ImageFetchingDelegate
	imageFetchingDelegateMutex       sync.RWMutex
	imageFetchingDelegateArgsForCall []struct {
		arg1 atc.PlanID
	}
	imageFetchingDelegateReturns struct {
		result1 exec.ImageFetchingDelegate
	}
	imageFetchingDelegateReturnsOnCall map[int]struct {
		result1 exec.ImageFetchingDelegate
	}
	FinishStub        func(lager.Logger, error, exec.Success, bool)
	finishMutex       sync.RWMutex
	finishArgsForCall []struct {
		arg1 lager.Logger
		arg2 error
		arg3 exec.Success
		arg4 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBuildDelegate) GetBuildEventsDelegate(arg1 atc.PlanID, arg2 atc.GetPlan, arg3 exec.GetResultAction) exec.BuildEventsDelegate {
	fake.getBuildEventsDelegateMutex.Lock()
	ret, specificReturn := fake.getBuildEventsDelegateReturnsOnCall[len(fake.getBuildEventsDelegateArgsForCall)]
	fake.getBuildEventsDelegateArgsForCall = append(fake.getBuildEventsDelegateArgsForCall, struct {
		arg1 atc.PlanID
		arg2 atc.GetPlan
		arg3 exec.GetResultAction
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBuildEventsDelegate", []interface{}{arg1, arg2, arg3})
	fake.getBuildEventsDelegateMutex.Unlock()
	if fake.GetBuildEventsDelegateStub != nil {
		return fake.GetBuildEventsDelegateStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getBuildEventsDelegateReturns.result1
}

func (fake *FakeBuildDelegate) GetBuildEventsDelegateCallCount() int {
	fake.getBuildEventsDelegateMutex.RLock()
	defer fake.getBuildEventsDelegateMutex.RUnlock()
	return len(fake.getBuildEventsDelegateArgsForCall)
}

func (fake *FakeBuildDelegate) GetBuildEventsDelegateArgsForCall(i int) (atc.PlanID, atc.GetPlan, exec.GetResultAction) {
	fake.getBuildEventsDelegateMutex.RLock()
	defer fake.getBuildEventsDelegateMutex.RUnlock()
	return fake.getBuildEventsDelegateArgsForCall[i].arg1, fake.getBuildEventsDelegateArgsForCall[i].arg2, fake.getBuildEventsDelegateArgsForCall[i].arg3
}

func (fake *FakeBuildDelegate) GetBuildEventsDelegateReturns(result1 exec.BuildEventsDelegate) {
	fake.GetBuildEventsDelegateStub = nil
	fake.getBuildEventsDelegateReturns = struct {
		result1 exec.BuildEventsDelegate
	}{result1}
}

func (fake *FakeBuildDelegate) GetBuildEventsDelegateReturnsOnCall(i int, result1 exec.BuildEventsDelegate) {
	fake.GetBuildEventsDelegateStub = nil
	if fake.getBuildEventsDelegateReturnsOnCall == nil {
		fake.getBuildEventsDelegateReturnsOnCall = make(map[int]struct {
			result1 exec.BuildEventsDelegate
		})
	}
	fake.getBuildEventsDelegateReturnsOnCall[i] = struct {
		result1 exec.BuildEventsDelegate
	}{result1}
}

func (fake *FakeBuildDelegate) PutBuildEventsDelegate(arg1 atc.PlanID, arg2 atc.PutPlan, arg3 exec.PutResultAction) exec.BuildEventsDelegate {
	fake.putBuildEventsDelegateMutex.Lock()
	ret, specificReturn := fake.putBuildEventsDelegateReturnsOnCall[len(fake.putBuildEventsDelegateArgsForCall)]
	fake.putBuildEventsDelegateArgsForCall = append(fake.putBuildEventsDelegateArgsForCall, struct {
		arg1 atc.PlanID
		arg2 atc.PutPlan
		arg3 exec.PutResultAction
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutBuildEventsDelegate", []interface{}{arg1, arg2, arg3})
	fake.putBuildEventsDelegateMutex.Unlock()
	if fake.PutBuildEventsDelegateStub != nil {
		return fake.PutBuildEventsDelegateStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.putBuildEventsDelegateReturns.result1
}

func (fake *FakeBuildDelegate) PutBuildEventsDelegateCallCount() int {
	fake.putBuildEventsDelegateMutex.RLock()
	defer fake.putBuildEventsDelegateMutex.RUnlock()
	return len(fake.putBuildEventsDelegateArgsForCall)
}

func (fake *FakeBuildDelegate) PutBuildEventsDelegateArgsForCall(i int) (atc.PlanID, atc.PutPlan, exec.PutResultAction) {
	fake.putBuildEventsDelegateMutex.RLock()
	defer fake.putBuildEventsDelegateMutex.RUnlock()
	return fake.putBuildEventsDelegateArgsForCall[i].arg1, fake.putBuildEventsDelegateArgsForCall[i].arg2, fake.putBuildEventsDelegateArgsForCall[i].arg3
}

func (fake *FakeBuildDelegate) PutBuildEventsDelegateReturns(result1 exec.BuildEventsDelegate) {
	fake.PutBuildEventsDelegateStub = nil
	fake.putBuildEventsDelegateReturns = struct {
		result1 exec.BuildEventsDelegate
	}{result1}
}

func (fake *FakeBuildDelegate) PutBuildEventsDelegateReturnsOnCall(i int, result1 exec.BuildEventsDelegate) {
	fake.PutBuildEventsDelegateStub = nil
	if fake.putBuildEventsDelegateReturnsOnCall == nil {
		fake.putBuildEventsDelegateReturnsOnCall = make(map[int]struct {
			result1 exec.BuildEventsDelegate
		})
	}
	fake.putBuildEventsDelegateReturnsOnCall[i] = struct {
		result1 exec.BuildEventsDelegate
	}{result1}
}

func (fake *FakeBuildDelegate) ExecutionDelegate(arg1 lager.Logger, arg2 atc.TaskPlan, arg3 event.OriginID) exec.TaskDelegate {
	fake.executionDelegateMutex.Lock()
	ret, specificReturn := fake.executionDelegateReturnsOnCall[len(fake.executionDelegateArgsForCall)]
	fake.executionDelegateArgsForCall = append(fake.executionDelegateArgsForCall, struct {
		arg1 lager.Logger
		arg2 atc.TaskPlan
		arg3 event.OriginID
	}{arg1, arg2, arg3})
	fake.recordInvocation("ExecutionDelegate", []interface{}{arg1, arg2, arg3})
	fake.executionDelegateMutex.Unlock()
	if fake.ExecutionDelegateStub != nil {
		return fake.ExecutionDelegateStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.executionDelegateReturns.result1
}

func (fake *FakeBuildDelegate) ExecutionDelegateCallCount() int {
	fake.executionDelegateMutex.RLock()
	defer fake.executionDelegateMutex.RUnlock()
	return len(fake.executionDelegateArgsForCall)
}

func (fake *FakeBuildDelegate) ExecutionDelegateArgsForCall(i int) (lager.Logger, atc.TaskPlan, event.OriginID) {
	fake.executionDelegateMutex.RLock()
	defer fake.executionDelegateMutex.RUnlock()
	return fake.executionDelegateArgsForCall[i].arg1, fake.executionDelegateArgsForCall[i].arg2, fake.executionDelegateArgsForCall[i].arg3
}

func (fake *FakeBuildDelegate) ExecutionDelegateReturns(result1 exec.TaskDelegate) {
	fake.ExecutionDelegateStub = nil
	fake.executionDelegateReturns = struct {
		result1 exec.TaskDelegate
	}{result1}
}

func (fake *FakeBuildDelegate) ExecutionDelegateReturnsOnCall(i int, result1 exec.TaskDelegate) {
	fake.ExecutionDelegateStub = nil
	if fake.executionDelegateReturnsOnCall == nil {
		fake.executionDelegateReturnsOnCall = make(map[int]struct {
			result1 exec.TaskDelegate
		})
	}
	fake.executionDelegateReturnsOnCall[i] = struct {
		result1 exec.TaskDelegate
	}{result1}
}

func (fake *FakeBuildDelegate) ImageFetchingDelegate(arg1 atc.PlanID) exec.ImageFetchingDelegate {
	fake.imageFetchingDelegateMutex.Lock()
	ret, specificReturn := fake.imageFetchingDelegateReturnsOnCall[len(fake.imageFetchingDelegateArgsForCall)]
	fake.imageFetchingDelegateArgsForCall = append(fake.imageFetchingDelegateArgsForCall, struct {
		arg1 atc.PlanID
	}{arg1})
	fake.recordInvocation("ImageFetchingDelegate", []interface{}{arg1})
	fake.imageFetchingDelegateMutex.Unlock()
	if fake.ImageFetchingDelegateStub != nil {
		return fake.ImageFetchingDelegateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.imageFetchingDelegateReturns.result1
}

func (fake *FakeBuildDelegate) ImageFetchingDelegateCallCount() int {
	fake.imageFetchingDelegateMutex.RLock()
	defer fake.imageFetchingDelegateMutex.RUnlock()
	return len(fake.imageFetchingDelegateArgsForCall)
}

func (fake *FakeBuildDelegate) ImageFetchingDelegateArgsForCall(i int) atc.PlanID {
	fake.imageFetchingDelegateMutex.RLock()
	defer fake.imageFetchingDelegateMutex.RUnlock()
	return fake.imageFetchingDelegateArgsForCall[i].arg1
}

func (fake *FakeBuildDelegate) ImageFetchingDelegateReturns(result1 exec.ImageFetchingDelegate) {
	fake.ImageFetchingDelegateStub = nil
	fake.imageFetchingDelegateReturns = struct {
		result1 exec.ImageFetchingDelegate
	}{result1}
}

func (fake *FakeBuildDelegate) ImageFetchingDelegateReturnsOnCall(i int, result1 exec.ImageFetchingDelegate) {
	fake.ImageFetchingDelegateStub = nil
	if fake.imageFetchingDelegateReturnsOnCall == nil {
		fake.imageFetchingDelegateReturnsOnCall = make(map[int]struct {
			result1 exec.ImageFetchingDelegate
		})
	}
	fake.imageFetchingDelegateReturnsOnCall[i] = struct {
		result1 exec.ImageFetchingDelegate
	}{result1}
}

func (fake *FakeBuildDelegate) Finish(arg1 lager.Logger, arg2 error, arg3 exec.Success, arg4 bool) {
	fake.finishMutex.Lock()
	fake.finishArgsForCall = append(fake.finishArgsForCall, struct {
		arg1 lager.Logger
		arg2 error
		arg3 exec.Success
		arg4 bool
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("Finish", []interface{}{arg1, arg2, arg3, arg4})
	fake.finishMutex.Unlock()
	if fake.FinishStub != nil {
		fake.FinishStub(arg1, arg2, arg3, arg4)
	}
}

func (fake *FakeBuildDelegate) FinishCallCount() int {
	fake.finishMutex.RLock()
	defer fake.finishMutex.RUnlock()
	return len(fake.finishArgsForCall)
}

func (fake *FakeBuildDelegate) FinishArgsForCall(i int) (lager.Logger, error, exec.Success, bool) {
	fake.finishMutex.RLock()
	defer fake.finishMutex.RUnlock()
	return fake.finishArgsForCall[i].arg1, fake.finishArgsForCall[i].arg2, fake.finishArgsForCall[i].arg3, fake.finishArgsForCall[i].arg4
}

func (fake *FakeBuildDelegate) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBuildEventsDelegateMutex.RLock()
	defer fake.getBuildEventsDelegateMutex.RUnlock()
	fake.putBuildEventsDelegateMutex.RLock()
	defer fake.putBuildEventsDelegateMutex.RUnlock()
	fake.executionDelegateMutex.RLock()
	defer fake.executionDelegateMutex.RUnlock()
	fake.imageFetchingDelegateMutex.RLock()
	defer fake.imageFetchingDelegateMutex.RUnlock()
	fake.finishMutex.RLock()
	defer fake.finishMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBuildDelegate) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ engine.BuildDelegate = new(FakeBuildDelegate)
