// This file was generated by counterfeiter
package dbngfakes

import (
	"sync"

	"github.com/concourse/atc/dbng"
)

type FakeDestroyingContainer struct {
	HandleStub        func() string
	handleMutex       sync.RWMutex
	handleArgsForCall []struct{}
	handleReturns     struct {
		result1 string
	}
	WorkerNameStub        func() string
	workerNameMutex       sync.RWMutex
	workerNameArgsForCall []struct{}
	workerNameReturns     struct {
		result1 string
	}
	DestroyStub        func() (bool, error)
	destroyMutex       sync.RWMutex
	destroyArgsForCall []struct{}
	destroyReturns     struct {
		result1 bool
		result2 error
	}
	IsDiscontinuedStub        func() bool
	isDiscontinuedMutex       sync.RWMutex
	isDiscontinuedArgsForCall []struct{}
	isDiscontinuedReturns     struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDestroyingContainer) Handle() string {
	fake.handleMutex.Lock()
	fake.handleArgsForCall = append(fake.handleArgsForCall, struct{}{})
	fake.recordInvocation("Handle", []interface{}{})
	fake.handleMutex.Unlock()
	if fake.HandleStub != nil {
		return fake.HandleStub()
	} else {
		return fake.handleReturns.result1
	}
}

func (fake *FakeDestroyingContainer) HandleCallCount() int {
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	return len(fake.handleArgsForCall)
}

func (fake *FakeDestroyingContainer) HandleReturns(result1 string) {
	fake.HandleStub = nil
	fake.handleReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeDestroyingContainer) WorkerName() string {
	fake.workerNameMutex.Lock()
	fake.workerNameArgsForCall = append(fake.workerNameArgsForCall, struct{}{})
	fake.recordInvocation("WorkerName", []interface{}{})
	fake.workerNameMutex.Unlock()
	if fake.WorkerNameStub != nil {
		return fake.WorkerNameStub()
	} else {
		return fake.workerNameReturns.result1
	}
}

func (fake *FakeDestroyingContainer) WorkerNameCallCount() int {
	fake.workerNameMutex.RLock()
	defer fake.workerNameMutex.RUnlock()
	return len(fake.workerNameArgsForCall)
}

func (fake *FakeDestroyingContainer) WorkerNameReturns(result1 string) {
	fake.WorkerNameStub = nil
	fake.workerNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeDestroyingContainer) Destroy() (bool, error) {
	fake.destroyMutex.Lock()
	fake.destroyArgsForCall = append(fake.destroyArgsForCall, struct{}{})
	fake.recordInvocation("Destroy", []interface{}{})
	fake.destroyMutex.Unlock()
	if fake.DestroyStub != nil {
		return fake.DestroyStub()
	} else {
		return fake.destroyReturns.result1, fake.destroyReturns.result2
	}
}

func (fake *FakeDestroyingContainer) DestroyCallCount() int {
	fake.destroyMutex.RLock()
	defer fake.destroyMutex.RUnlock()
	return len(fake.destroyArgsForCall)
}

func (fake *FakeDestroyingContainer) DestroyReturns(result1 bool, result2 error) {
	fake.DestroyStub = nil
	fake.destroyReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeDestroyingContainer) IsDiscontinued() bool {
	fake.isDiscontinuedMutex.Lock()
	fake.isDiscontinuedArgsForCall = append(fake.isDiscontinuedArgsForCall, struct{}{})
	fake.recordInvocation("IsDiscontinued", []interface{}{})
	fake.isDiscontinuedMutex.Unlock()
	if fake.IsDiscontinuedStub != nil {
		return fake.IsDiscontinuedStub()
	} else {
		return fake.isDiscontinuedReturns.result1
	}
}

func (fake *FakeDestroyingContainer) IsDiscontinuedCallCount() int {
	fake.isDiscontinuedMutex.RLock()
	defer fake.isDiscontinuedMutex.RUnlock()
	return len(fake.isDiscontinuedArgsForCall)
}

func (fake *FakeDestroyingContainer) IsDiscontinuedReturns(result1 bool) {
	fake.IsDiscontinuedStub = nil
	fake.isDiscontinuedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeDestroyingContainer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	fake.workerNameMutex.RLock()
	defer fake.workerNameMutex.RUnlock()
	fake.destroyMutex.RLock()
	defer fake.destroyMutex.RUnlock()
	fake.isDiscontinuedMutex.RLock()
	defer fake.isDiscontinuedMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDestroyingContainer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dbng.DestroyingContainer = new(FakeDestroyingContainer)
