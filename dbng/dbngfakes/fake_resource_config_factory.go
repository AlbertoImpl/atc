// This file was generated by counterfeiter
package dbngfakes

import (
	"sync"

	"github.com/concourse/atc"
	"github.com/concourse/atc/dbng"
)

type FakeResourceConfigFactory struct {
	FindOrCreateResourceConfigForBuildStub        func(build *dbng.Build, resourceType string, source atc.Source, resourceTypes []dbng.ResourceType) (*dbng.UsedResourceConfig, error)
	findOrCreateResourceConfigForBuildMutex       sync.RWMutex
	findOrCreateResourceConfigForBuildArgsForCall []struct {
		build         *dbng.Build
		resourceType  string
		source        atc.Source
		resourceTypes []dbng.ResourceType
	}
	findOrCreateResourceConfigForBuildReturns struct {
		result1 *dbng.UsedResourceConfig
		result2 error
	}
	FindOrCreateResourceConfigForResourceStub        func(resource *dbng.Resource, resourceType string, source atc.Source, resourceTypes []dbng.ResourceType) (*dbng.UsedResourceConfig, error)
	findOrCreateResourceConfigForResourceMutex       sync.RWMutex
	findOrCreateResourceConfigForResourceArgsForCall []struct {
		resource      *dbng.Resource
		resourceType  string
		source        atc.Source
		resourceTypes []dbng.ResourceType
	}
	findOrCreateResourceConfigForResourceReturns struct {
		result1 *dbng.UsedResourceConfig
		result2 error
	}
	FindOrCreateResourceConfigForResourceTypeStub        func(usedResourceType *dbng.UsedResourceType, resourceType string, source atc.Source, resourceTypes []dbng.ResourceType) (*dbng.UsedResourceConfig, error)
	findOrCreateResourceConfigForResourceTypeMutex       sync.RWMutex
	findOrCreateResourceConfigForResourceTypeArgsForCall []struct {
		usedResourceType *dbng.UsedResourceType
		resourceType     string
		source           atc.Source
		resourceTypes    []dbng.ResourceType
	}
	findOrCreateResourceConfigForResourceTypeReturns struct {
		result1 *dbng.UsedResourceConfig
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForBuild(build *dbng.Build, resourceType string, source atc.Source, resourceTypes []dbng.ResourceType) (*dbng.UsedResourceConfig, error) {
	var resourceTypesCopy []dbng.ResourceType
	if resourceTypes != nil {
		resourceTypesCopy = make([]dbng.ResourceType, len(resourceTypes))
		copy(resourceTypesCopy, resourceTypes)
	}
	fake.findOrCreateResourceConfigForBuildMutex.Lock()
	fake.findOrCreateResourceConfigForBuildArgsForCall = append(fake.findOrCreateResourceConfigForBuildArgsForCall, struct {
		build         *dbng.Build
		resourceType  string
		source        atc.Source
		resourceTypes []dbng.ResourceType
	}{build, resourceType, source, resourceTypesCopy})
	fake.recordInvocation("FindOrCreateResourceConfigForBuild", []interface{}{build, resourceType, source, resourceTypesCopy})
	fake.findOrCreateResourceConfigForBuildMutex.Unlock()
	if fake.FindOrCreateResourceConfigForBuildStub != nil {
		return fake.FindOrCreateResourceConfigForBuildStub(build, resourceType, source, resourceTypes)
	} else {
		return fake.findOrCreateResourceConfigForBuildReturns.result1, fake.findOrCreateResourceConfigForBuildReturns.result2
	}
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForBuildCallCount() int {
	fake.findOrCreateResourceConfigForBuildMutex.RLock()
	defer fake.findOrCreateResourceConfigForBuildMutex.RUnlock()
	return len(fake.findOrCreateResourceConfigForBuildArgsForCall)
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForBuildArgsForCall(i int) (*dbng.Build, string, atc.Source, []dbng.ResourceType) {
	fake.findOrCreateResourceConfigForBuildMutex.RLock()
	defer fake.findOrCreateResourceConfigForBuildMutex.RUnlock()
	return fake.findOrCreateResourceConfigForBuildArgsForCall[i].build, fake.findOrCreateResourceConfigForBuildArgsForCall[i].resourceType, fake.findOrCreateResourceConfigForBuildArgsForCall[i].source, fake.findOrCreateResourceConfigForBuildArgsForCall[i].resourceTypes
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForBuildReturns(result1 *dbng.UsedResourceConfig, result2 error) {
	fake.FindOrCreateResourceConfigForBuildStub = nil
	fake.findOrCreateResourceConfigForBuildReturns = struct {
		result1 *dbng.UsedResourceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForResource(resource *dbng.Resource, resourceType string, source atc.Source, resourceTypes []dbng.ResourceType) (*dbng.UsedResourceConfig, error) {
	var resourceTypesCopy []dbng.ResourceType
	if resourceTypes != nil {
		resourceTypesCopy = make([]dbng.ResourceType, len(resourceTypes))
		copy(resourceTypesCopy, resourceTypes)
	}
	fake.findOrCreateResourceConfigForResourceMutex.Lock()
	fake.findOrCreateResourceConfigForResourceArgsForCall = append(fake.findOrCreateResourceConfigForResourceArgsForCall, struct {
		resource      *dbng.Resource
		resourceType  string
		source        atc.Source
		resourceTypes []dbng.ResourceType
	}{resource, resourceType, source, resourceTypesCopy})
	fake.recordInvocation("FindOrCreateResourceConfigForResource", []interface{}{resource, resourceType, source, resourceTypesCopy})
	fake.findOrCreateResourceConfigForResourceMutex.Unlock()
	if fake.FindOrCreateResourceConfigForResourceStub != nil {
		return fake.FindOrCreateResourceConfigForResourceStub(resource, resourceType, source, resourceTypes)
	} else {
		return fake.findOrCreateResourceConfigForResourceReturns.result1, fake.findOrCreateResourceConfigForResourceReturns.result2
	}
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForResourceCallCount() int {
	fake.findOrCreateResourceConfigForResourceMutex.RLock()
	defer fake.findOrCreateResourceConfigForResourceMutex.RUnlock()
	return len(fake.findOrCreateResourceConfigForResourceArgsForCall)
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForResourceArgsForCall(i int) (*dbng.Resource, string, atc.Source, []dbng.ResourceType) {
	fake.findOrCreateResourceConfigForResourceMutex.RLock()
	defer fake.findOrCreateResourceConfigForResourceMutex.RUnlock()
	return fake.findOrCreateResourceConfigForResourceArgsForCall[i].resource, fake.findOrCreateResourceConfigForResourceArgsForCall[i].resourceType, fake.findOrCreateResourceConfigForResourceArgsForCall[i].source, fake.findOrCreateResourceConfigForResourceArgsForCall[i].resourceTypes
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForResourceReturns(result1 *dbng.UsedResourceConfig, result2 error) {
	fake.FindOrCreateResourceConfigForResourceStub = nil
	fake.findOrCreateResourceConfigForResourceReturns = struct {
		result1 *dbng.UsedResourceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForResourceType(usedResourceType *dbng.UsedResourceType, resourceType string, source atc.Source, resourceTypes []dbng.ResourceType) (*dbng.UsedResourceConfig, error) {
	var resourceTypesCopy []dbng.ResourceType
	if resourceTypes != nil {
		resourceTypesCopy = make([]dbng.ResourceType, len(resourceTypes))
		copy(resourceTypesCopy, resourceTypes)
	}
	fake.findOrCreateResourceConfigForResourceTypeMutex.Lock()
	fake.findOrCreateResourceConfigForResourceTypeArgsForCall = append(fake.findOrCreateResourceConfigForResourceTypeArgsForCall, struct {
		usedResourceType *dbng.UsedResourceType
		resourceType     string
		source           atc.Source
		resourceTypes    []dbng.ResourceType
	}{usedResourceType, resourceType, source, resourceTypesCopy})
	fake.recordInvocation("FindOrCreateResourceConfigForResourceType", []interface{}{usedResourceType, resourceType, source, resourceTypesCopy})
	fake.findOrCreateResourceConfigForResourceTypeMutex.Unlock()
	if fake.FindOrCreateResourceConfigForResourceTypeStub != nil {
		return fake.FindOrCreateResourceConfigForResourceTypeStub(usedResourceType, resourceType, source, resourceTypes)
	} else {
		return fake.findOrCreateResourceConfigForResourceTypeReturns.result1, fake.findOrCreateResourceConfigForResourceTypeReturns.result2
	}
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForResourceTypeCallCount() int {
	fake.findOrCreateResourceConfigForResourceTypeMutex.RLock()
	defer fake.findOrCreateResourceConfigForResourceTypeMutex.RUnlock()
	return len(fake.findOrCreateResourceConfigForResourceTypeArgsForCall)
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForResourceTypeArgsForCall(i int) (*dbng.UsedResourceType, string, atc.Source, []dbng.ResourceType) {
	fake.findOrCreateResourceConfigForResourceTypeMutex.RLock()
	defer fake.findOrCreateResourceConfigForResourceTypeMutex.RUnlock()
	return fake.findOrCreateResourceConfigForResourceTypeArgsForCall[i].usedResourceType, fake.findOrCreateResourceConfigForResourceTypeArgsForCall[i].resourceType, fake.findOrCreateResourceConfigForResourceTypeArgsForCall[i].source, fake.findOrCreateResourceConfigForResourceTypeArgsForCall[i].resourceTypes
}

func (fake *FakeResourceConfigFactory) FindOrCreateResourceConfigForResourceTypeReturns(result1 *dbng.UsedResourceConfig, result2 error) {
	fake.FindOrCreateResourceConfigForResourceTypeStub = nil
	fake.findOrCreateResourceConfigForResourceTypeReturns = struct {
		result1 *dbng.UsedResourceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceConfigFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findOrCreateResourceConfigForBuildMutex.RLock()
	defer fake.findOrCreateResourceConfigForBuildMutex.RUnlock()
	fake.findOrCreateResourceConfigForResourceMutex.RLock()
	defer fake.findOrCreateResourceConfigForResourceMutex.RUnlock()
	fake.findOrCreateResourceConfigForResourceTypeMutex.RLock()
	defer fake.findOrCreateResourceConfigForResourceTypeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeResourceConfigFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dbng.ResourceConfigFactory = new(FakeResourceConfigFactory)
