// This file was generated by counterfeiter
package dbngfakes

import (
	"sync"

	"github.com/concourse/atc"
	"github.com/concourse/atc/dbng"
)

type FakeResourceCacheFactory struct {
	FindOrCreateResourceCacheForBuildStub        func(build *dbng.Build, resourceType string, version atc.Version, source atc.Source, params atc.Params, resourceTypes []dbng.ResourceType) (*dbng.UsedResourceCache, error)
	findOrCreateResourceCacheForBuildMutex       sync.RWMutex
	findOrCreateResourceCacheForBuildArgsForCall []struct {
		build         *dbng.Build
		resourceType  string
		version       atc.Version
		source        atc.Source
		params        atc.Params
		resourceTypes []dbng.ResourceType
	}
	findOrCreateResourceCacheForBuildReturns struct {
		result1 *dbng.UsedResourceCache
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheForBuild(build *dbng.Build, resourceType string, version atc.Version, source atc.Source, params atc.Params, resourceTypes []dbng.ResourceType) (*dbng.UsedResourceCache, error) {
	var resourceTypesCopy []dbng.ResourceType
	if resourceTypes != nil {
		resourceTypesCopy = make([]dbng.ResourceType, len(resourceTypes))
		copy(resourceTypesCopy, resourceTypes)
	}
	fake.findOrCreateResourceCacheForBuildMutex.Lock()
	fake.findOrCreateResourceCacheForBuildArgsForCall = append(fake.findOrCreateResourceCacheForBuildArgsForCall, struct {
		build         *dbng.Build
		resourceType  string
		version       atc.Version
		source        atc.Source
		params        atc.Params
		resourceTypes []dbng.ResourceType
	}{build, resourceType, version, source, params, resourceTypesCopy})
	fake.recordInvocation("FindOrCreateResourceCacheForBuild", []interface{}{build, resourceType, version, source, params, resourceTypesCopy})
	fake.findOrCreateResourceCacheForBuildMutex.Unlock()
	if fake.FindOrCreateResourceCacheForBuildStub != nil {
		return fake.FindOrCreateResourceCacheForBuildStub(build, resourceType, version, source, params, resourceTypes)
	} else {
		return fake.findOrCreateResourceCacheForBuildReturns.result1, fake.findOrCreateResourceCacheForBuildReturns.result2
	}
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheForBuildCallCount() int {
	fake.findOrCreateResourceCacheForBuildMutex.RLock()
	defer fake.findOrCreateResourceCacheForBuildMutex.RUnlock()
	return len(fake.findOrCreateResourceCacheForBuildArgsForCall)
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheForBuildArgsForCall(i int) (*dbng.Build, string, atc.Version, atc.Source, atc.Params, []dbng.ResourceType) {
	fake.findOrCreateResourceCacheForBuildMutex.RLock()
	defer fake.findOrCreateResourceCacheForBuildMutex.RUnlock()
	return fake.findOrCreateResourceCacheForBuildArgsForCall[i].build, fake.findOrCreateResourceCacheForBuildArgsForCall[i].resourceType, fake.findOrCreateResourceCacheForBuildArgsForCall[i].version, fake.findOrCreateResourceCacheForBuildArgsForCall[i].source, fake.findOrCreateResourceCacheForBuildArgsForCall[i].params, fake.findOrCreateResourceCacheForBuildArgsForCall[i].resourceTypes
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheForBuildReturns(result1 *dbng.UsedResourceCache, result2 error) {
	fake.FindOrCreateResourceCacheForBuildStub = nil
	fake.findOrCreateResourceCacheForBuildReturns = struct {
		result1 *dbng.UsedResourceCache
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceCacheFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findOrCreateResourceCacheForBuildMutex.RLock()
	defer fake.findOrCreateResourceCacheForBuildMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeResourceCacheFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dbng.ResourceCacheFactory = new(FakeResourceCacheFactory)
