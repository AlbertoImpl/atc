// This file was generated by counterfeiter
package dbngfakes

import (
	"sync"

	"github.com/concourse/atc"
	"github.com/concourse/atc/dbng"
)

type FakeContainerFactory struct {
	FindContainerByHandleStub        func(string) (*dbng.CreatedContainer, bool, error)
	findContainerByHandleMutex       sync.RWMutex
	findContainerByHandleArgsForCall []struct {
		arg1 string
	}
	findContainerByHandleReturns struct {
		result1 *dbng.CreatedContainer
		result2 bool
		result3 error
	}
	CreateResourceCheckContainerStub        func(*dbng.Worker, *dbng.UsedResourceConfig) (*dbng.CreatingContainer, error)
	createResourceCheckContainerMutex       sync.RWMutex
	createResourceCheckContainerArgsForCall []struct {
		arg1 *dbng.Worker
		arg2 *dbng.UsedResourceConfig
	}
	createResourceCheckContainerReturns struct {
		result1 *dbng.CreatingContainer
		result2 error
	}
	CreateResourceGetContainerStub        func(*dbng.Worker, *dbng.UsedResourceCache, string) (*dbng.CreatingContainer, error)
	createResourceGetContainerMutex       sync.RWMutex
	createResourceGetContainerArgsForCall []struct {
		arg1 *dbng.Worker
		arg2 *dbng.UsedResourceCache
		arg3 string
	}
	createResourceGetContainerReturns struct {
		result1 *dbng.CreatingContainer
		result2 error
	}
	CreateBuildContainerStub        func(*dbng.Worker, *dbng.Build, atc.PlanID, dbng.ContainerMetadata) (*dbng.CreatingContainer, error)
	createBuildContainerMutex       sync.RWMutex
	createBuildContainerArgsForCall []struct {
		arg1 *dbng.Worker
		arg2 *dbng.Build
		arg3 atc.PlanID
		arg4 dbng.ContainerMetadata
	}
	createBuildContainerReturns struct {
		result1 *dbng.CreatingContainer
		result2 error
	}
	ContainerCreatedStub        func(*dbng.CreatingContainer) (*dbng.CreatedContainer, error)
	containerCreatedMutex       sync.RWMutex
	containerCreatedArgsForCall []struct {
		arg1 *dbng.CreatingContainer
	}
	containerCreatedReturns struct {
		result1 *dbng.CreatedContainer
		result2 error
	}
	ContainerDestroyingStub        func(*dbng.CreatedContainer) (*dbng.DestroyingContainer, error)
	containerDestroyingMutex       sync.RWMutex
	containerDestroyingArgsForCall []struct {
		arg1 *dbng.CreatedContainer
	}
	containerDestroyingReturns struct {
		result1 *dbng.DestroyingContainer
		result2 error
	}
	ContainerDestroyStub        func(*dbng.DestroyingContainer) (bool, error)
	containerDestroyMutex       sync.RWMutex
	containerDestroyArgsForCall []struct {
		arg1 *dbng.DestroyingContainer
	}
	containerDestroyReturns struct {
		result1 bool
		result2 error
	}
	FindContainersMarkedForDeletionStub        func() ([]*dbng.DestroyingContainer, error)
	findContainersMarkedForDeletionMutex       sync.RWMutex
	findContainersMarkedForDeletionArgsForCall []struct{}
	findContainersMarkedForDeletionReturns     struct {
		result1 []*dbng.DestroyingContainer
		result2 error
	}
	MarkBuildContainersForDeletionStub        func() error
	markBuildContainersForDeletionMutex       sync.RWMutex
	markBuildContainersForDeletionArgsForCall []struct{}
	markBuildContainersForDeletionReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContainerFactory) FindContainerByHandle(arg1 string) (*dbng.CreatedContainer, bool, error) {
	fake.findContainerByHandleMutex.Lock()
	fake.findContainerByHandleArgsForCall = append(fake.findContainerByHandleArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FindContainerByHandle", []interface{}{arg1})
	fake.findContainerByHandleMutex.Unlock()
	if fake.FindContainerByHandleStub != nil {
		return fake.FindContainerByHandleStub(arg1)
	} else {
		return fake.findContainerByHandleReturns.result1, fake.findContainerByHandleReturns.result2, fake.findContainerByHandleReturns.result3
	}
}

func (fake *FakeContainerFactory) FindContainerByHandleCallCount() int {
	fake.findContainerByHandleMutex.RLock()
	defer fake.findContainerByHandleMutex.RUnlock()
	return len(fake.findContainerByHandleArgsForCall)
}

func (fake *FakeContainerFactory) FindContainerByHandleArgsForCall(i int) string {
	fake.findContainerByHandleMutex.RLock()
	defer fake.findContainerByHandleMutex.RUnlock()
	return fake.findContainerByHandleArgsForCall[i].arg1
}

func (fake *FakeContainerFactory) FindContainerByHandleReturns(result1 *dbng.CreatedContainer, result2 bool, result3 error) {
	fake.FindContainerByHandleStub = nil
	fake.findContainerByHandleReturns = struct {
		result1 *dbng.CreatedContainer
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeContainerFactory) CreateResourceCheckContainer(arg1 *dbng.Worker, arg2 *dbng.UsedResourceConfig) (*dbng.CreatingContainer, error) {
	fake.createResourceCheckContainerMutex.Lock()
	fake.createResourceCheckContainerArgsForCall = append(fake.createResourceCheckContainerArgsForCall, struct {
		arg1 *dbng.Worker
		arg2 *dbng.UsedResourceConfig
	}{arg1, arg2})
	fake.recordInvocation("CreateResourceCheckContainer", []interface{}{arg1, arg2})
	fake.createResourceCheckContainerMutex.Unlock()
	if fake.CreateResourceCheckContainerStub != nil {
		return fake.CreateResourceCheckContainerStub(arg1, arg2)
	} else {
		return fake.createResourceCheckContainerReturns.result1, fake.createResourceCheckContainerReturns.result2
	}
}

func (fake *FakeContainerFactory) CreateResourceCheckContainerCallCount() int {
	fake.createResourceCheckContainerMutex.RLock()
	defer fake.createResourceCheckContainerMutex.RUnlock()
	return len(fake.createResourceCheckContainerArgsForCall)
}

func (fake *FakeContainerFactory) CreateResourceCheckContainerArgsForCall(i int) (*dbng.Worker, *dbng.UsedResourceConfig) {
	fake.createResourceCheckContainerMutex.RLock()
	defer fake.createResourceCheckContainerMutex.RUnlock()
	return fake.createResourceCheckContainerArgsForCall[i].arg1, fake.createResourceCheckContainerArgsForCall[i].arg2
}

func (fake *FakeContainerFactory) CreateResourceCheckContainerReturns(result1 *dbng.CreatingContainer, result2 error) {
	fake.CreateResourceCheckContainerStub = nil
	fake.createResourceCheckContainerReturns = struct {
		result1 *dbng.CreatingContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerFactory) CreateResourceGetContainer(arg1 *dbng.Worker, arg2 *dbng.UsedResourceCache, arg3 string) (*dbng.CreatingContainer, error) {
	fake.createResourceGetContainerMutex.Lock()
	fake.createResourceGetContainerArgsForCall = append(fake.createResourceGetContainerArgsForCall, struct {
		arg1 *dbng.Worker
		arg2 *dbng.UsedResourceCache
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateResourceGetContainer", []interface{}{arg1, arg2, arg3})
	fake.createResourceGetContainerMutex.Unlock()
	if fake.CreateResourceGetContainerStub != nil {
		return fake.CreateResourceGetContainerStub(arg1, arg2, arg3)
	} else {
		return fake.createResourceGetContainerReturns.result1, fake.createResourceGetContainerReturns.result2
	}
}

func (fake *FakeContainerFactory) CreateResourceGetContainerCallCount() int {
	fake.createResourceGetContainerMutex.RLock()
	defer fake.createResourceGetContainerMutex.RUnlock()
	return len(fake.createResourceGetContainerArgsForCall)
}

func (fake *FakeContainerFactory) CreateResourceGetContainerArgsForCall(i int) (*dbng.Worker, *dbng.UsedResourceCache, string) {
	fake.createResourceGetContainerMutex.RLock()
	defer fake.createResourceGetContainerMutex.RUnlock()
	return fake.createResourceGetContainerArgsForCall[i].arg1, fake.createResourceGetContainerArgsForCall[i].arg2, fake.createResourceGetContainerArgsForCall[i].arg3
}

func (fake *FakeContainerFactory) CreateResourceGetContainerReturns(result1 *dbng.CreatingContainer, result2 error) {
	fake.CreateResourceGetContainerStub = nil
	fake.createResourceGetContainerReturns = struct {
		result1 *dbng.CreatingContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerFactory) CreateBuildContainer(arg1 *dbng.Worker, arg2 *dbng.Build, arg3 atc.PlanID, arg4 dbng.ContainerMetadata) (*dbng.CreatingContainer, error) {
	fake.createBuildContainerMutex.Lock()
	fake.createBuildContainerArgsForCall = append(fake.createBuildContainerArgsForCall, struct {
		arg1 *dbng.Worker
		arg2 *dbng.Build
		arg3 atc.PlanID
		arg4 dbng.ContainerMetadata
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("CreateBuildContainer", []interface{}{arg1, arg2, arg3, arg4})
	fake.createBuildContainerMutex.Unlock()
	if fake.CreateBuildContainerStub != nil {
		return fake.CreateBuildContainerStub(arg1, arg2, arg3, arg4)
	} else {
		return fake.createBuildContainerReturns.result1, fake.createBuildContainerReturns.result2
	}
}

func (fake *FakeContainerFactory) CreateBuildContainerCallCount() int {
	fake.createBuildContainerMutex.RLock()
	defer fake.createBuildContainerMutex.RUnlock()
	return len(fake.createBuildContainerArgsForCall)
}

func (fake *FakeContainerFactory) CreateBuildContainerArgsForCall(i int) (*dbng.Worker, *dbng.Build, atc.PlanID, dbng.ContainerMetadata) {
	fake.createBuildContainerMutex.RLock()
	defer fake.createBuildContainerMutex.RUnlock()
	return fake.createBuildContainerArgsForCall[i].arg1, fake.createBuildContainerArgsForCall[i].arg2, fake.createBuildContainerArgsForCall[i].arg3, fake.createBuildContainerArgsForCall[i].arg4
}

func (fake *FakeContainerFactory) CreateBuildContainerReturns(result1 *dbng.CreatingContainer, result2 error) {
	fake.CreateBuildContainerStub = nil
	fake.createBuildContainerReturns = struct {
		result1 *dbng.CreatingContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerFactory) ContainerCreated(arg1 *dbng.CreatingContainer) (*dbng.CreatedContainer, error) {
	fake.containerCreatedMutex.Lock()
	fake.containerCreatedArgsForCall = append(fake.containerCreatedArgsForCall, struct {
		arg1 *dbng.CreatingContainer
	}{arg1})
	fake.recordInvocation("ContainerCreated", []interface{}{arg1})
	fake.containerCreatedMutex.Unlock()
	if fake.ContainerCreatedStub != nil {
		return fake.ContainerCreatedStub(arg1)
	} else {
		return fake.containerCreatedReturns.result1, fake.containerCreatedReturns.result2
	}
}

func (fake *FakeContainerFactory) ContainerCreatedCallCount() int {
	fake.containerCreatedMutex.RLock()
	defer fake.containerCreatedMutex.RUnlock()
	return len(fake.containerCreatedArgsForCall)
}

func (fake *FakeContainerFactory) ContainerCreatedArgsForCall(i int) *dbng.CreatingContainer {
	fake.containerCreatedMutex.RLock()
	defer fake.containerCreatedMutex.RUnlock()
	return fake.containerCreatedArgsForCall[i].arg1
}

func (fake *FakeContainerFactory) ContainerCreatedReturns(result1 *dbng.CreatedContainer, result2 error) {
	fake.ContainerCreatedStub = nil
	fake.containerCreatedReturns = struct {
		result1 *dbng.CreatedContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerFactory) ContainerDestroying(arg1 *dbng.CreatedContainer) (*dbng.DestroyingContainer, error) {
	fake.containerDestroyingMutex.Lock()
	fake.containerDestroyingArgsForCall = append(fake.containerDestroyingArgsForCall, struct {
		arg1 *dbng.CreatedContainer
	}{arg1})
	fake.recordInvocation("ContainerDestroying", []interface{}{arg1})
	fake.containerDestroyingMutex.Unlock()
	if fake.ContainerDestroyingStub != nil {
		return fake.ContainerDestroyingStub(arg1)
	} else {
		return fake.containerDestroyingReturns.result1, fake.containerDestroyingReturns.result2
	}
}

func (fake *FakeContainerFactory) ContainerDestroyingCallCount() int {
	fake.containerDestroyingMutex.RLock()
	defer fake.containerDestroyingMutex.RUnlock()
	return len(fake.containerDestroyingArgsForCall)
}

func (fake *FakeContainerFactory) ContainerDestroyingArgsForCall(i int) *dbng.CreatedContainer {
	fake.containerDestroyingMutex.RLock()
	defer fake.containerDestroyingMutex.RUnlock()
	return fake.containerDestroyingArgsForCall[i].arg1
}

func (fake *FakeContainerFactory) ContainerDestroyingReturns(result1 *dbng.DestroyingContainer, result2 error) {
	fake.ContainerDestroyingStub = nil
	fake.containerDestroyingReturns = struct {
		result1 *dbng.DestroyingContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerFactory) ContainerDestroy(arg1 *dbng.DestroyingContainer) (bool, error) {
	fake.containerDestroyMutex.Lock()
	fake.containerDestroyArgsForCall = append(fake.containerDestroyArgsForCall, struct {
		arg1 *dbng.DestroyingContainer
	}{arg1})
	fake.recordInvocation("ContainerDestroy", []interface{}{arg1})
	fake.containerDestroyMutex.Unlock()
	if fake.ContainerDestroyStub != nil {
		return fake.ContainerDestroyStub(arg1)
	} else {
		return fake.containerDestroyReturns.result1, fake.containerDestroyReturns.result2
	}
}

func (fake *FakeContainerFactory) ContainerDestroyCallCount() int {
	fake.containerDestroyMutex.RLock()
	defer fake.containerDestroyMutex.RUnlock()
	return len(fake.containerDestroyArgsForCall)
}

func (fake *FakeContainerFactory) ContainerDestroyArgsForCall(i int) *dbng.DestroyingContainer {
	fake.containerDestroyMutex.RLock()
	defer fake.containerDestroyMutex.RUnlock()
	return fake.containerDestroyArgsForCall[i].arg1
}

func (fake *FakeContainerFactory) ContainerDestroyReturns(result1 bool, result2 error) {
	fake.ContainerDestroyStub = nil
	fake.containerDestroyReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerFactory) FindContainersMarkedForDeletion() ([]*dbng.DestroyingContainer, error) {
	fake.findContainersMarkedForDeletionMutex.Lock()
	fake.findContainersMarkedForDeletionArgsForCall = append(fake.findContainersMarkedForDeletionArgsForCall, struct{}{})
	fake.recordInvocation("FindContainersMarkedForDeletion", []interface{}{})
	fake.findContainersMarkedForDeletionMutex.Unlock()
	if fake.FindContainersMarkedForDeletionStub != nil {
		return fake.FindContainersMarkedForDeletionStub()
	} else {
		return fake.findContainersMarkedForDeletionReturns.result1, fake.findContainersMarkedForDeletionReturns.result2
	}
}

func (fake *FakeContainerFactory) FindContainersMarkedForDeletionCallCount() int {
	fake.findContainersMarkedForDeletionMutex.RLock()
	defer fake.findContainersMarkedForDeletionMutex.RUnlock()
	return len(fake.findContainersMarkedForDeletionArgsForCall)
}

func (fake *FakeContainerFactory) FindContainersMarkedForDeletionReturns(result1 []*dbng.DestroyingContainer, result2 error) {
	fake.FindContainersMarkedForDeletionStub = nil
	fake.findContainersMarkedForDeletionReturns = struct {
		result1 []*dbng.DestroyingContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerFactory) MarkBuildContainersForDeletion() error {
	fake.markBuildContainersForDeletionMutex.Lock()
	fake.markBuildContainersForDeletionArgsForCall = append(fake.markBuildContainersForDeletionArgsForCall, struct{}{})
	fake.recordInvocation("MarkBuildContainersForDeletion", []interface{}{})
	fake.markBuildContainersForDeletionMutex.Unlock()
	if fake.MarkBuildContainersForDeletionStub != nil {
		return fake.MarkBuildContainersForDeletionStub()
	} else {
		return fake.markBuildContainersForDeletionReturns.result1
	}
}

func (fake *FakeContainerFactory) MarkBuildContainersForDeletionCallCount() int {
	fake.markBuildContainersForDeletionMutex.RLock()
	defer fake.markBuildContainersForDeletionMutex.RUnlock()
	return len(fake.markBuildContainersForDeletionArgsForCall)
}

func (fake *FakeContainerFactory) MarkBuildContainersForDeletionReturns(result1 error) {
	fake.MarkBuildContainersForDeletionStub = nil
	fake.markBuildContainersForDeletionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findContainerByHandleMutex.RLock()
	defer fake.findContainerByHandleMutex.RUnlock()
	fake.createResourceCheckContainerMutex.RLock()
	defer fake.createResourceCheckContainerMutex.RUnlock()
	fake.createResourceGetContainerMutex.RLock()
	defer fake.createResourceGetContainerMutex.RUnlock()
	fake.createBuildContainerMutex.RLock()
	defer fake.createBuildContainerMutex.RUnlock()
	fake.containerCreatedMutex.RLock()
	defer fake.containerCreatedMutex.RUnlock()
	fake.containerDestroyingMutex.RLock()
	defer fake.containerDestroyingMutex.RUnlock()
	fake.containerDestroyMutex.RLock()
	defer fake.containerDestroyMutex.RUnlock()
	fake.findContainersMarkedForDeletionMutex.RLock()
	defer fake.findContainersMarkedForDeletionMutex.RUnlock()
	fake.markBuildContainersForDeletionMutex.RLock()
	defer fake.markBuildContainersForDeletionMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeContainerFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dbng.ContainerFactory = new(FakeContainerFactory)
