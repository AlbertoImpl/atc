// This file was generated by counterfeiter
package dbngfakes

import (
	"sync"

	"github.com/concourse/atc/dbng"
)

type FakeContainerFactory struct {
	FindContainersMarkedForDeletionStub        func() ([]dbng.DestroyingContainer, error)
	findContainersMarkedForDeletionMutex       sync.RWMutex
	findContainersMarkedForDeletionArgsForCall []struct{}
	findContainersMarkedForDeletionReturns     struct {
		result1 []dbng.DestroyingContainer
		result2 error
	}
	MarkContainersForDeletionStub        func() error
	markContainersForDeletionMutex       sync.RWMutex
	markContainersForDeletionArgsForCall []struct{}
	markContainersForDeletionReturns     struct {
		result1 error
	}
	FindHijackedContainersForDeletionStub        func() ([]dbng.CreatedContainer, error)
	findHijackedContainersForDeletionMutex       sync.RWMutex
	findHijackedContainersForDeletionArgsForCall []struct{}
	findHijackedContainersForDeletionReturns     struct {
		result1 []dbng.CreatedContainer
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContainerFactory) FindContainersMarkedForDeletion() ([]dbng.DestroyingContainer, error) {
	fake.findContainersMarkedForDeletionMutex.Lock()
	fake.findContainersMarkedForDeletionArgsForCall = append(fake.findContainersMarkedForDeletionArgsForCall, struct{}{})
	fake.recordInvocation("FindContainersMarkedForDeletion", []interface{}{})
	fake.findContainersMarkedForDeletionMutex.Unlock()
	if fake.FindContainersMarkedForDeletionStub != nil {
		return fake.FindContainersMarkedForDeletionStub()
	} else {
		return fake.findContainersMarkedForDeletionReturns.result1, fake.findContainersMarkedForDeletionReturns.result2
	}
}

func (fake *FakeContainerFactory) FindContainersMarkedForDeletionCallCount() int {
	fake.findContainersMarkedForDeletionMutex.RLock()
	defer fake.findContainersMarkedForDeletionMutex.RUnlock()
	return len(fake.findContainersMarkedForDeletionArgsForCall)
}

func (fake *FakeContainerFactory) FindContainersMarkedForDeletionReturns(result1 []dbng.DestroyingContainer, result2 error) {
	fake.FindContainersMarkedForDeletionStub = nil
	fake.findContainersMarkedForDeletionReturns = struct {
		result1 []dbng.DestroyingContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerFactory) MarkContainersForDeletion() error {
	fake.markContainersForDeletionMutex.Lock()
	fake.markContainersForDeletionArgsForCall = append(fake.markContainersForDeletionArgsForCall, struct{}{})
	fake.recordInvocation("MarkContainersForDeletion", []interface{}{})
	fake.markContainersForDeletionMutex.Unlock()
	if fake.MarkContainersForDeletionStub != nil {
		return fake.MarkContainersForDeletionStub()
	} else {
		return fake.markContainersForDeletionReturns.result1
	}
}

func (fake *FakeContainerFactory) MarkContainersForDeletionCallCount() int {
	fake.markContainersForDeletionMutex.RLock()
	defer fake.markContainersForDeletionMutex.RUnlock()
	return len(fake.markContainersForDeletionArgsForCall)
}

func (fake *FakeContainerFactory) MarkContainersForDeletionReturns(result1 error) {
	fake.MarkContainersForDeletionStub = nil
	fake.markContainersForDeletionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerFactory) FindHijackedContainersForDeletion() ([]dbng.CreatedContainer, error) {
	fake.findHijackedContainersForDeletionMutex.Lock()
	fake.findHijackedContainersForDeletionArgsForCall = append(fake.findHijackedContainersForDeletionArgsForCall, struct{}{})
	fake.recordInvocation("FindHijackedContainersForDeletion", []interface{}{})
	fake.findHijackedContainersForDeletionMutex.Unlock()
	if fake.FindHijackedContainersForDeletionStub != nil {
		return fake.FindHijackedContainersForDeletionStub()
	} else {
		return fake.findHijackedContainersForDeletionReturns.result1, fake.findHijackedContainersForDeletionReturns.result2
	}
}

func (fake *FakeContainerFactory) FindHijackedContainersForDeletionCallCount() int {
	fake.findHijackedContainersForDeletionMutex.RLock()
	defer fake.findHijackedContainersForDeletionMutex.RUnlock()
	return len(fake.findHijackedContainersForDeletionArgsForCall)
}

func (fake *FakeContainerFactory) FindHijackedContainersForDeletionReturns(result1 []dbng.CreatedContainer, result2 error) {
	fake.FindHijackedContainersForDeletionStub = nil
	fake.findHijackedContainersForDeletionReturns = struct {
		result1 []dbng.CreatedContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findContainersMarkedForDeletionMutex.RLock()
	defer fake.findContainersMarkedForDeletionMutex.RUnlock()
	fake.markContainersForDeletionMutex.RLock()
	defer fake.markContainersForDeletionMutex.RUnlock()
	fake.findHijackedContainersForDeletionMutex.RLock()
	defer fake.findHijackedContainersForDeletionMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeContainerFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dbng.ContainerFactory = new(FakeContainerFactory)
