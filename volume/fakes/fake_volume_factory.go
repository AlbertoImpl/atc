// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/volume"
	"github.com/concourse/baggageclaim"
	"github.com/pivotal-golang/lager"
)

type FakeVolumeFactory struct {
	BuildStub        func(lager.Logger, baggageclaim.Volume) (volume.Volume, error)
	buildMutex       sync.RWMutex
	buildArgsForCall []struct {
		arg1 lager.Logger
		arg2 baggageclaim.Volume
	}
	buildReturns struct {
		result1 volume.Volume
		result2 error
	}
}

func (fake *FakeVolumeFactory) Build(arg1 lager.Logger, arg2 baggageclaim.Volume) (volume.Volume, error) {
	fake.buildMutex.Lock()
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct {
		arg1 lager.Logger
		arg2 baggageclaim.Volume
	}{arg1, arg2})
	fake.buildMutex.Unlock()
	if fake.BuildStub != nil {
		return fake.BuildStub(arg1, arg2)
	} else {
		return fake.buildReturns.result1, fake.buildReturns.result2
	}
}

func (fake *FakeVolumeFactory) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *FakeVolumeFactory) BuildArgsForCall(i int) (lager.Logger, baggageclaim.Volume) {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return fake.buildArgsForCall[i].arg1, fake.buildArgsForCall[i].arg2
}

func (fake *FakeVolumeFactory) BuildReturns(result1 volume.Volume, result2 error) {
	fake.BuildStub = nil
	fake.buildReturns = struct {
		result1 volume.Volume
		result2 error
	}{result1, result2}
}

var _ volume.VolumeFactory = new(FakeVolumeFactory)
